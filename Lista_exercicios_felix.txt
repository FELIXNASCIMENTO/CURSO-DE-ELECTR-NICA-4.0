4.1. Escreva um programa que peça ao usuário para inserir um número inteiro, armazene esse número em uma
variável do tipo short (ou short int) e o imprima de volta na tela. 
Quais valores podem ser inseridos?

Podem se inseridos numeros de -32.767 a 32.767 pois o tipo short amazenas dados de ate 16 bits.

Qual é o maior número que você pode inserir e imprimir corretamente?

 32.767 alem desse valor ocasionarar erro de leitura.

#include <stdio.h>
int main() {
    short n;
    
    printf("Insira um número inteiro: ");
    scanf("%hd", &n);
    
    printf("Você inseriu: %hd\n", n);
    
    return 0;
}

4.2. Repita o exercício anterior, mas desta vez use uma variável do tipo int ou long.
#include <stdio.h>
int main() {
    int n;
    
    printf("Insira um número inteiro: ");
    scanf("%d", &n);
    
    printf("Você inseriu: %d\n", n);
    
    return 0;
}
4.3. Escreva um programa que:
• peça ao usuário para inserir 2 números inteiros em uma linha
• obtenha esses 2 números usando apenas uma chamada da função scanf
• imprima ambos os números na linha seguinte
O diálogo na tela deve ser:
Copy code
Digite 2 números inteiros: 17 7
Os números inseridos são 17 e 7

#include <stdio.h>

int main() {
    int n, n1;
    
    printf("Insira dois número inteiro: ");
    scanf("%d %d",&n, &n1 );
  
    printf("Você inseriu: %d e %d", n,n1);
    
    return 0;
}




4.4. Escreva um programa que peça ao usuário para inserir 2 números reais e imprima a soma e o produto deles na
tela.
#include<stdio.h>

int main()

{
float n1, n2, soma, mult;
printf("digite o primeiro numero :");
scanf("%f %f", &n1, &n2);

soma=n1+n2;
mult=n1*n2;      
printf("a soma entre %.2f e %.2f e: %.2f\n", n1, n2, soma);
printf("a multiplicação entre %.2f e %.2f e: %.2f", n1, n2, mult);

return 0;
}

4.5. Escreva um programa que peça ao usuário para inserir 2 números inteiros e imprima o resultado e o resto da
divisão inteira dos dois números e o quociente real.
O diálogo na tela deve ser:
Digite 2 números inteiros: 17 7
quociente inteiro = 2
resto = 3
quociente = 2.43 
#include <stdio.h>

int main() {
    int n1, n2;
    int DivInt, resto;
    float QR;
    printf("Insira o 2 Números inteiros: ");
    scanf("%d %d", &n1, &n2);
        DivInt = n1 / n2;
        resto = n1 % n2;
        QR = (float) n1 / n2;
        printf("Resultado da divisão: %d\n", DivInt);
        printf("Resto da divisão: %d\n", resto);
        printf("Quociente real: %.2f\n", QR);
    return 0;
}


4.6. Escreva um programa que peça ao usuário para inserir 2 números reais, calcule o quociente e armazene-o em
uma variável do tipo float. Imprima o quociente com 20 casas decimais.
#include <stdio.h>

int main() {
    float n1, n2;
    double QR;
    
    printf("Insira 2 numeros: ");
    scanf("%f %f", &n1, &n2);
        
        QR = (double) n1 / n2;
        printf("Calculo com 20 casas decimais: %.20f\n", QR);
    return 0;
}




4.7. Escreva um programa que peça ao usuário para inserir horas, minutos e segundos separadamente e os imprima
em uma frase como:

O horário inserido é: hh horas mm minutos e ss segundos onde hh e mm podem ser apenas números inteiros. ss
pode ter dígitos após o ponto decimal.
#include <stdio.h>

int main() {
    int hh, mm;
    float ss;
    printf("Insira as horas (inteiro): ");
    scanf("%d", &hh);
    printf("Insira os minutos (inteiro): ");
    scanf("%d", &mm);
    printf("Insira os segundos (com ou sem dígitos após o ponto decimal): ");
    scanf("%f", &ss);
    printf("O horário inserido é: %d horas, %d minutos e %.2f segundos\n",
    hh, mm, ss);
    
    return 0;
}

4.8. Escreva um programa que peça ao usuário para inserir o nome e o sobrenome separadamente e imprima-os em
uma linha. Teste seu programa com nomes que contêm espaços em branco (ex: Julia Rose Smith).
#include <stdio.h>
int main ( )
{   
     char nome, sobrenome;

     printf ("Digite seu nome\n");   
     scanf ("%s", &nome);   

     printf ("Digite seu sobrenome\n");   
     scanf ("%s", &sobrenome);

     printf ("Seu nome completo e %s %s", nome, sobrenome);

return 0;
}

4.9. Escreva um programa que peça ao usuário para inserir o raio de um círculo, calcule a área dessa circunferência
e imprima o resultado na tela. (π pode ser aproximado como 3.141592653589793. Defina π como uma constante
em seu programa).
#include <stdio.h>
#include <math.h>
int main ( )
{   
   double raio;
   const double pi = 3.14159265358979;
     printf( "Digite o raio da circuferencia:");
     scanf("%lf", &raio);
     double area = pi*(raio*raio);
     printf("A area do circulo é:%lf",area);
return 0;
}


4.10. Escreva um programa que peça ao usuário para inserir um número de segundos e imprima o número
correspondente de dias, horas (<24), minutos (<60) e segundos (<60).
Ex: 90061 seg = 1 dia 1 hora 1 minuto e 1 segundo

#include <stdio.h>
int main() {
    // Declaração de variáveis
    int  h, m, ss, s, d,rest, rest2;
    
    
    printf("Digite uma quantidade de segundos: ");
    scanf("%d", &s);
   
    d =  s / 86400;
    rest = (s%86400);
    h = rest/3600;
    rest2= (rest%3600);
    m = rest2/60;
    ss = s % 60;
    printf("Ja se passaram %d dias %.2d horas %.2d minutos e %.2d segundos. ",d,h,m,ss);
     return 0;
}


4.11. Escreva um programa que peça ao usuário para inserir 5 números inteiros um por um. Enquanto lê os
números, o programa calcula a soma. No final, a média dos 5 números deve ser impressa com uma precisão de 2
casas decimais. Tente limitar o número de variáveis no seu programa para 2 (ou no máximo 3), mas não introduza
loops ainda.

#include <stdio.h>

int main() {
    int num, soma = 0;
    float media;
    
  
    printf("Insira o primeiro número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o segundo número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o terceiro número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o quarto número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o quinto número: ");
    scanf("%d", &num);
    soma += num;
    
    media = (float) soma / 5;
    
    printf("A média dos 5 números é: %.2f\n", media);
    
    return 0;
}



4.12. Escreva um programa que peça ao usuário para inserir um valor em euros (ex: 13578) e imprima o número
correspondente de notas (500, 200, 100, 50, 20, 10, 5) e moedas (2, 1). Sempre use o número mínimo possível de
notas e moedas.
#include <stdio.h>

int main() {
    int valor, notas500, notas200, notas100, notas50, notas20, notas10, notas5;
    int moedas2, moedas1;
    
    printf("Insira um valor em euros: ");
    scanf("%d", &valor);
    
    notas500 = valor / 500;
    valor = valor % 500;

    notas200 = valor / 200;
    valor = valor % 200;
   
    notas100 = valor / 100;
    valor = valor % 100;
  
    notas50 = valor / 50;
    valor = valor % 50;
  
    notas20 = valor / 20;
    valor = valor % 20;
    
    notas10 = valor / 10;
    valor = valor % 10;
  
    notas5 = valor / 5;
    valor = valor % 5;
   
    moedas2 = valor / 2;
    valor = valor % 2;
   
    moedas1 = valor;
    
    printf("Número mínimo de notas e moedas:\n");
    printf("Notas de 500: %d\n", notas500);
    printf("Notas de 200: %d\n", notas200);
    printf("Notas de 100: %d\n", notas100);
    printf("Notas de 50: %d\n", notas50);
    printf("Notas de 20: %d\n", notas20);
    printf("Notas de 10: %d\n", notas10);
    printf("Notas de 5: %d\n", notas5);
    printf("Moedas de 2 euros: %d\n", moedas2);
    printf("Moedas de 1 euro: %d\n", moedas1);
    
    return 0;
}
4.13. Reescreva o programa anterior de forma que centavos (50, 20, 10, 5, 2, 1) também sejam incluídos (ex:
13578,78). Tenha em mente que o operador % só pode ser usado com operandos inteiros!
#include <stdio.h>

int main() {
    int euros, centavos;
    int notas500, notas200, notas100, notas50, notas20, notas10, notas5;
    int moedas2, moedas1;
    int moedas50, moedas20, moedas10, moedas5, moedas2cent, moedas1cent;
    float valor;
    
    // Solicita ao usuário o valor em euros e centavos
    printf("Digite o valor em euros (exemplo: 135.78): ");
    scanf("%f", &valor);
    
    // Separa a parte inteira (euros) e os centavos
    euros = (int)valor;           // Parte inteira
    centavos = (valor - euros) * 100;  // Parte decimal convertida em centavos
    
    // Calcula o número de notas
    notas500 = euros / 500;
    euros %= 500;
    
    notas200 = euros / 200;
    euros %= 200;
    
    notas100 = euros / 100;
    euros %= 100;
    
    notas50 = euros / 50;
    euros %= 50;
    
    notas20 = euros / 20;
    euros %= 20;
    
    notas10 = euros / 10;
    euros %= 10;
    
    notas5 = euros / 5;
    euros %= 5;
    
    // Calcula o número de moedas
    moedas2 = euros / 2;
    euros %= 2;
    
    moedas1 = euros;
    
    // Calcula o número de moedas em centavos
    moedas50 = centavos / 50;
    centavos %= 50;
    
    moedas20 = centavos / 20;
    centavos %= 20;
    
    moedas10 = centavos / 10;
    centavos %= 10;
    
    moedas5 = centavos / 5;
    centavos %= 5;
    
    moedas2cent = centavos / 2;
    centavos %= 2;
    
    moedas1cent = centavos;
    
    // Exibe o número de notas e moedas
    printf("Notas de 500 euros: %d\n", notas500);
    printf("Notas de 200 euros: %d\n", notas200);
    printf("Notas de 100 euros: %d\n", notas100);
    printf("Notas de 50 euros: %d\n", notas50);
    printf("Notas de 20 euros: %d\n", notas20);
    printf("Notas de 10 euros: %d\n", notas10);
    printf("Notas de 5 euros: %d\n", notas5);
    
    printf("Moedas de 2 euros: %d\n", moedas2);
    printf("Moedas de 1 euro: %d\n", moedas1);
    
    printf("Moedas de 50 centavos: %d\n", moedas50);
    printf("Moedas de 20 centavos: %d\n", moedas20);
    printf("Moedas de 10 centavos: %d\n", moedas10);
    printf("Moedas de 5 centavos: %d\n", moedas5);
    printf("Moedas de 2 centavos: %d\n", moedas2cent);
    printf("Moedas de 1 centavo: %d\n", moedas1cent);
    
    return 0;
}



4.14. Considere um circuito elétrico composto por dois resistores em série, R1 e R2. Se uma tensão U é aplicada a
este circuito, a corrente que flui pelo circuito será I=UR1+R2I = \frac{U}{R1 + R2}I=R1+R2U de acordo com a lei de
Ohm. A tensão V2V2V2 sobre o resistor R2 será então definida por V2=I×R2V2 = I \times R2V2=I×R2. Escreva um
programa que peça ao usuário para inserir os valores de U, R1 e R2 e imprima os valores de I e V2 na tela.
#include <stdio.h>

int main() {
    float U, R1, R2, I, V2;
    
    // Solicita ao usuário os valores de U, R1 e R2
    printf("Digite o valor da tensão (U) em volts: ");
    scanf("%f", &U);
    
    printf("Digite o valor do resistor R1 em ohms: ");
    scanf("%f", &R1);
    
    printf("Digite o valor do resistor R2 em ohms: ");
    scanf("%f", &R2);
    
    // Calcula a corrente I usando a fórmula I = U / (R1 + R2)
    I = U / (R1 + R2);
    
    // Calcula a tensão V2 sobre o resistor R2 usando a fórmula V2 = I * R2
    V2 = I * R2;
    
    // Exibe os resultados
    printf("A corrente I que flui pelo circuito é: %.2f A\n", I);
    printf("A tensão sobre o resistor R2 é: %.2f V\n", V2);
    
    return 0;
}


4.15. Escreva um programa que leia 6 números inteiros e os imprima em um formato de tabela com 3 linhas e 2
colunas.

O diálogo na tela deve ser:
Digite 6 números inteiros: 1 22 33 4 5 6
1 22

33 4

5 6


#include <stdio.h>

int main() {
    int numeros[6]; // Vetor para armazenar os 6 números inteiros
    
    // Solicita ao usuário para inserir os 6 números inteiros
    printf("Digite 6 números inteiros: ");
    for (int i = 0; i < 6; i++) {
        scanf("%d", &numeros[i]);
    }
    
    // Imprime os números em formato de tabela (3 linhas, 2 colunas)
    printf("\n");
    printf("%d %d\n", numeros[0], numeros[1]);
    printf("%d %d\n", numeros[2], numeros[3]);
    printf("%d %d\n", numeros[4], numeros[5]);

    return 0;
}

4.16. Reescreva o exercício anterior de forma que linhas sejam colocadas ao redor da tabela e entre os números:
Digite 6 números inteiros:
1 22 33 4 5 6

-------------

| 1 | 22 |
|-----------|
| 33 | 4 |
|-----------|
| 5 | 6 |

-------------

#include <stdio.h>

int main() {
    int numeros[6]; 
  
    printf("Digite 6 números inteiros: ");
    for (int i = 0; i < 6; i++) {
        scanf("%d", &numeros[i]);
    }
    
    printf("\n");
    printf("-------------\n");
    printf("|%d| |%d|\n", numeros[0], numeros[1]);
    printf("------------\n");
    printf("|%d| |%d|\n", numeros[2], numeros[3]);
    printf("-------------\n");
    printf("|%d| |%d|\n", numeros[4], numeros[5]);
    printf("-------------");

    return 0;
}


4.17. Reescreva o exercício anterior com números reais. Certifique-se de que os pontos decimais estejam bem
alinhados.

#include <stdio.h>

int main() {
    float numeros[6];
    printf("Digite 6 números inteiros: ");
    for (int i = 0; i < 6; i++) {
        scanf("%f", &numeros[i]);
    }
    
    printf("\n");
    printf("-------------\n");
    printf("|%.2f| |%.2f|\n", numeros[0], numeros[1]);
    printf("------------\n");
    printf("|%.2f| |%.2f|\n", numeros[2], numeros[3]);
    printf("-------------\n");
    printf("|%.2f| |%.2f|\n", numeros[4], numeros[5]);
    printf("-------------");

    return 0;
}

4.18. Escreva um programa que peça ao usuário para inserir nome, sobrenome, rua, número, código postal e nome
da cidade. Depois, o programa deve exibir esses dados no formato:
sobrenome nome

rua número

código postal cidade

#include <stdio.h>

int main() {
    char nome[50], sobrenome[50], rua[100], cidade[50];
    int numero;
    char codigoPostal[10];

 
    printf("Digite o nome: ");
    scanf("%s", nome);

    printf("Digite o sobrenome: ");
    scanf("%s", sobrenome);

    printf("Digite o nome da rua: ");
    scanf(" %[^\n]s", rua); 

    printf("Digite o número da casa: ");
    scanf("%d", &numero);

    printf("Digite o código postal: ");
    scanf("%s", codigoPostal);

    printf("Digite o nome da cidade: ");
    scanf("%s", cidade);

    printf("\n%s %s\n", sobrenome, nome);
    printf("%s %d\n", rua, numero);
    printf("%s %s\n", codigoPostal, cidade);

    return 0;
}

4.19. Escreva um programa que peça ao usuário para inserir o número da fatura, o número de produtos pedidos e o
preço por unidade. Calcule o valor total a ser pago e imprima-o na tela.




O diálogo na tela deve ser:
Digite o número da fatura: 12
Digite o número de produtos pedidos: 50
Digite o preço por unidade: 599
NÚMERO DA FATURA PREÇO/UNIDADE TOTAL
12 50 599 29950

#include <stdio.h>

int main() {
    int numeroFatura, quantidadeProdutos;
    float precoUnidade, total;
    
    // Solicita o número da fatura
    printf("Digite o número da fatura: ");
    scanf("%d", &numeroFatura);
    
    // Solicita o número de produtos pedidos
    printf("Digite o número de produtos pedidos: ");
    scanf("%d", &quantidadeProdutos);
    
    // Solicita o preço por unidade
    printf("Digite o preço por unidade: ");
    scanf("%f", &precoUnidade);
    
    // Calcula o valor total
    total = quantidadeProdutos * precoUnidade;
    
    // Imprime o resultado no formato solicitado
    printf("NÚMERO DA FATURA\tPRODUTOS\tPREÇO/UNIDADE\tTOTAL\n");
    printf("%d\t\t\t%d\t\t%.2f\t\t%.2f\n", numeroFatura, quantidadeProdutos, precoUnidade, total);
    
    return 0;
}

4.20.Escreva um programa que peça ao usuário para inserir um número inteiro com 3 dígitos e imprima o número ao
contrário.

Digite um número inteiro com 3 dígitos: 123 O número impresso ao contrário é: 321
Dica: 321=3×100+2×10+1321 = 3 \times 100 + 2 \times 10 + 1321=3×100+2×10+1 com 1=1231001 =

\frac{123}{100}1=100123, 2=23102 = \frac{23}{10}2=1023 e 3=restante3 = \text{restante}3=restante.
#include <stdio.h>

int main() {
    int num, centena, dezena, unidade, inverso;
    
    
    printf("Digite um número inteiro com 3 dígitos: ");
    scanf("%d", &num);
    
    
    centena = num / 100;          
    dezena = (num % 100) / 10;    
    unidade = num % 10;          
   
    inverso = unidade * 100 + dezena * 10 + centena;
   
    printf("O número impresso ao contrário é: %d\n", inverso);
    
    return 0;
}



4.21. Escreva um programa que imprima a data da Páscoa para um ano inserido pelo usuário.
A Páscoa ocorre no primeiro domingo após a primeira lua cheia da primavera. A Páscoa é adiada por 1 semana se a
lua cheia cair no domingo. De acordo com Jean Meeus, Spencer Jones e Butcher, a data da Páscoa no ano J pode
ser calculada da seguinte forma (todas as divisões são divisões inteiras):


#include <stdio.h>

int main() {
    int J, a, b, c, d, e, f, g, h, i, k, l, m, n, p;
    
    printf("Insira o ano: ");
    scanf("%d", &J);
    
    a = J % 19;
    b = J / 100;
    c = J % 100;
    d = b / 4;
    e = b % 4;
    f = (b + 8) / 25;
    g = (b - f + 1) / 3;
    h = (19 * a + b - d - g + 15) % 30;
    i = c / 4;
    k = c % 4;
    l = (32 + 2 * e + 2 * i - h - k) % 7;
    m = (a + 11 * h + 22 * l) / 451;
    n = (h + l - 7 * m + 114) / 31;  // Mês da Páscoa
    p = (h + l - 7 * m + 114) % 31;  // Dia da Páscoa
    
    printf("A Páscoa no ano %d será em: %d/%d\n", J, p + 1, n);
    
    return 0;
}

----------------------------------------------------------------------------------------------------------------------
LISTA 2

 5.2.1 Escreva um programa que solicite ao usuário que insira um número inteiro e imprima se esse número é
positivo ou não (ou seja, negativo ou zero!).

 5.2.2 Escreva um programa que solicite ao usuário que insira um número inteiro e imprima se esse número é par
ou ímpar.

 5.2.3 Escreva um programa que solicite ao usuário que insira um número real e imprima se esse número está no
intervalo [5,10[ ou não (o intervalo [5,10[ significa 5 ≤ x < 10)





 5.2.4 Escreva um programa que solicite ao usuário que insira um número real e imprima se, para esse número,
cada uma das seguintes condições é atendida ou não:
- Condição A: 3 ≤ x < 8.5
- Condição B: x < 3 OU 5.4 < x ≤ 7.3 OU x > 13
- Condição C: x ≠ 3 E x < 9.75
Exemplos:
- 0 corresponde às condições: não A, B, C
- 3 corresponde às condições: A, não B, não C
- 8 corresponde às condições: A, não B, C
- 15 corresponde às condições: não A, B, não C





 5.2.5 Escreva um programa que solicite ao usuário que insira um número real e imprima se esse número é
positivo, zero ou negativo.

 5.2.6 Escreva um programa que solicite ao usuário que insira 5 números inteiros um por um. Enquanto lê os
números, o programa calcula o menor valor desses números. No final, o menor valor é impresso. Tente limitar o
número de variáveis no seu programa a 2 (ou no máximo 3), mas não introduza laços ainda.





 5.2.7 Escreva um programa que compare sua velocidade com o limite de velocidade. Se você estiver acima do
limite, o programa calculará sua multa. Caso contrário, nada acontece. A multa consiste em um valor fixo de € 100 e
um valor variável de € 2,5 para cada km acima do limite de velocidade.
A tela deve exibir:

```

Atenção! Exceder o limite de velocidade é severamente multado!
Digite sua velocidade: 131
Digite o limite de velocidade: 120
Sua velocidade está 11 km/h acima do limite.

Sua multa é de 127,5 euros.
``
#include <stdio.h>

int main() {
    float velocidade, limite, multa;
    float excesso;
    
    printf("Atenção! Exceder o limite de velocidade é severamente multado!\n");
    
    printf("Digite sua velocidade (km/h): ");
    scanf("%f", &velocidade);
    
    printf("Digite o limite de velocidade (km/h): ");
    scanf("%f", &limite);
    
    if (velocidade > limite) {
        excesso = velocidade - limite; 
        multa = 100 + (excesso * 2.5);  
        
        printf("Sua velocidade está %.0f km/h acima do limite.\n", excesso);
        printf("Sua multa é de %.2f euros.\n", multa);
    } else {
        printf("Você está dentro do limite de velocidade. Sem multa.\n");
    }
    
    return 0;
}




 5.2.8 Escreva um programa que calcule o IMC (Índice de Massa Corporal). O IMC é uma medida da gordura
corporal baseada na altura e peso, aplicável a homens e mulheres adultos. Pode ser calculado com a fórmula:

O IMC é dividido em diferentes categorias:
- Abaixo do peso: < 18,5
- Peso normal: 18,5 – 24,9
- Sobrepeso: 25 – 29,9
- Obesidade: ≥ 30

Peça ao usuário a altura e o peso, calcule o IMC e imprima a categoria à qual o usuário pertence.


#include <stdio.h>

int main() {
    float peso, altura, imc;

    printf("Digite seu peso em kg: ");
    scanf("%f", &peso);

    printf("Digite sua altura em metros: ");
    scanf("%f", &altura);

    imc = peso / (altura * altura);

    printf("Seu IMC é: %.2f\n", imc);

    if (imc < 18.5) {
        printf("Categoria: Abaixo do peso\n");
    } else if (imc >= 18.5 && imc <= 24.9) {
        printf("Categoria: Peso normal\n");
    } else if (imc >= 25 && imc <= 29.9) {
        printf("Categoria: Sobrepeso\n");
    } else {
        printf("Categoria: Obesidade\n");
    }

    return 0;
}


 5.2.9 Escreva um programa que primeiro leia 3 números inteiros que representam a data atual e depois leia
novamente 3 números inteiros para serem interpretados como uma data de nascimento. Com base nessas
informações, o programa imprime a idade dessa pessoa em anos e meses.
Digite a data atual: 6 1 2015
Digite sua data de nascimento: 25 1 1985
Sua idade é: 29 anos e 11 meses

#include <stdio.h>

int main() {
    int diaAtual, mesAtual, anoAtual;
    int diaNasc, mesNasc, anoNasc;
    int anos, meses;
    
    printf("Digite a data atual (dia mês ano): ");
    scanf("%d %d %d", &diaAtual, &mesAtual, &anoAtual);
    
    printf("Digite sua data de nascimento (dia mês ano): ");
    scanf("%d %d %d", &diaNasc, &mesNasc, &anoNasc);
    
    anos = anoAtual - anoNasc;
    meses = mesAtual - mesNasc;
    
    if (meses < 0 || (meses == 0 && diaAtual < diaNasc)) {
        anos--;  // A pessoa ainda não fez aniversário este ano
        meses += 12;  // Ajusta os meses
    }
    
    if (diaAtual < diaNasc) {
        meses--;
    }
    
    printf("Sua idade é: %d anos e %d meses\n", anos, meses);

    return 0;
}


 5.2.10 Escreva um programa que leia um horário de início e um horário de término, calcule a diferença de tempo e
a imprima no formato hh horas mm minutos ss segundos. Você pode ler horas, minutos e segundos separadamente.
Se o horário de início parecer ser mais tarde do que o horário de término, você pode assumir que o horário de início é
do dia anterior

#include <stdio.h>

struct Tempo {
    int horas;
    int minutos;
    int segundos;
};

// Função para calcular a diferença de tempo
struct Tempo calcularDiferenca(struct Tempo inicio, struct Tempo fim) {
    struct Tempo diferenca;

    // Ajusta segundos
    if (fim.segundos < inicio.segundos) {
        fim.segundos += 60;
        fim.minutos -= 1;
    }
    diferenca.segundos = fim.segundos - inicio.segundos;

    // Ajusta minutos
    if (fim.minutos < inicio.minutos) {
        fim.minutos += 60;
        fim.horas -= 1;
    }
    diferenca.minutos = fim.minutos - inicio.minutos;

    // Ajusta horas (considerando que o início pode ser no dia anterior)
    if (fim.horas < inicio.horas) {
        fim.horas += 24;
    }
    diferenca.horas = fim.horas - inicio.horas;

    return diferenca;
}

int main() {
    struct Tempo inicio, fim, diferenca;

    // Lê o horário de início
    printf("Digite o horário de início (hh mm ss): ");
    scanf("%d %d %d", &inicio.horas, &inicio.minutos, &inicio.segundos);

    // Lê o horário de término
    printf("Digite o horário de término (hh mm ss): ");
    scanf("%d %d %d", &fim.horas, &fim.minutos, &fim.segundos);

    // Calcula a diferença de tempo
    diferenca = calcularDiferenca(inicio, fim);

    // Exibe a diferença no formato hh horas mm minutos ss segundos
    printf("Diferença de tempo: %d horas %d minutos %d segundos\n", 
           diferenca.horas, diferenca.minutos, diferenca.segundos);

    return 0;
}


 5.2.11 Escreva um programa que leia 3 números e os imprima classificados do menor para o maior.

 5.2.12 Escreva um programa que leia um dígito (0, 1, ..., 9) e imprima esse dígito por extenso. Se o número
inserido não for um dígito, uma mensagem de aviso deve ser impressa.
Digite um dígito: 3
Você inseriu o dígito três.

Digite um dígito: 23
O número que você inseriu não é um dígito.

#include <stdio.h>

int main() {
    int numero;

    printf("Digite um dígito: ");
    scanf("%d", &numero);

    if (numero < 0 || numero > 9) {
        printf("O número que você inseriu não é um dígito.\n");
    } else {
        switch (numero) {
            case 0:
                printf("Você inseriu o dígito zero.\n");
                break;
            case 1:
                printf("Você inseriu o dígito um.\n");
                break;
            case 2:
                printf("Você inseriu o dígito dois.\n");
                break;
            case 3:
                printf("Você inseriu o dígito três.\n");
                break;
            case 4:
                printf("Você inseriu o dígito quatro.\n");
                break;
            case 5:
                printf("Você inseriu o dígito cinco.\n");
                break;
            case 6:
                printf("Você inseriu o dígito seis.\n");
                break;
            case 7:
                printf("Você inseriu o dígito sete.\n");
                break;
            case 8:
                printf("Você inseriu o dígito oito.\n");
                break;
            case 9:
                printf("Você inseriu o dígito nove.\n");
                break;
        }
    }

    return 0;
}




 5.2.13 Escreva um programa que solicite ao usuário que insira uma instrução no formato: número1 operador
número2

Para o operador, o usuário pode escolher +, -, * ou /. O programa calcula o resultado matemático e o imprime na tela.

Dica: leia a instrução com
scanf("%f%c%f%*c",&getal1,&operador,&getal2);

e use

switch(operador)

Digite uma expressão (sem espaços!): 245/16
245 / 16 = 15,31


#include <stdio.h>

int main() {
    float numero1, numero2, resultado;
    char operador;

    // Solicita a expressão no formato número1 operador número2
    printf("Digite uma expressão (sem espaços!): ");
    scanf("%f%c%f", &numero1, &operador, &numero2);

    // Usa switch para calcular o resultado com base no operador fornecido
    switch (operador) {
        case '+':
            resultado = numero1 + numero2;
            printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            break;
        case '-':
            resultado = numero1 - numero2;
            printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            break;
        case '*':
            resultado = numero1 * numero2;
            printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            break;
        case '/':
            if (numero2 != 0) {
                resultado = numero1 / numero2;
                printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            } else {
                printf("Erro: Divisão por zero não permitida!\n");
            }
            break;
        default:
            printf("Erro: Operador inválido!\n");
    }

    return 0;
}




 5.2.14 Uma companhia de gás calcula seus preços da seguinte forma:
- Para um consumo ≤ 1m3: € 20,00
- Para um consumo > 1m3: € 20 pelo primeiro m3 + € 3,5/m3 para a parte acima de 1m3

O valor total precisa ser acrescido de um imposto de 21%.

Escreva um programa que peça ao usuário para inserir seu consumo e imprima uma fatura na tela mostrando o
consumo, o preço de custo, o valor do imposto e o valor total.

#include <stdio.h>

int main() {
    float consumo, preco_custo, imposto, valor_total;

    // Solicita o consumo ao usuário
    printf("Insira o consumo em m3: ");
    scanf("%f", &consumo);

    // Calcula o preço de custo com base no consumo
    if (consumo <= 1) {
        preco_custo = 20.0;  // Preço fixo para consumo ≤ 1m3
    } else {
        preco_custo = 20.0 + (consumo - 1) * 3.5;  // Preço para consumo > 1m3
    }

    // Calcula o imposto (21% sobre o preço de custo)
    imposto = preco_custo * 0.21;

    // Calcula o valor total (preço de custo + imposto)
    valor_total = preco_custo + imposto;

    // Exibe a fatura
    printf("\n--- Fatura ---\n");
    printf("Consumo: %.2f m3\n", consumo);
    printf("Preço de custo: € %.2f\n", preco_custo);
    printf("Imposto (21%%): € %.2f\n", imposto);
    printf("Valor total: € %.2f\n", valor_total);

    return 0;
}



 5.2.15 A resistência equivalente (Req) para 2 resistores em paralelo, R1 e R2, pode ser calculada com:

Escreva um programa que leia os valores de R1 e R2, calcule Req e o imprima na tela. Certifique-se de que o
programa também funcione corretamente para R1 e/ou R2 igual a 0!

#include <stdio.h>

int main() {
    float R1, R2, Req;

    
    printf("Insira o valor de R1 : ");
    scanf("%f", &R1);
    printf("Insira o valor de R2 : ");
    scanf("%f", &R2);

    if (R1 == 0 && R2 == 0) {
        Req = 0;  
    } else if (R1 == 0) {
        Req = R2;  
    } else if (R2 == 0) {
        Req = R1; 
    } else {
        
        Req = (R1 * R2) / (R1 + R2);
    }

    printf("A resistência equivalente (Req) é: %.2f ohms\n", Req);

    return 0;
}




 5.2.16 Escreva um programa que calcule o comprimento do terceiro lado de um triângulo retângulo com base nos
comprimentos dos outros 2 lados e o imprima na tela. Para isso, peça ao usuário para inserir o comprimento dos 3
lados na ordem: lado1 lado2 hipotenusa. Um zero deve ser inserido para o lado do qual você deseja calcular o
comprimento.

#include <stdio.h>
#include <math.h> // Para usar a função sqrt()

int main() {
    float lado1, lado2, hipotenusa;

    // Solicita os comprimentos dos lados e da hipotenusa ao usuário
    printf("Insira os comprimentos dos lados e da hipotenusa (use 0 para o lado desconhecido):\n");
    printf("Lado 1: ");
    scanf("%f", &lado1);
    printf("Lado 2: ");
    scanf("%f", &lado2);
    printf("Hipotenusa: ");
    scanf("%f", &hipotenusa);

    // Verifica qual lado foi inserido como 0 e calcula seu valor
    if (lado1 == 0) {
        // Calcula o lado1 quando lado2 e hipotenusa são conhecidos
        lado1 = sqrt(pow(hipotenusa, 2) - pow(lado2, 2));
        printf("O comprimento do lado 1 é: %.2f\n", lado1);
    } else if (lado2 == 0) {
        // Calcula o lado2 quando lado1 e hipotenusa são conhecidos
        lado2 = sqrt(pow(hipotenusa, 2) - pow(lado1, 2));
        printf("O comprimento do lado 2 é: %.2f\n", lado2);
    } else if (hipotenusa == 0) {
        // Calcula a hipotenusa quando lado1 e lado2 são conhecidos
        hipotenusa = sqrt(pow(lado1, 2) + pow(lado2, 2));
        printf("O comprimento da hipotenusa é: %.2f\n", hipotenusa);
    } else {
        printf("Nenhum lado desconhecido foi inserido.\n");
    }

    return 0;
}


 5.2.17 Escreva um programa que leia 3 números inteiros que devem ser interpretados como uma data e imprima o
dia da semana correspondente. O dia da semana pode ser calculado da seguinte forma:

onde

válido para Março até Dezembro

#include <stdio.h>

int calcularDiaDaSemana(int dia, int mes, int ano) {
    // Ajusta janeiro e fevereiro para serem os meses 13 e 14 do ano anterior
    if (mes == 1 || mes == 2) {
        mes += 12;
        ano -= 1;
    }

    // Fórmula de Zeller
    int K = ano % 100;    // Últimos dois dígitos do ano
    int J = ano / 100;    // Primeiros dois dígitos do ano (século)

    int f = dia + (13 * (mes + 1)) / 5 + K + (K / 4) + (J / 4) - 2 * J;

    // O resultado pode ser negativo, então ajustamos o valor para estar no intervalo de 0 a 6
    int diaSemana = f % 7;
    if (diaSemana < 0) {
        diaSemana += 7;
    }

    return diaSemana;
}

const char* obterNomeDiaDaSemana(int diaSemana) {
    // Dias da semana: 0 = Sábado, 1 = Domingo, 2 = Segunda, etc.
    const char* dias[] = {"Sábado", "Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira"};
    return dias[diaSemana];
}

int main() {
    int dia, mes, ano;

    // Lê a data do usuário
    printf("Insira uma data (dd mm aaaa): ");
    scanf("%d %d %d", &dia, &mes, &ano);

    // Calcula o dia da semana
    int diaSemana = calcularDiaDaSemana(dia, mes, ano);

    // Exibe o resultado
    printf("O dia %02d/%02d/%d cai em uma %s.\n", dia, mes, ano, obterNomeDiaDaSemana(diaSemana));

    return 0;
}




 5.2.18 Escreva um programa que peça ao usuário para inserir os coeficientes a, b e c de uma equação quadrática
com a forma geral \(ax^2 + bx + c = 0\) e imprima todas as raízes reais dessa equação. Certifique-se de que o
programa não trave para certos valores dos coeficientes!

#include <stdio.h>
#include <math.h>  // Para a função sqrt()

int main() {
    float a, b, c, delta, raiz1, raiz2;

    printf("Insira os coeficientes a, b e c da equacao (a, b, c): ");
    scanf("%f %f %f", &a, &b, &c);

    if (a == 0) {
        printf("Coeficiente 'a' deve ser diferente de zero para uma equacao quadratica.\n");
        return 1;
    }

    delta = b * b - 4 * a * c;

    if (delta > 0) {
        
        raiz1 = (-b + sqrt(delta)) / (2 * a);
        raiz2 = (-b - sqrt(delta)) / (2 * a);
        printf("As raizes reais da equacao sao: %.2f e %.2f\n", raiz1, raiz2);
    } else if (delta == 0) {
        
        raiz1 = -b / (2 * a);
        printf("A equacao tem uma raiz real dupla: %.2f\n", raiz1);
    } else {
        
        printf("A equacao nao tem raizes reais, pois o discriminante e negativo.\n");
    }

    return 0;
}
----------------------------------------------------------------------------------------------------------------------

LISTA 3
 5.3.1 Escreva um programa com apenas 1 variável que imprima os números -3, -1, 1, 3, 5, ..., 25, separados por
vírgulas na tela. Nada precisa ser lido do teclado.

#include <stdio.h>

int main() {
    int num;
    
    for (num = -3; num <= 25; num += 2) {
        if (num != 25) {
            printf("%d, ", num);
        } else {
            printf("%d\n", num);
        }
    }

    return 0;
}

 5.3.2 Escreva um programa com apenas 1 variável que imprima os números -3, -1, 1, 3, 5, ..., 25, separados por
vírgulas na tela. Nada precisa ser lido do teclado. A tela deve exibir:
int main() {
    int numero;
    
    printf("Digite um número para ver sua tabuada: ");
    scanf("%d", &numero);
    printf("Tabuada de %d:\n", numero);
    for (int i = 1; i <= 10; i++) {
        printf("%d x %d = %d\n", numero, i, numero * i);
    }

    return 0;
}




 5.3.3 Escreva um programa que peça ao usuário para inserir um número inteiro nnn e imprima a soma
1+2+3+4+...+n.
#include <stdio.h>

int main() {
    int n, soma = 0;

    
    printf("Digite um número inteiro: ");
    scanf("%d", &n);
    
    
    for (int i = 1; i <= n; i++) {
        soma += i;
    }

    
    printf("A soma de 1 até %d é: %d\n", n, soma);

    return 0;
}

 5.3.4 Escreva um programa que imprima um quadrado preenchido na tela, imprimindo 22 linhas de 40 retângulos
pretos (o código ASCII para um retângulo preto é 219).

#include <stdio.h>

int main() {
    int linhas = 22;
    int colunas = 40;
    char retangulo = 219; 
    
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            printf("%c", retangulo);
        }
        printf("\n"); 
    }

    return 0;
}

 5.3.5 Escreva um programa que primeira peça ao usuário para inserir um número inteiro. Em seguida, mais
números inteiros são solicitados até que a soma desses números seja igual ou exceda o primeiro número inserido.


#include <stdio.h>

int main() {
    int limite, numero, soma = 0;

   
    printf("Digite um número inteiro: ");
    scanf("%d", &limite);
    
    while (soma < limite) {
        printf("Digite um número inteiro para adicionar à soma: ");
        scanf("%d", &numero);
        soma += numero;
    }

    printf("A soma dos números inseridos é: %d\n", soma);

    return 0;
}

 5.3.6 Escreva um programa que peça ao usuário para inserir um número inteiro no intervalo [-2, 4.5[ (ou seja, -2 ≤
número < 4.5) e imprima-o na tela. Se um número incorreto for inserido, um novo número deve ser solicitado até que
um número válido seja inserido.

#include <stdio.h>

int main() {
    int numero;
    
    while (1) {
        // Solicita ao usuário que insira um número inteiro
        printf("Digite um número inteiro no intervalo [-2, 4.5[: ");
        scanf("%d", &numero);
        
        
        if (numero >= -2 && numero < 4) {
            printf("Número válido inserido: %d\n", numero);
            break; 
        } else {
            printf("Número inválido. Tente novamente.\n");
        }
    }

    return 0;
}



 5.3.7 Escreva um programa que peça ao usuário para inserir um número inteiro no intervalo [-30, 30]. Certifique-se
de que apenas números válidos possam ser inseridos! Esse número é então impresso como um gráfico de barras feito
de símbolos *. Números negativos são desenhados da metade para a esquerda, números positivos são desenhados
da metade para a direita. Pontos são usados para preencher os espaços vazios. O próprio número inserido é impresso
no final. Repita o programa até que 0 seja inserido.


#include <stdio.h>

#define MAX 30  

void imprimirGrafico(int numero) {
    int i;

    if (numero < 0) {
        for (i = 0; i < -numero; i++) {
            printf("*");
        }
        for (i = -numero; i < MAX; i++) {
            printf(".");
        }
    } else {
        for (i = 0; i < MAX - numero; i++) {
            printf(".");
        }
        for (i = MAX - numero; i < MAX; i++) {
            printf("*");
        }
    }

    printf(" %d\n", numero);
}

int main() {
    int numero;

    while (1) {
        
        printf("Digite um número inteiro no intervalo [-30, 30]: ");
        scanf("%d", &numero);

        if (numero >= -30 && numero <= 30) {
            if (numero == 0) {
                break; // Sai do loop se o número for 0
            }
            imprimirGrafico(numero);
        } else {
            printf("Número inválido. Tente novamente.\n");
        }
    }

    return 0;
}



 5.3.8 Escreva um programa que some 10 números inseridos pelo usuário e calcule a média desses 10 números.
Tente usar apenas 3 variáveis em seu programa. Calcule a soma enquanto lê os números.

#include <stdio.h>

int main() {
    int i;          
    int numero;     
    int soma = 0;   

    for (i = 0; i < 10; i++) {
        printf("Digite o %dº número: ", i + 1);
        scanf("%d", &numero);
        soma += numero;  
    }

    float media = (float)soma / 10;
    printf("Soma: %d\n", soma);
    printf("Média: %.2f\n", media);

    return 0;
}

 5.3.9 Escreva um programa que imprima a média de uma quantidade de números inteiros. O número exato de
inteiros não é conhecido antecipadamente. Se o número 999 for lido, o programa para de ler novos números. 999 não
pode ser levado em conta para o cálculo da média.

#include <stdio.h>

int main() {
    int numero;      // Variável para armazenar o número inserido pelo usuário
    int soma = 0;    // Variável para armazenar a soma dos números
    int count = 0;   // Contador para o número de entradas válidas

    printf("Digite números inteiros (999 para parar):\n");

    // Loop para ler números até que 999 seja inserido
    while (1) {
        scanf("%d", &numero);
        
        if (numero == 999) {
            break;  // Sai do loop se o número 999 for inserido
        }
        
        soma += numero;  // Adiciona o número à soma
        count++;         // Incrementa o contador de entradas válidas
    }

    // Calcula e imprime a média se pelo menos um número válido foi inserido
    if (count > 0) {
        float media = (float)soma / count;
        printf("Média: %.2f\n", media);
    } else {
        printf("Nenhum número válido foi inserido.\n");
    }

    return 0;
}


 5.3.10 Escreva um programa que leia um número natural n, calcule n! e imprima o resultado na tela.

#include <stdio.h>

int main() {
    int n;           
    unsigned long long factorial = 1;  

  
    printf("Digite um número natural: ");
    scanf("%d", &n);

    if (n < 0) {
        printf("O número deve ser um número natural (não negativo).\n");
        return 1;  
    }

    for (int i = 1; i <= n; i++) {
        factorial *= i;  
    }

    printf("O fatorial de %d é %llu.\n", n, factorial);

    return 0;
}




 5.3.12 Repita o exercício 5.3.11, mas com nnn sendo um número inteiro (valores positivos e negativos são
possíveis).

#include <stdio.h>

// Função para calcular o fatorial de um número não negativo
unsigned long long fatorial(int n) {
    unsigned long long resultado = 1;
    for (int i = 1; i <= n; i++) {
        resultado *= i;
    }
    return resultado;
}

int main() {
    int n;              // Variável para armazenar o número inserido pelo usuário
    unsigned long long resultado;  // Variável para armazenar o resultado do fatorial

    // Solicita ao usuário para inserir um número inteiro
    printf("Digite um número inteiro: ");
    scanf("%d", &n);

    // Verifica se o número é negativo
    if (n < 0) {
        printf("O fatorial não é definido para números negativos.\n");
    } else {
        // Calcula o fatorial de n
        resultado = fatorial(n);

        // Imprime o resultado
        printf("O fatorial de %d é %llu.\n", n, resultado);
    }

    return 0;
}


 5.3.13 Escreva um programa que imprima o valor mínimo e máximo de 10 números inseridos pelo usuário. Use
apenas 4 variáveis em seu programa.

#include <stdio.h>

int main() {
    int num;          // Variável para armazenar o número atual inserido
    int min;          // Variável para armazenar o valor mínimo
    int max;          // Variável para armazenar o valor máximo
    int i;            // Variável de controle para o loop

    // Solicita ao usuário para inserir 10 números
    printf("Digite 10 números inteiros:\n");
    
    // Inicializa min e max com um valor que seja maior e menor, respectivamente, que qualquer número possível
    // Inicialmente, usamos o valor do primeiro número inserido para definir min e max
    scanf("%d", &num);
    min = max = num;

    // Loop para ler os próximos 9 números e atualizar min e max
    for (i = 1; i < 10; i++) {
        scanf("%d", &num);
        if (num < min) {
            min = num;  // Atualiza o valor mínimo
        }
        if (num > max) {
            max = num;  // Atualiza o valor máximo
        }
    }
    
    // Imprime o valor mínimo e máximo
    printf("Valor mínimo: %d\n", min);
    printf("Valor máximo: %d\n", max);
    
    return 0;
}


 5.3.14 Repita o exercício 5.3.13, mas desta vez também imprima quando o número mínimo e máximo foram
inseridos


#include <stdio.h>

int main() {
    int num;          // Variável para armazenar o número atual inserido
    int min;          // Variável para armazenar o valor mínimo
    int max;          // Variável para armazenar o valor máximo
    int i;            // Variável de controle para o loop
    int minPosition;  // Variável para armazenar a posição do valor mínimo
    int maxPosition;  // Variável para armazenar a posição do valor máximo

    // Solicita ao usuário para inserir 10 números
    printf("Digite 10 números inteiros:\n");

    // Inicializa min e max com o valor do primeiro número inserido
    scanf("%d", &num);
    min = max = num;
    minPosition = maxPosition = 1; // O primeiro número inserido está na posição 1

    // Loop para ler os próximos 9 números e atualizar min e max
    for (i = 2; i <= 10; i++) { // Começa de 2 porque o primeiro número já foi lido
        scanf("%d", &num);
        if (num < min) {
            min = num;          // Atualiza o valor mínimo
            minPosition = i;    // Atualiza a posição do valor mínimo
        }
        if (num > max) {
            max = num;          // Atualiza o valor máximo
            maxPosition = i;    // Atualiza a posição do valor máximo
        }
    }
    
    // Imprime o valor mínimo, o valor máximo e suas posições
    printf("Valor mínimo: %d, Posicao: %d\n", min, minPosition);
    printf("Valor máximo: %d, Posicao: %d\n", max, maxPosition);
    
    return 0;
}


 5.3.15 Escreva um programa que calcule o maior divisor comum de 2 inteiros positivos. Use o algoritmo de
Euclides para determinar o mdc. Neste algoritmo, o maior número é substituído pela diferença entre os dois números.
Repita isso até que ambos os números sejam iguais. Esse número é o mdc. Imprima o mdc e todos os passos
intermediários.


#include <stdio.h>

// Função para calcular o MDC usando o algoritmo de Euclides com diferenças
int mdc(int a, int b) {
    printf("Passos intermediários:\n");
    
    // Imprime os números iniciais
    printf("Início: a = %d, b = %d\n", a, b);
    
    // Continua até que ambos os números sejam iguais
    while (a != b) {
        if (a > b) {
            a = a - b; // Subtrai o menor número do maior
        } else {
            b = b - a; // Subtrai o menor número do maior
        }
        // Imprime o estado atual após a subtração
        printf("a = %d, b = %d\n", a, b);
    }
    
    // Quando a == b, o MDC foi encontrado
    return a;
}

int main() {
    int num1, num2;
    
    // Solicita ao usuário que insira dois inteiros positivos
    printf("Digite o primeiro número inteiro positivo: ");
    scanf("%d", &num1);
    printf("Digite o segundo número inteiro positivo: ");
    scanf("%d", &num2);
    
    // Verifica se os números inseridos são positivos
    if (num1 <= 0 || num2 <= 0) {
        printf("Os números devem ser inteiros positivos.\n");
        return 1; // Encerra o programa com código de erro
    }
    
    // Calcula o MDC e imprime o resultado
    int resultado = mdc(num1, num2);
    printf("O maior divisor comum é: %d\n", resultado);
    
    return 0;
}



 5.3.16 Escreva um programa que desenhe uma torre invertida usando o caractere ASCII 219 ( ). A torre é
composta por uma sequência de quadrados. O quadrado superior tem um lado definido pelo usuário. O próximo
quadrado é 2 blocos menor, o próximo novamente é 2 blocos menor, ... Novas torres são desenhadas até que o
usuário insira 'n'

#include <stdio.h>

void desenharTorreInvertida(int tamanho) {
    // Enquanto o tamanho do quadrado for maior que zero
    while (tamanho > 0) {
        for (int i = 0; i < tamanho; i++) {
            for (int j = 0; j < tamanho; j++) {
                printf("%c", 219); // Caractere ASCII 219
            }
            printf("\n");
        }
        // Imprime uma linha em branco para separar os quadrados
        printf("\n");
        // Reduz o tamanho do quadrado
        tamanho -= 2;
    }
}

int main() {
    char continuar = 's'; // Variável para controlar o loop
    int tamanho;

    while (continuar == 's') {
        // Solicita ao usuário o tamanho do quadrado superior
        printf("Digite o tamanho do quadrado superior da torre: ");
        scanf("%d", &tamanho);

        // Garante que o tamanho seja um número positivo e ímpar
        if (tamanho <= 0 || tamanho % 2 == 0) {
            printf("O tamanho deve ser um número inteiro positivo e ímpar.\n");
            continue;
        }

        // Desenha a torre invertida
        desenharTorreInvertida(tamanho);

        // Pergunta ao usuário se deseja desenhar outra torre
        printf("Deseja desenhar outra torre? (s/n): ");
        scanf(" %c", &continuar); // O espaço antes de %c é para consumir o caractere de nova linha
    }

    return 0;
}


 5.3.17 Escreva um programa que desenhe uma linha em zigue-zague até que o usuário insira 'n' para parar. A
primeira parte da linha é composta por um número de blocos determinado pelo usuário. A próxima parte tem apenas
metade dessa largura, ... Se o usuário quiser desenhar várias linhas em zigue-zague, certifique-se de que todas
estejam bem posicionadas e desenhadas corretamente.


#include <stdio.h>

void desenharZigueZague(int largura) {
    // Desenha a parte inicial da linha
    for (int i = 0; i < largura; i++) {
        printf("*");
    }
    printf("\n");
    
    // Desenha o zigue-zague
    while (largura > 0) {
        // Imprime espaços para deslocar o zigue-zague para a direita
        for (int i = 0; i < (largura / 2); i++) {
            printf(" ");
        }
        
        // Desenha a linha do zigue-zague
        for (int i = 0; i < largura; i++) {
            printf("*");
        }
        printf("\n");
        
        // Reduz a largura pela metade
        largura /= 2;
    }
}

int main() {
    char continuar = 's'; // Variável para controlar o loop
    int largura;
    
    while (continuar == 's') {
        // Solicita ao usuário o número de blocos para a linha em zigue-zague
        printf("Digite o número de blocos para a primeira linha do zigue-zague: ");
        scanf("%d", &largura);
        
        // Garante que a largura seja maior que zero
        if (largura <= 0) {
            printf("A largura deve ser um número inteiro positivo.\n");
            continue;
        }
        
        // Desenha a linha em zigue-zague
        desenharZigueZague(largura);
        
        // Pergunta ao usuário se deseja desenhar mais linhas
        printf("Deseja desenhar outra linha em zigue-zague? (s/n): ");
        scanf(" %c", &continuar); // O espaço antes de %c é para consumir o caractere de nova linha
    }
    
    return 0;
}



 5.3.18 Escreva um programa que determine o máximo entre 10 números inseridos pelo usuário. O programa
também imprime o número de vezes que o valor máximo foi inserido.


#include <stdio.h>

int main() {
    int numeros[10];
    int maximo, count = 0;

    // Solicita ao usuário para inserir 10 números
    printf("Digite 10 números inteiros:\n");
    for (int i = 0; i < 10; i++) {
        printf("Número %d: ", i + 1);
        scanf("%d", &numeros[i]);
    }

    // Inicializa o máximo com o primeiro número
    maximo = numeros[0];
    count = 1; // Já contamos o primeiro número

    // Encontra o máximo e conta quantas vezes ele aparece
    for (int i = 1; i < 10; i++) {
        if (numeros[i] > maximo) {
            maximo = numeros[i];
            count = 1; // Reinicia o contador para o novo máximo
        } else if (numeros[i] == maximo) {
            count++; // Incrementa o contador se o número for igual ao máximo
        }
    }

    // Imprime o máximo e o número de vezes que ele aparece
    printf("O valor máximo é: %d\n", maximo);
    printf("O valor máximo foi inserido %d vez(es).\n", count);

    return 0;
}


 5.3.19 Escreva um programa que peça ao usuário para inserir um número inteiro positivo e imprima todas as linhas
de inteiros positivos consecutivos com uma soma igual ao primeiro número inserido

#include <stdio.h>

void encontrarSequencias(int soma) {
    for (int inicio = 1; inicio <= soma / 2; inicio++) {
        int total = 0;
        int i;
        for (i = inicio; total < soma; i++) {
            total += i;
            if (total == soma) {
                // Sequência encontrada
                printf("Sequência: ");
                for (int j = inicio; j < i; j++) {
                    printf("%d ", j);
                }
                printf("\n");
                break;
            }
        }
    }
}

int main() {
    int numero;

    // Solicita ao usuário um número inteiro positivo
    printf("Digite um número inteiro positivo: ");
    scanf("%d", &numero);

    // Verifica se o número é positivo
    if (numero <= 0) {
        printf("O número deve ser um inteiro positivo.\n");
        return 1;
    }

    // Encontra e imprime as sequências
    encontrarSequencias(numero);

    return 0;
}

-------------------------------------------------------------------------------

LISTA 4


6.1. Escreva um programa que leia um ângulo em graus e imprima o seno correspondente. Você pode usar funções padrão.

#include <stdio.h>
#include <math.h>

int main() {
    double angulo_graus, angulo_radianos, seno;

    // Ler o ângulo em graus
    printf("Digite o ângulo em graus: ");
    scanf("%lf", &angulo_graus);

    // Converter de graus para radianos
    angulo_radianos = angulo_graus * (M_PI / 180.0);

    // Calcular o seno
    seno = sin(angulo_radianos);

    // Imprimir o resultado
    printf("O seno de %.2f graus é: %.5f\n", angulo_graus, seno);

    return 0;
}


6.2. Escreva um programa que imprima uma tabela com 2 colunas. A primeira coluna contém todos os ângulos de 0 a 360 graus com
passos de 30 graus. A segunda coluna contém os valores de seno correspondentes.

#include <stdio.h>
#include <math.h>

#define PI 3.14159

int main() {
    double angulo, seno;

    printf("Ângulo\tSeno\n");
    printf("------\t-----\n");

    for (angulo = 0; angulo <= 360; angulo += 30) {
        // Convertendo o ângulo para radianos, pois a função sin() em C trabalha com radianos
        seno = sin(angulo * PI / 180);
        printf("%.2lf\t%.4lf\n", angulo, seno);
    }

    return 0;
}

6.3. Escreva um programa que calcule a raiz quadrada de um número inserido pelo usuário.


#include <stdio.h>
#include <math.h>

int main() {
    double numero, raiz;

    printf("Digite um número: ");
    scanf("%lf", &numero);

    // Verifica se o número é negativo
    if (numero < 0) {
        printf("Não é possível calcular a raiz quadrada de um número negativo.\n");
    } else {
        raiz = sqrt(numero);
        printf("A raiz quadrada de %.2lf é %.2lf\n", numero, raiz);
    }

    return 0;
}

6.4. Escreva um programa que leia os comprimentos dos lados a e b de um triângulo retângulo e imprima o comprimento da
hipotenusa c e um dos ângulos agudos. Exemplos:

Entrada: 2 1
Saída: 2.24 63°

Entrada: 1 1.732
Saída: 2.00 60°

#include <stdio.h>
#include <math.h>

int main() {
    double a, b, c, angulo;

    printf("Digite os comprimentos dos catetos a e b: ");
    scanf("%lf %lf", &a, &b);

    // Calculando a hipotenusa usando o Teorema de Pitágoras
    c = sqrt(a*a + b*b);

    // Calculando o ângulo em radianos usando arctan(b/a)
    angulo = atan(b/a);

    // Convertendo o ângulo de radianos para graus
    angulo = angulo * 180 / M_PI;

    printf("Hipotenusa: %.2lf\n", c);
    printf("Ângulo agudo: %.0lf graus\n", angulo);

    return 0;
}


6.5. Escreva um programa para um jogo de adivinhação. Primeiro, um número aleatório entre 1 e 100 é escolhido pelo programa.
Depois, o usuário pode começar a adivinhar. Se o palpite for muito alto ou muito baixo, o programa precisa imprimir “muito alto” ou
“muito baixo”. Isso é repetido até que o número seja encontrado. No final, o programa imprime quantas tentativas o usuário precisou
para encontrar o número secreto.



#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int numero_secreto, palpite, tentativas = 0;

    // Inicializa a semente para gerar números aleatórios
    srand(time(NULL));

    // Gera um número aleatório entre 1 e 100
    numero_secreto = rand() % 100 + 1;

    printf("Adivinhe o número entre 1 e 100!\n");

    do {
        printf("Digite seu palpite: ");
        scanf("%d", &palpite);
        tentativas++;

        if (palpite < numero_secreto) {
            printf("Muito baixo!\n");
        } else if (palpite > numero_secreto) {
            printf("Muito alto!\n");
        }
    } while (palpite != numero_secreto);

    printf("Parabéns! Você acertou em %d tentativas.\n", tentativas);

    return 0;
}





6.6. Escreva um programa que imprima uma tabela com 2 colunas. A primeira coluna contém valores de x de -5 a +5 com um passo de
0,5. A segunda coluna contém os valores correspondentes de y de acordo com a equação y = 2x2 + 2x − 3. Certifique-se de que o cálculo
dos valores de y seja feito em uma função separada.


#include <stdio.h>

// Função para calcular o valor de y
double calcular_y(double x) {
    return 2 * x * x + 2 * x - 3;
}

int main() {
    double x, y;

    printf("   x   |    y    \n");
    printf("-------|---------\n");

    for (x = -5; x <= 5; x += 0.5) {
        y = calcular_y(x);
        printf("%6.2lf | %8.2lf\n", x, y);
    }

    return 0;
}


6.7. Escreva uma função com o cabeçalho:

void printline(int number, char c)
Exemplo:
Entrada
printline(40, ‘*’);
Saida
****************************************


#include <stdio.h>

void printline(int number, char c) {
    int i;
    for (i = 0; i < number; i++) {
        printf("%c", c);
    }
    printf("\n"); // Adiciona uma nova linha ao final
}
int main() {
    printline(40, '*'); // Imprime 40 asteriscos
   
    return 0;
}





6.8 Escreva uma função que leia um número inteiro no intervalo [0, 10] e retorne esse número como valor de retorno da função. Se o
número não estiver no intervalo correto, a função deve pedir um novo número até que um valor correto seja inserido. O programa
principal é algo como:

int main(void)
{
int number;
number = readnumber();
printf("O número lido é %d\n", number);
return 0;
}
Certifique-se de escrever a declaração da função readnumber() antes da função principal e a definição da função após a função
principal.

#include <stdio.h>

// Declaração da função readnumber
int readnumber(void);

int main(void) {
    int number;
    
    // Chama a função readnumber para ler um número válido
    number = readnumber();
    
    // Imprime o número lido
    printf("O número lido é %d\n", number);
    
    return 0;
}

// Definição da função readnumber
int readnumber(void) {
    int number;
    
    while (1) {
        // Solicita ao usuário que insira um número
        printf("Digite um número entre 0 e 10: ");
        scanf("%d", &number);
        
        // Verifica se o número está no intervalo [0, 10]
        if (number >= 0 && number <= 10) {
            return number; // Retorna o número se estiver dentro do intervalo
        } else {
            printf("Número fora do intervalo. Tente novamente.\n");
        }
    }
}



6.9. Escreva uma função com o cabeçalho:
int readnumber(int lower_boundary, int upper_boundary)

que lê um número inteiro no intervalo [lower_boundary, upper_boundary] e retorna esse número como valor de retorno da função.
Também neste caso, a função só pode parar de pedir um número inteiro se um valor correto for inserido. Escreva uma função principal
que chame essa função e imprima o número resultante.



#include <stdio.h>

// Função para ler um número inteiro dentro do intervalo [lower_boundary, upper_boundary]
int readnumber(int lower_boundary, int upper_boundary) {
    int number;

    while (1) {
        // Solicita ao usuário que insira um número
        printf("Digite um número entre %d e %d: ", lower_boundary, upper_boundary);
        scanf("%d", &number);

        // Verifica se o número está dentro do intervalo
        if (number >= lower_boundary && number <= upper_boundary) {
            return number; // Retorna o número se estiver dentro do intervalo
        } else {
            printf("Número fora do intervalo. Tente novamente.\n");
        }
    }
}

int main() {
    int lower_boundary, upper_boundary;

    // Ler os limites do intervalo do usuário
    printf("Digite o limite inferior do intervalo: ");
    scanf("%d", &lower_boundary);
    printf("Digite o limite superior do intervalo: ");
    scanf("%d", &upper_boundary);

    // Garantir que o limite inferior não seja maior que o limite superior
    if (lower_boundary > upper_boundary) {
        printf("O limite inferior deve ser menor ou igual ao limite superior.\n");
        return 1; // Encerrar o programa com um código de erro
    }

    // Chamar a função readnumber e obter um número válido dentro do intervalo
    int valid_number = readnumber(lower_boundary, upper_boundary);

    // Imprimir o número resultante
    printf("Número válido dentro do intervalo: %d\n", valid_number);

    return 0;
}



6.10. Escreva uma função com o cabeçalho:

double exponentiation(double base, int exponent)

que retorna base^exponent como valor de retorno da função. Escreva uma função principal que leia uma base e um expoente, chame a
função exponentiation e imprima o resultado. Não use a função padrão pow!


#include <stdio.h>

// Função para calcular a exponenciação
double exponentiation(double base, int exponent) {
    double result = 1.0;

    // Se o expoente é zero, qualquer número elevado a zero é 1
    if (exponent == 0) {
        return 1.0;
    }

    // Se o expoente é negativo, calcular a exponenciação para o expoente positivo e inverter o resultado
    if (exponent < 0) {
        base = 1 / base;
        exponent = -exponent;
    }

    // Multiplica a base por si mesma expoente vezes
    for (int i = 0; i < exponent; i++) {
        result *= base;
    }

    return result;
}

int main() {
    double base;
    int exponent;

    // Ler a base e o expoente do usuário
    printf("Digite a base: ");
    scanf("%lf", &base);
    printf("Digite o expoente: ");
    scanf("%d", &exponent);

    // Calcular a exponenciação
    double resultado = exponentiation(base, exponent);

    // Imprimir o resultado
    printf("%.2lf elevado a %d é %.2lf\n", base, exponent, resultado);

    return 0;
}



6.11. Escreva uma função com o cabeçalho:

int gcd(int number1, int number2)

que retorna o maior divisor comum dos números number1 e number2 como valor de retorno da função. Escreva um programa principal
que leia 3 números inteiros, calcule o MDC (máximo divisor comum) desses 3 números e imprima o resultado. Dica: gcd(a, b, c) = gcd(a,
gcd(b, c))



#include <stdio.h>

// Função para calcular o Máximo Divisor Comum (MDC) de dois números usando o Algoritmo de Euclides
int gcd(int number1, int number2) {
    int temp;

    while (number2 != 0) {
        temp = number2;
        number2 = number1 % number2;
        number1 = temp;
    }

    return number1;
}

int main() {
    int num1, num2, num3;

    // Ler três números inteiros do usuário
    printf("Digite o primeiro número: ");
    scanf("%d", &num1);
    printf("Digite o segundo número: ");
    scanf("%d", &num2);
    printf("Digite o terceiro número: ");
    scanf("%d", &num3);

    // Calcular o MDC dos três números
    int mdc12 = gcd(num1, num2); // MDC dos dois primeiros números
    int mdc123 = gcd(mdc12, num3); // MDC do resultado anterior com o terceiro número

    // Imprimir o resultado
    printf("O Máximo Divisor Comum dos números %d, %d e %d é %d.\n", num1, num2, num3, mdc123);

    return 0;
}



6.12. Escreva um programa que leia uma quantidade de pontuações. As pontuações são todos números inteiros positivos. Um número
negativo é inserido para indicar que todas as pontuações foram inseridas. Para cada pontuação, uma barra com um comprimento igual
à pontuação é desenhada. Para isso, um símbolo pré-definido precisa ser impresso tantas vezes quanto a pontuação. (uso de laço for).

Escreva uma função draw_bar que recebe uma pontuação como entrada e desenha uma barra com o comprimento correspondente.

As pontuações e o símbolo desejado são lidos na função principal.

O diálogo na tela deve ser como:

Digite as pontuações: 2 12 18 3 -5
Que símbolo você gostaria de usar? =

pontuação = 2 ==
pontuação = 12 ============
pontuação = 18 ==================
pontuação = 3 ===


#include <stdio.h>

// Função para desenhar uma barra com o comprimento correspondente à pontuação
void draw_bar(int score, char symbol) {
    for (int i = 0; i < score; i++) {
        printf("%c", symbol);
    }
    printf("\n");
}

int main() {
    int score;
    char symbol;
    
    // Solicita ao usuário as pontuações e lê o símbolo desejado
    printf("Digite as pontuações (digite um número negativo para terminar): ");
    while (scanf("%d", &score) && score >= 0) {
        // Aqui estamos processando cada pontuação enquanto não é negativa
        // O código assume que os números são inseridos um por um e segue até o negativo ser encontrado

        // Solicita o símbolo desejado
        printf("Que símbolo você gostaria de usar? ");
        scanf(" %c", &symbol); // O espaço antes de %c é para consumir o caractere de nova linha deixado no buffer

        // Desenha a barra para a pontuação atual
        printf("pontuação = %d ", score);
        draw_bar(score, symbol);
    }

    return 0;
}


6.13. Escreva um programa com as funções:

•hello: que dá as boas-vindas ao usuário e explica o que é esperado

•main: que pede ao usuário para inserir 5 vezes 2 números

•sum: que pede ao usuário para inserir a soma dos números anteriormente inseridos e dá um feedback ao usuário

•goodbye: que agradece ao usuário pela cooperação Bem-vindo, este programa pedirá que você resolva 5 somas. digite 2 números <
100: 15 16 qual é a soma de 15 e 16? 31 segundo você, a soma de 15 e 16 é 31. Isso está correto digite 2 números < 100: 26 32 qual é a
soma de 26 e 32? 50 segundo você, a soma de 26 e 32 é 50. Isso está incorreto ... Obrigado pela sua cooperação

#include <stdio.h>

// Função para dar as boas-vindas ao usuário e explicar o que é esperado
void hello() {
    printf("Bem-vindo, este programa pedirá que você resolva 5 somas.\n");
    printf("Digite dois números menores que 100. Em seguida, você será solicitado a fornecer a soma desses números.\n");
}

// Função para pedir ao usuário para inserir a soma dos números e dar feedback
void sum(int num1, int num2) {
    int resposta;
    int soma = num1 + num2;
    
    printf("Qual é a soma de %d e %d? ", num1, num2);
    scanf("%d", &resposta);

    if (resposta == soma) {
        printf("Segundo você, a soma de %d e %d é %d. Isso está correto.\n", num1, num2, resposta);
    } else {
        printf("Segundo você, a soma de %d e %d é %d. Isso está incorreto. A resposta correta é %d.\n", num1, num2, resposta, soma);
    }
}

// Função para agradecer ao usuário pela cooperação
void goodbye() {
    printf("Obrigado pela sua cooperação.\n");
}

int main() {
    int num1, num2;
    
    // Chama a função hello para dar boas-vindas
    hello();

    // Loop para pedir 5 vezes que o usuário insira dois números e verifique a soma
    for (int i = 0; i < 5; i++) {
        printf("Digite 2 números < 100: ");
        scanf("%d %d", &num1, &num2);

        // Verifica se os números estão dentro do intervalo esperado
        if (num1 >= 100 || num2 >= 100) {
            printf("Números fora do intervalo permitido. Tente novamente.\n");
            i--; // Decrementa o contador para repetir a iteração
            continue;
        }

        // Chama a função sum para verificar a soma
        sum(num1, num2);
    }

    // Chama a função goodbye para agradecer ao usuário
    goodbye();

    return 0;
}



6.14. Como um ano não tem exatamente 365 dias, temos um ano bissexto a cada 4 anos, exceto se o ano for divisível por 100. Se o ano for divisível por 400, o ano é
considerado bissexto mesmo assim. Escreva uma função com o cabeçalho:
int isLeapYear(int year)
que determina se um ano é bissexto ou não e dá um valor de retorno diferente para ambos os casos. Escreva também uma função com o cabeçalho:
int numberOfDays(int month, int year)

#include <stdio.h>

// Função para verificar se um ano é bissexto
int isLeapYear(int year) {
    if (year % 400 == 0) {
        return 1; // Ano bissexto
    } else if (year % 100 == 0) {
        return 0; // Não é bissexto
    } else if (year % 4 == 0) {
        return 1; // Ano bissexto
    } else {
        return 0; // Não é bissexto
    }
}

// Função para obter o número de dias em um mês
int numberOfDays(int month, int year) {
    switch (month) {
        case 1:  // Janeiro
        case 3:  // Março
        case 5:  // Maio
        case 7:  // Julho
        case 8:  // Agosto
        case 10: // Outubro
        case 12: // Dezembro
            return 31;
        case 4:  // Abril
        case 6:  // Junho
        case 9:  // Setembro
        case 11: // Novembro
            return 30;
        case 2:  // Fevereiro
            if (isLeapYear(year)) {
                return 29; // Fevereiro em ano bissexto
            } else {
                return 28; // Fevereiro em ano não bissexto
            }
        default:
            return 0; // Mês inválido
    }
}

int main() {
    int ano, mes;

    // Ler o ano e o mês
    printf("Digite o ano: ");
    scanf("%d", &ano);
    printf("Digite o mês: ");
    scanf("%d", &mes);

    // Verificar se o ano é bissexto
    if (isLeapYear(ano)) {
        printf("%d é um ano bissexto.\n", ano);
    } else {
        printf("%d não é um ano bissexto.\n", ano);
    }

    // Obter o número de dias no mês
    int dias = numberOfDays(mes, ano);
    if (dias == 0) {
        printf("Mês inválido.\n");
    } else {
        printf"O mês %d de %d tem %d dias.\n", mes, ano, dias);
    }

    return 0;
}



6.15. Escreva uma função com 3 números inteiros que representam um dia, mês e ano. Essa função calcula e retorna um fator de acordo com a seguinte fórmula:
Para os meses de Janeiro e Fevereiro:
fator = 365 * year + day + 31 * (month - 1) + [year - 1 / 4] - [[year - 1 / 100 + 1] * 3 / 4]
Para os meses de Março a Dezembro:
fator = 365 * year + day + 31 * (month - 1) - [0.4 * month + 2.3] + [year / 4] - [[year / 100 + 1] * 3 / 4]

#include <stdio.h>
#include <math.h> // Para a função floor

// Função para calcular o fator
int calcular_fator(int dia, int mes, int ano) {
    int fator;

    if (mes == 1 || mes == 2) {
        // Fórmula para Janeiro e Fevereiro
        fator = 365 * ano + dia + 31 * (mes - 1) + floor((ano - 1) / 4.0) - floor((ano - 1) / 100.0 + 1) * 3 / 4;
    } else {
        // Fórmula para Março a Dezembro
        fator = 365 * ano + dia + 31 * (mes - 1) - floor(0.4 * mes + 2.3) + floor(ano / 4.0) - floor(ano / 100.0 + 1) * 3 / 4;
    }

    return fator;
}

int main() {
    int dia, mes, ano;

    // Ler o dia, mês e ano
    printf("Digite o dia: ");
    scanf("%d", &dia);
    printf("Digite o mês: ");
    scanf("%d", &mes);
    printf("Digite o ano: ");
    scanf("%d", &ano);

    // Calcular o fator
    int fator = calcular_fator(dia, mes, ano);

    // Imprimir o resultado
    printf("O fator calculado é: %d\n", fator);

    return 0;
}


Escreva uma função principal que leia 2 datas, calcule o número de dias entre essas 2 datas calculando a diferença entre os 2 fatores das datas correspondentes.

#include <stdio.h>
#include <math.h> // Para a função floor

// Função para calcular o fator
int calcular_fator(int dia, int mes, int ano) {
    int fator;

    if (mes == 1 || mes == 2) {
        // Fórmula para Janeiro e Fevereiro
        fator = 365 * ano + dia + 31 * (mes - 1) + floor((ano - 1) / 4.0) - floor((ano - 1) / 100.0 + 1) * 3 / 4;
    } else {
        // Fórmula para Março a Dezembro
        fator = 365 * ano + dia + 31 * (mes - 1) - floor(0.4 * mes + 2.3) + floor(ano / 4.0) - floor(ano / 100.0 + 1) * 3 / 4;
    }

    return fator;
}

int main() {
    int dia1, mes1, ano1;
    int dia2, mes2, ano2;

    // Ler a primeira data
    printf("Digite o dia da primeira data: ");
    scanf("%d", &dia1);
    printf("Digite o mês da primeira data: ");
    scanf("%d", &mes1);
    printf("Digite o ano da primeira data: ");
    scanf("%d", &ano1);

    // Ler a segunda data
    printf("Digite o dia da segunda data: ");
    scanf("%d", &dia2);
    printf("Digite o mês da segunda data: ");
    scanf("%d", &mes2);
    printf("Digite o ano da segunda data: ");
    scanf("%d", &ano2);

    // Calcular os fatores para cada data
    int fator1 = calcular_fator(dia1, mes1, ano1);
    int fator2 = calcular_fator(dia2, mes2, ano2);

    // Calcular a diferença em dias
    int dias_entre = abs(fator1 - fator2);

    // Imprimir o resultado
    printf("Número de dias entre as duas datas: %d\n", dias_entre);

    return 0;
}




6.16. Considere o primeiro quadrante de um círculo em um quadrado com lado 1. Se você gerar uma grande quantidade de coordenadas (x, y) com x e y pertencendo ao
intervalo [0, 1], você terá uma coleção de pontos pertencentes ao quadrado. Se você contar todos os pontos que pertencem ao quadrante do círculo com equação x2 + y2 <
1 e dividir essa quantidade pelo número total de pontos gerados, você encontrará aproximadamente o número π/4.
• Escreva um programa que gera 100.000 pontos e usa isso para calcular o número π aproximadamente.
• Execute o programa várias vezes e compare os resultados.
• E se você aumentar o número de pontos?


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define NUM_PONTOS 100000

int main() {
    int pontos_dentro_circulo = 0;
    double x, y;

    // Inicializa o gerador de números aleatórios
    srand(time(NULL));

    // Gera os pontos e conta quantos estão dentro do círculo
    for (int i = 0; i < NUM_PONTOS; i++) {
        x = (double)rand() / RAND_MAX; // Gera um número aleatório entre 0 e 1
        y = (double)rand() / RAND_MAX; // Gera um número aleatório entre 0 e 1

        if (x * x + y * y < 1) {
            pontos_dentro_circulo++;
        }
    }

    // Estima o valor de pi
    double pi_estimado = 4.0 * pontos_dentro_circulo / NUM_PONTOS;

    // Imprime o resultado
    printf("Número estimado de pi: %f\n", pi_estimado);

    return 0;
}



6.17. Escreva um programa que peça ao usuário para escolher entre 3 opções:
1.Desenhar um quadrado vazio
2.Desenhar um quadrado preenchido
3.Parar O programa se repete até que o usuário escolha a opção 3 (Parar). Use as funções empty_square e filled_square.

#include <stdio.h>

// Função para desenhar um quadrado vazio
void empty_square(int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            // Se for a primeira ou última linha ou primeira ou última coluna
            if (i == 0 || i == tamanho - 1 || j == 0 || j == tamanho - 1) {
                printf("*");
            } else {
                printf(" ");
            }
        }
        printf("\n");
    }
}

// Função para desenhar um quadrado preenchido
void filled_square(int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            printf("*");
        }
        printf("\n");
    }
}

int main() {
    int opcao;
    int tamanho;

    do {
        // Menu de opções
        printf("\nEscolha uma opção:\n");
        printf("1. Desenhar um quadrado vazio\n");
        printf("2. Desenhar um quadrado preenchido\n");
        printf("3. Parar\n");
        printf("Opção: ");
        scanf("%d", &opcao);

        // Verifica a opção escolhida
        switch (opcao) {
            case 1:
                // Desenhar quadrado vazio
                printf("Digite o tamanho do quadrado: ");
                scanf("%d", &tamanho);
                empty_square(tamanho);
                break;
            case 2:
                // Desenhar quadrado preenchido
                printf("Digite o tamanho do quadrado: ");
                scanf("%d", &tamanho);
                filled_square(tamanho);
                break;
            case 3:
                // Parar o programa
                printf("Encerrando o programa...\n");
                break;
            default:
                // Opção inválida
                printf("Opção inválida! Tente novamente.\n");
                break;
        }

    } while (opcao != 3);

    return 0;
}




----------------------------------------------------------------------------------------------
LISTA 