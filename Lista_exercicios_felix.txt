4.1. Escreva um programa que peça ao usuário para inserir um número inteiro, armazene esse número em uma
variável do tipo short (ou short int) e o imprima de volta na tela. 
Quais valores podem ser inseridos?

Podem se inseridos numeros de -32.767 a 32.767 pois o tipo short amazenas dados de ate 16 bits.

Qual é o maior número que você pode inserir e imprimir corretamente?

 32.767 alem desse valor ocasionarar erro de leitura.

#include <stdio.h>
int main() {
    short n;
    
    printf("Insira um número inteiro: ");
    scanf("%hd", &n);
    
    printf("Você inseriu: %hd\n", n);
    
    return 0;
}

4.2. Repita o exercício anterior, mas desta vez use uma variável do tipo int ou long.
#include <stdio.h>
int main() {
    int n;
    
    printf("Insira um número inteiro: ");
    scanf("%d", &n);
    
    printf("Você inseriu: %d\n", n);
    
    return 0;
}
4.3. Escreva um programa que:
• peça ao usuário para inserir 2 números inteiros em uma linha
• obtenha esses 2 números usando apenas uma chamada da função scanf
• imprima ambos os números na linha seguinte
O diálogo na tela deve ser:
Copy code
Digite 2 números inteiros: 17 7
Os números inseridos são 17 e 7

#include <stdio.h>

int main() {
    int n, n1;
    
    printf("Insira dois número inteiro: ");
    scanf("%d %d",&n, &n1 );
  
    printf("Você inseriu: %d e %d", n,n1);
    
    return 0;
}




4.4. Escreva um programa que peça ao usuário para inserir 2 números reais e imprima a soma e o produto deles na
tela.
#include<stdio.h>

int main()

{
float n1, n2, soma, mult;
printf("digite o primeiro numero :");
scanf("%f %f", &n1, &n2);

soma=n1+n2;
mult=n1*n2;      
printf("a soma entre %.2f e %.2f e: %.2f\n", n1, n2, soma);
printf("a multiplicação entre %.2f e %.2f e: %.2f", n1, n2, mult);

return 0;
}

4.5. Escreva um programa que peça ao usuário para inserir 2 números inteiros e imprima o resultado e o resto da
divisão inteira dos dois números e o quociente real.
O diálogo na tela deve ser:
Digite 2 números inteiros: 17 7
quociente inteiro = 2
resto = 3
quociente = 2.43 
#include <stdio.h>

int main() {
    int n1, n2;
    int DivInt, resto;
    float QR;
    printf("Insira o 2 Números inteiros: ");
    scanf("%d %d", &n1, &n2);
        DivInt = n1 / n2;
        resto = n1 % n2;
        QR = (float) n1 / n2;
        printf("Resultado da divisão: %d\n", DivInt);
        printf("Resto da divisão: %d\n", resto);
        printf("Quociente real: %.2f\n", QR);
    return 0;
}


4.6. Escreva um programa que peça ao usuário para inserir 2 números reais, calcule o quociente e armazene-o em
uma variável do tipo float. Imprima o quociente com 20 casas decimais.
#include <stdio.h>

int main() {
    float n1, n2;
    double QR;
    
    printf("Insira 2 numeros: ");
    scanf("%f %f", &n1, &n2);
        
        QR = (double) n1 / n2;
        printf("Calculo com 20 casas decimais: %.20f\n", QR);
    return 0;
}




4.7. Escreva um programa que peça ao usuário para inserir horas, minutos e segundos separadamente e os imprima
em uma frase como:

O horário inserido é: hh horas mm minutos e ss segundos onde hh e mm podem ser apenas números inteiros. ss
pode ter dígitos após o ponto decimal.
#include <stdio.h>

int main() {
    int hh, mm;
    float ss;
    printf("Insira as horas (inteiro): ");
    scanf("%d", &hh);
    printf("Insira os minutos (inteiro): ");
    scanf("%d", &mm);
    printf("Insira os segundos (com ou sem dígitos após o ponto decimal): ");
    scanf("%f", &ss);
    printf("O horário inserido é: %d horas, %d minutos e %.2f segundos\n",
    hh, mm, ss);
    
    return 0;
}

4.8. Escreva um programa que peça ao usuário para inserir o nome e o sobrenome separadamente e imprima-os em
uma linha. Teste seu programa com nomes que contêm espaços em branco (ex: Julia Rose Smith).
#include <stdio.h>
int main ( )
{   
     char nome, sobrenome;

     printf ("Digite seu nome\n");   
     scanf ("%s", &nome);   

     printf ("Digite seu sobrenome\n");   
     scanf ("%s", &sobrenome);

     printf ("Seu nome completo e %s %s", nome, sobrenome);

return 0;
}

4.9. Escreva um programa que peça ao usuário para inserir o raio de um círculo, calcule a área dessa circunferência
e imprima o resultado na tela. (π pode ser aproximado como 3.141592653589793. Defina π como uma constante
em seu programa).
#include <stdio.h>
#include <math.h>
int main ( )
{   
   double raio;
   const double pi = 3.14159265358979;
     printf( "Digite o raio da circuferencia:");
     scanf("%lf", &raio);
     double area = pi*(raio*raio);
     printf("A area do circulo é:%lf",area);
return 0;
}


4.10. Escreva um programa que peça ao usuário para inserir um número de segundos e imprima o número
correspondente de dias, horas (<24), minutos (<60) e segundos (<60).
Ex: 90061 seg = 1 dia 1 hora 1 minuto e 1 segundo

#include <stdio.h>
int main() {
    // Declaração de variáveis
    int  h, m, ss, s, d,rest, rest2;
    
    
    printf("Digite uma quantidade de segundos: ");
    scanf("%d", &s);
   
    d =  s / 86400;
    rest = (s%86400);
    h = rest/3600;
    rest2= (rest%3600);
    m = rest2/60;
    ss = s % 60;
    printf("Ja se passaram %d dias %.2d horas %.2d minutos e %.2d segundos. ",d,h,m,ss);
     return 0;
}


4.11. Escreva um programa que peça ao usuário para inserir 5 números inteiros um por um. Enquanto lê os
números, o programa calcula a soma. No final, a média dos 5 números deve ser impressa com uma precisão de 2
casas decimais. Tente limitar o número de variáveis no seu programa para 2 (ou no máximo 3), mas não introduza
loops ainda.

#include <stdio.h>

int main() {
    int num, soma = 0;
    float media;
    
  
    printf("Insira o primeiro número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o segundo número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o terceiro número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o quarto número: ");
    scanf("%d", &num);
    soma += num;
    
    printf("Insira o quinto número: ");
    scanf("%d", &num);
    soma += num;
    
    media = (float) soma / 5;
    
    printf("A média dos 5 números é: %.2f\n", media);
    
    return 0;
}



4.12. Escreva um programa que peça ao usuário para inserir um valor em euros (ex: 13578) e imprima o número
correspondente de notas (500, 200, 100, 50, 20, 10, 5) e moedas (2, 1). Sempre use o número mínimo possível de
notas e moedas.
#include <stdio.h>

int main() {
    int valor, notas500, notas200, notas100, notas50, notas20, notas10, notas5;
    int moedas2, moedas1;
    
    printf("Insira um valor em euros: ");
    scanf("%d", &valor);
    
    notas500 = valor / 500;
    valor = valor % 500;

    notas200 = valor / 200;
    valor = valor % 200;
   
    notas100 = valor / 100;
    valor = valor % 100;
  
    notas50 = valor / 50;
    valor = valor % 50;
  
    notas20 = valor / 20;
    valor = valor % 20;
    
    notas10 = valor / 10;
    valor = valor % 10;
  
    notas5 = valor / 5;
    valor = valor % 5;
   
    moedas2 = valor / 2;
    valor = valor % 2;
   
    moedas1 = valor;
    
    printf("Número mínimo de notas e moedas:\n");
    printf("Notas de 500: %d\n", notas500);
    printf("Notas de 200: %d\n", notas200);
    printf("Notas de 100: %d\n", notas100);
    printf("Notas de 50: %d\n", notas50);
    printf("Notas de 20: %d\n", notas20);
    printf("Notas de 10: %d\n", notas10);
    printf("Notas de 5: %d\n", notas5);
    printf("Moedas de 2 euros: %d\n", moedas2);
    printf("Moedas de 1 euro: %d\n", moedas1);
    
    return 0;
}
4.13. Reescreva o programa anterior de forma que centavos (50, 20, 10, 5, 2, 1) também sejam incluídos (ex:
13578,78). Tenha em mente que o operador % só pode ser usado com operandos inteiros!
#include <stdio.h>

int main() {
    int euros, centavos;
    int notas500, notas200, notas100, notas50, notas20, notas10, notas5;
    int moedas2, moedas1;
    int moedas50, moedas20, moedas10, moedas5, moedas2cent, moedas1cent;
    float valor;
    
    // Solicita ao usuário o valor em euros e centavos
    printf("Digite o valor em euros (exemplo: 135.78): ");
    scanf("%f", &valor);
    
    // Separa a parte inteira (euros) e os centavos
    euros = (int)valor;           // Parte inteira
    centavos = (valor - euros) * 100;  // Parte decimal convertida em centavos
    
    // Calcula o número de notas
    notas500 = euros / 500;
    euros %= 500;
    
    notas200 = euros / 200;
    euros %= 200;
    
    notas100 = euros / 100;
    euros %= 100;
    
    notas50 = euros / 50;
    euros %= 50;
    
    notas20 = euros / 20;
    euros %= 20;
    
    notas10 = euros / 10;
    euros %= 10;
    
    notas5 = euros / 5;
    euros %= 5;
    
    // Calcula o número de moedas
    moedas2 = euros / 2;
    euros %= 2;
    
    moedas1 = euros;
    
    // Calcula o número de moedas em centavos
    moedas50 = centavos / 50;
    centavos %= 50;
    
    moedas20 = centavos / 20;
    centavos %= 20;
    
    moedas10 = centavos / 10;
    centavos %= 10;
    
    moedas5 = centavos / 5;
    centavos %= 5;
    
    moedas2cent = centavos / 2;
    centavos %= 2;
    
    moedas1cent = centavos;
    
    // Exibe o número de notas e moedas
    printf("Notas de 500 euros: %d\n", notas500);
    printf("Notas de 200 euros: %d\n", notas200);
    printf("Notas de 100 euros: %d\n", notas100);
    printf("Notas de 50 euros: %d\n", notas50);
    printf("Notas de 20 euros: %d\n", notas20);
    printf("Notas de 10 euros: %d\n", notas10);
    printf("Notas de 5 euros: %d\n", notas5);
    
    printf("Moedas de 2 euros: %d\n", moedas2);
    printf("Moedas de 1 euro: %d\n", moedas1);
    
    printf("Moedas de 50 centavos: %d\n", moedas50);
    printf("Moedas de 20 centavos: %d\n", moedas20);
    printf("Moedas de 10 centavos: %d\n", moedas10);
    printf("Moedas de 5 centavos: %d\n", moedas5);
    printf("Moedas de 2 centavos: %d\n", moedas2cent);
    printf("Moedas de 1 centavo: %d\n", moedas1cent);
    
    return 0;
}



4.14. Considere um circuito elétrico composto por dois resistores em série, R1 e R2. Se uma tensão U é aplicada a
este circuito, a corrente que flui pelo circuito será I=UR1+R2I = \frac{U}{R1 + R2}I=R1+R2U de acordo com a lei de
Ohm. A tensão V2V2V2 sobre o resistor R2 será então definida por V2=I×R2V2 = I \times R2V2=I×R2. Escreva um
programa que peça ao usuário para inserir os valores de U, R1 e R2 e imprima os valores de I e V2 na tela.
#include <stdio.h>

int main() {
    float U, R1, R2, I, V2;
    
    // Solicita ao usuário os valores de U, R1 e R2
    printf("Digite o valor da tensão (U) em volts: ");
    scanf("%f", &U);
    
    printf("Digite o valor do resistor R1 em ohms: ");
    scanf("%f", &R1);
    
    printf("Digite o valor do resistor R2 em ohms: ");
    scanf("%f", &R2);
    
    // Calcula a corrente I usando a fórmula I = U / (R1 + R2)
    I = U / (R1 + R2);
    
    // Calcula a tensão V2 sobre o resistor R2 usando a fórmula V2 = I * R2
    V2 = I * R2;
    
    // Exibe os resultados
    printf("A corrente I que flui pelo circuito é: %.2f A\n", I);
    printf("A tensão sobre o resistor R2 é: %.2f V\n", V2);
    
    return 0;
}


4.15. Escreva um programa que leia 6 números inteiros e os imprima em um formato de tabela com 3 linhas e 2
colunas.

O diálogo na tela deve ser:
Digite 6 números inteiros: 1 22 33 4 5 6
1 22

33 4

5 6


#include <stdio.h>

int main() {
    int numeros[6]; // Vetor para armazenar os 6 números inteiros
    
    // Solicita ao usuário para inserir os 6 números inteiros
    printf("Digite 6 números inteiros: ");
    for (int i = 0; i < 6; i++) {
        scanf("%d", &numeros[i]);
    }
    
    // Imprime os números em formato de tabela (3 linhas, 2 colunas)
    printf("\n");
    printf("%d %d\n", numeros[0], numeros[1]);
    printf("%d %d\n", numeros[2], numeros[3]);
    printf("%d %d\n", numeros[4], numeros[5]);

    return 0;
}

4.16. Reescreva o exercício anterior de forma que linhas sejam colocadas ao redor da tabela e entre os números:
Digite 6 números inteiros:
1 22 33 4 5 6

-------------

| 1 | 22 |
|-----------|
| 33 | 4 |
|-----------|
| 5 | 6 |

-------------

#include <stdio.h>

int main() {
    int numeros[6]; 
  
    printf("Digite 6 números inteiros: ");
    for (int i = 0; i < 6; i++) {
        scanf("%d", &numeros[i]);
    }
    
    printf("\n");
    printf("-------------\n");
    printf("|%d| |%d|\n", numeros[0], numeros[1]);
    printf("------------\n");
    printf("|%d| |%d|\n", numeros[2], numeros[3]);
    printf("-------------\n");
    printf("|%d| |%d|\n", numeros[4], numeros[5]);
    printf("-------------");

    return 0;
}


4.17. Reescreva o exercício anterior com números reais. Certifique-se de que os pontos decimais estejam bem
alinhados.

#include <stdio.h>

int main() {
    float numeros[6];
    printf("Digite 6 números inteiros: ");
    for (int i = 0; i < 6; i++) {
        scanf("%f", &numeros[i]);
    }
    
    printf("\n");
    printf("-------------\n");
    printf("|%.2f| |%.2f|\n", numeros[0], numeros[1]);
    printf("------------\n");
    printf("|%.2f| |%.2f|\n", numeros[2], numeros[3]);
    printf("-------------\n");
    printf("|%.2f| |%.2f|\n", numeros[4], numeros[5]);
    printf("-------------");

    return 0;
}

4.18. Escreva um programa que peça ao usuário para inserir nome, sobrenome, rua, número, código postal e nome
da cidade. Depois, o programa deve exibir esses dados no formato:
sobrenome nome

rua número

código postal cidade

#include <stdio.h>

int main() {
    char nome[50], sobrenome[50], rua[100], cidade[50];
    int numero;
    char codigoPostal[10];

 
    printf("Digite o nome: ");
    scanf("%s", nome);

    printf("Digite o sobrenome: ");
    scanf("%s", sobrenome);

    printf("Digite o nome da rua: ");
    scanf(" %[^\n]s", rua); 

    printf("Digite o número da casa: ");
    scanf("%d", &numero);

    printf("Digite o código postal: ");
    scanf("%s", codigoPostal);

    printf("Digite o nome da cidade: ");
    scanf("%s", cidade);

    printf("\n%s %s\n", sobrenome, nome);
    printf("%s %d\n", rua, numero);
    printf("%s %s\n", codigoPostal, cidade);

    return 0;
}

4.19. Escreva um programa que peça ao usuário para inserir o número da fatura, o número de produtos pedidos e o
preço por unidade. Calcule o valor total a ser pago e imprima-o na tela.




O diálogo na tela deve ser:
Digite o número da fatura: 12
Digite o número de produtos pedidos: 50
Digite o preço por unidade: 599
NÚMERO DA FATURA PREÇO/UNIDADE TOTAL
12 50 599 29950

#include <stdio.h>

int main() {
    int numeroFatura, quantidadeProdutos;
    float precoUnidade, total;
    
    // Solicita o número da fatura
    printf("Digite o número da fatura: ");
    scanf("%d", &numeroFatura);
    
    // Solicita o número de produtos pedidos
    printf("Digite o número de produtos pedidos: ");
    scanf("%d", &quantidadeProdutos);
    
    // Solicita o preço por unidade
    printf("Digite o preço por unidade: ");
    scanf("%f", &precoUnidade);
    
    // Calcula o valor total
    total = quantidadeProdutos * precoUnidade;
    
    // Imprime o resultado no formato solicitado
    printf("NÚMERO DA FATURA\tPRODUTOS\tPREÇO/UNIDADE\tTOTAL\n");
    printf("%d\t\t\t%d\t\t%.2f\t\t%.2f\n", numeroFatura, quantidadeProdutos, precoUnidade, total);
    
    return 0;
}

4.20.Escreva um programa que peça ao usuário para inserir um número inteiro com 3 dígitos e imprima o número ao
contrário.

Digite um número inteiro com 3 dígitos: 123 O número impresso ao contrário é: 321
Dica: 321=3×100+2×10+1321 = 3 \times 100 + 2 \times 10 + 1321=3×100+2×10+1 com 1=1231001 =

\frac{123}{100}1=100123, 2=23102 = \frac{23}{10}2=1023 e 3=restante3 = \text{restante}3=restante.
#include <stdio.h>

int main() {
    int num, centena, dezena, unidade, inverso;
    
    
    printf("Digite um número inteiro com 3 dígitos: ");
    scanf("%d", &num);
    
    
    centena = num / 100;          
    dezena = (num % 100) / 10;    
    unidade = num % 10;          
   
    inverso = unidade * 100 + dezena * 10 + centena;
   
    printf("O número impresso ao contrário é: %d\n", inverso);
    
    return 0;
}



4.21. Escreva um programa que imprima a data da Páscoa para um ano inserido pelo usuário.
A Páscoa ocorre no primeiro domingo após a primeira lua cheia da primavera. A Páscoa é adiada por 1 semana se a
lua cheia cair no domingo. De acordo com Jean Meeus, Spencer Jones e Butcher, a data da Páscoa no ano J pode
ser calculada da seguinte forma (todas as divisões são divisões inteiras):


#include <stdio.h>

int main() {
    int J, a, b, c, d, e, f, g, h, i, k, l, m, n, p;
    
    printf("Insira o ano: ");
    scanf("%d", &J);
    
    a = J % 19;
    b = J / 100;
    c = J % 100;
    d = b / 4;
    e = b % 4;
    f = (b + 8) / 25;
    g = (b - f + 1) / 3;
    h = (19 * a + b - d - g + 15) % 30;
    i = c / 4;
    k = c % 4;
    l = (32 + 2 * e + 2 * i - h - k) % 7;
    m = (a + 11 * h + 22 * l) / 451;
    n = (h + l - 7 * m + 114) / 31;  // Mês da Páscoa
    p = (h + l - 7 * m + 114) % 31;  // Dia da Páscoa
    
    printf("A Páscoa no ano %d será em: %d/%d\n", J, p + 1, n);
    
    return 0;
}

----------------------------------------------------------------------------------------------------------------------
LISTA 2

 5.2.1 Escreva um programa que solicite ao usuário que insira um número inteiro e imprima se esse número é
positivo ou não (ou seja, negativo ou zero!).

#include <stdio.h>

int main() {
    int numero;

    // Pede ao usuário para inserir um número
    printf("Insira um número inteiro: ");
   
    scanf("%d", &numero);

    if (numero > 0) {
        printf("O número %d é positivo.\n", numero);
    } else {
        printf("O número %d não é positivo.\n", numero);
    }
    return 0;
}


 5.2.2 Escreva um programa que solicite ao usuário que insira um número inteiro e imprima se esse número é par
ou ímpar.

#include <stdio.h>

int main() {
    
    int numero;

    printf("Insira um número inteiro: ");
  
    scanf("%d", &numero);

    if (numero % 2 == 0) {
        printf("O número %d é par.\n", numero);
    } else {
        printf("O número %d é ímpar.\n", numero);
    }
    return 0;
}

 5.2.3 Escreva um programa que solicite ao usuário que insira um número real e imprima se esse número está no
intervalo [5,10[ ou não (o intervalo [5,10[ significa 5 ≤ x < 10)


#include <stdio.h>

int main() {
  
    float numero;

    printf("Insira um número real: ");
    
    scanf("%f", &numero);

    if (numero >= 5.0 && numero < 10.0) {
        printf("O número %.2f está no intervalo [5,10[.\n", numero);
    } else {
        printf("O número %.2f não está no intervalo [5,10[.\n", numero);
    }
    return 0;
}


 5.2.4 Escreva um programa que solicite ao usuário que insira um número real e imprima se, para esse número,
cada uma das seguintes condições é atendida ou não:
- Condição A: 3 ≤ x < 8.5
- Condição B: x < 3 OU 5.4 < x ≤ 7.3 OU x > 13
- Condição C: x ≠ 3 E x < 9.75
Exemplos:
- 0 corresponde às condições: não A, B, C
- 3 corresponde às condições: A, não B, não C
- 8 corresponde às condições: A, não B, C
- 15 corresponde às condições: não A, B, não C


#include <stdio.h>

int main() {
    // Declara uma variável para armazenar o número real
    float numero;

    // Pede ao usuário para inserir um número
    printf("Insira um número real: ");
    scanf("%f", &numero);

    // Verifica a Condição A
    if (numero >= 3.0 && numero < 8.5) {
        printf("Condição A: Atendida\n");
    } else {
        printf("Condição A: Não atendida\n");
    }

    // Verifica a Condição B
    if (numero < 3.0 || (5.4 < numero && numero <= 7.3) || numero > 13.0) {
        printf("Condição B: Atendida\n");
    } else {
        printf("Condição B: Não atendida\n");
    }

    // Verifica a Condição C
    if (numero != 3.0 && numero < 9.75) {
        printf("Condição C: Atendida\n");
    } else {
        printf("Condição C: Não atendida\n");
    }

    return 0;
}


 5.2.5 Escreva um programa que solicite ao usuário que insira um número real e imprima se esse número é
positivo, zero ou negativo.

#include <stdio.h>

int main() {
    
    float numero;

    printf("Insira um número real: ");

    scanf("%f", &numero);

    if (numero > 0) {
        printf("O número %.2f é positivo.\n", numero);
    } else if (numero == 0) {
        printf("O número é zero.\n");
    } else {
        printf("O número %.2f é negativo.\n", numero);
    }

    return 0;
}

 5.2.6 Escreva um programa que solicite ao usuário que insira 5 números inteiros um por um. Enquanto lê os
números, o programa calcula o menor valor desses números. No final, o menor valor é impresso. Tente limitar o
número de variáveis no seu programa a 2 (ou no máximo 3), mas não introduza laços ainda.


#include <stdio.h>

int main() {
    // Declaração das variáveis
    int numero, menor;
    
    // Pede ao usuário para inserir o primeiro número
    printf("Insira o primeiro número: ");
    scanf("%d", &numero);
    
    // Inicializa o menor valor com o primeiro número
    menor = numero;

    // Pede e lê os próximos quatro números e compara com o menor valor
    printf("Insira o segundo número: ");
    scanf("%d", &numero);
    if (numero < menor) menor = numero;

    printf("Insira o terceiro número: ");
    scanf("%d", &numero);
    if (numero < menor) menor = numero;

    printf("Insira o quarto número: ");
    scanf("%d", &numero);
    if (numero < menor) menor = numero;

    printf("Insira o quinto número: ");
    scanf("%d", &numero);
    if (numero < menor) menor = numero;

    // Imprime o menor valor
    printf("O menor valor inserido é: %d\n", menor);

    return 0;
}


 5.2.7 Escreva um programa que compare sua velocidade com o limite de velocidade. Se você estiver acima do
limite, o programa calculará sua multa. Caso contrário, nada acontece. A multa consiste em um valor fixo de € 100 e
um valor variável de € 2,5 para cada km acima do limite de velocidade.
A tela deve exibir:

```

Atenção! Exceder o limite de velocidade é severamente multado!
Digite sua velocidade: 131
Digite o limite de velocidade: 120
Sua velocidade está 11 km/h acima do limite.

Sua multa é de 127,5 euros.
``
#include <stdio.h>

int main() {
    float velocidade, limite, multa;
    float excesso;
    
    printf("Atenção! Exceder o limite de velocidade é severamente multado!\n");
    
    printf("Digite sua velocidade (km/h): ");
    scanf("%f", &velocidade);
    
    printf("Digite o limite de velocidade (km/h): ");
    scanf("%f", &limite);
    
    if (velocidade > limite) {
        excesso = velocidade - limite; 
        multa = 100 + (excesso * 2.5);  
        
        printf("Sua velocidade está %.0f km/h acima do limite.\n", excesso);
        printf("Sua multa é de %.2f euros.\n", multa);
    } else {
        printf("Você está dentro do limite de velocidade. Sem multa.\n");
    }
    
    return 0;
}




 5.2.8 Escreva um programa que calcule o IMC (Índice de Massa Corporal). O IMC é uma medida da gordura
corporal baseada na altura e peso, aplicável a homens e mulheres adultos. Pode ser calculado com a fórmula:

O IMC é dividido em diferentes categorias:
- Abaixo do peso: < 18,5
- Peso normal: 18,5 – 24,9
- Sobrepeso: 25 – 29,9
- Obesidade: ≥ 30

Peça ao usuário a altura e o peso, calcule o IMC e imprima a categoria à qual o usuário pertence.


#include <stdio.h>

int main() {
    float peso, altura, imc;

    printf("Digite seu peso em kg: ");
    scanf("%f", &peso);

    printf("Digite sua altura em metros: ");
    scanf("%f", &altura);

    imc = peso / (altura * altura);

    printf("Seu IMC é: %.2f\n", imc);

    if (imc < 18.5) {
        printf("Categoria: Abaixo do peso\n");
    } else if (imc >= 18.5 && imc <= 24.9) {
        printf("Categoria: Peso normal\n");
    } else if (imc >= 25 && imc <= 29.9) {
        printf("Categoria: Sobrepeso\n");
    } else {
        printf("Categoria: Obesidade\n");
    }

    return 0;
}


 5.2.9 Escreva um programa que primeiro leia 3 números inteiros que representam a data atual e depois leia
novamente 3 números inteiros para serem interpretados como uma data de nascimento. Com base nessas
informações, o programa imprime a idade dessa pessoa em anos e meses.
Digite a data atual: 6 1 2015
Digite sua data de nascimento: 25 1 1985
Sua idade é: 29 anos e 11 meses

#include <stdio.h>

int main() {
    int diaAtual, mesAtual, anoAtual;
    int diaNasc, mesNasc, anoNasc;
    int anos, meses;
    
    printf("Digite a data atual (dia mês ano): ");
    scanf("%d %d %d", &diaAtual, &mesAtual, &anoAtual);
    
    printf("Digite sua data de nascimento (dia mês ano): ");
    scanf("%d %d %d", &diaNasc, &mesNasc, &anoNasc);
    
    anos = anoAtual - anoNasc;
    meses = mesAtual - mesNasc;
    
    if (meses < 0 || (meses == 0 && diaAtual < diaNasc)) {
        anos--;  // A pessoa ainda não fez aniversário este ano
        meses += 12;  // Ajusta os meses
    }
    
    if (diaAtual < diaNasc) {
        meses--;
    }
    
    printf("Sua idade é: %d anos e %d meses\n", anos, meses);

    return 0;
}


 5.2.10 Escreva um programa que leia um horário de início e um horário de término, calcule a diferença de tempo e
a imprima no formato hh horas mm minutos ss segundos. Você pode ler horas, minutos e segundos separadamente.
Se o horário de início parecer ser mais tarde do que o horário de término, você pode assumir que o horário de início é
do dia anterior

#include <stdio.h>

struct Tempo {
    int horas;
    int minutos;
    int segundos;
};

// Função para calcular a diferença de tempo
struct Tempo calcularDiferenca(struct Tempo inicio, struct Tempo fim) {
    struct Tempo diferenca;

    // Ajusta segundos
    if (fim.segundos < inicio.segundos) {
        fim.segundos += 60;
        fim.minutos -= 1;
    }
    diferenca.segundos = fim.segundos - inicio.segundos;

    // Ajusta minutos
    if (fim.minutos < inicio.minutos) {
        fim.minutos += 60;
        fim.horas -= 1;
    }
    diferenca.minutos = fim.minutos - inicio.minutos;

    // Ajusta horas (considerando que o início pode ser no dia anterior)
    if (fim.horas < inicio.horas) {
        fim.horas += 24;
    }
    diferenca.horas = fim.horas - inicio.horas;

    return diferenca;
}

int main() {
    struct Tempo inicio, fim, diferenca;

    // Lê o horário de início
    printf("Digite o horário de início (hh mm ss): ");
    scanf("%d %d %d", &inicio.horas, &inicio.minutos, &inicio.segundos);

    // Lê o horário de término
    printf("Digite o horário de término (hh mm ss): ");
    scanf("%d %d %d", &fim.horas, &fim.minutos, &fim.segundos);

    // Calcula a diferença de tempo
    diferenca = calcularDiferenca(inicio, fim);

    // Exibe a diferença no formato hh horas mm minutos ss segundos
    printf("Diferença de tempo: %d horas %d minutos %d segundos\n", 
           diferenca.horas, diferenca.minutos, diferenca.segundos);

    return 0;
}


 5.2.11 Escreva um programa que leia 3 números e os imprima classificados do menor para o maior.

 5.2.12 Escreva um programa que leia um dígito (0, 1, ..., 9) e imprima esse dígito por extenso. Se o número
inserido não for um dígito, uma mensagem de aviso deve ser impressa.
Digite um dígito: 3
Você inseriu o dígito três.

Digite um dígito: 23
O número que você inseriu não é um dígito.

#include <stdio.h>

int main() {
    int numero;

    printf("Digite um dígito: ");
    scanf("%d", &numero);

    if (numero < 0 || numero > 9) {
        printf("O número que você inseriu não é um dígito.\n");
    } else {
        switch (numero) {
            case 0:
                printf("Você inseriu o dígito zero.\n");
                break;
            case 1:
                printf("Você inseriu o dígito um.\n");
                break;
            case 2:
                printf("Você inseriu o dígito dois.\n");
                break;
            case 3:
                printf("Você inseriu o dígito três.\n");
                break;
            case 4:
                printf("Você inseriu o dígito quatro.\n");
                break;
            case 5:
                printf("Você inseriu o dígito cinco.\n");
                break;
            case 6:
                printf("Você inseriu o dígito seis.\n");
                break;
            case 7:
                printf("Você inseriu o dígito sete.\n");
                break;
            case 8:
                printf("Você inseriu o dígito oito.\n");
                break;
            case 9:
                printf("Você inseriu o dígito nove.\n");
                break;
        }
    }

    return 0;
}




 5.2.13 Escreva um programa que solicite ao usuário que insira uma instrução no formato: número1 operador
número2

Para o operador, o usuário pode escolher +, -, * ou /. O programa calcula o resultado matemático e o imprime na tela.

Dica: leia a instrução com
scanf("%f%c%f%*c",&getal1,&operador,&getal2);

e use

switch(operador)

Digite uma expressão (sem espaços!): 245/16
245 / 16 = 15,31


#include <stdio.h>

int main() {
    float numero1, numero2, resultado;
    char operador;

    // Solicita a expressão no formato número1 operador número2
    printf("Digite uma expressão (sem espaços!): ");
    scanf("%f%c%f", &numero1, &operador, &numero2);

    // Usa switch para calcular o resultado com base no operador fornecido
    switch (operador) {
        case '+':
            resultado = numero1 + numero2;
            printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            break;
        case '-':
            resultado = numero1 - numero2;
            printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            break;
        case '*':
            resultado = numero1 * numero2;
            printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            break;
        case '/':
            if (numero2 != 0) {
                resultado = numero1 / numero2;
                printf("%.2f %c %.2f = %.2f\n", numero1, operador, numero2, resultado);
            } else {
                printf("Erro: Divisão por zero não permitida!\n");
            }
            break;
        default:
            printf("Erro: Operador inválido!\n");
    }

    return 0;
}




 5.2.14 Uma companhia de gás calcula seus preços da seguinte forma:
- Para um consumo ≤ 1m3: € 20,00
- Para um consumo > 1m3: € 20 pelo primeiro m3 + € 3,5/m3 para a parte acima de 1m3

O valor total precisa ser acrescido de um imposto de 21%.

Escreva um programa que peça ao usuário para inserir seu consumo e imprima uma fatura na tela mostrando o
consumo, o preço de custo, o valor do imposto e o valor total.

#include <stdio.h>

int main() {
    float consumo, preco_custo, imposto, valor_total;

    // Solicita o consumo ao usuário
    printf("Insira o consumo em m3: ");
    scanf("%f", &consumo);

    // Calcula o preço de custo com base no consumo
    if (consumo <= 1) {
        preco_custo = 20.0;  // Preço fixo para consumo ≤ 1m3
    } else {
        preco_custo = 20.0 + (consumo - 1) * 3.5;  // Preço para consumo > 1m3
    }

    // Calcula o imposto (21% sobre o preço de custo)
    imposto = preco_custo * 0.21;

    // Calcula o valor total (preço de custo + imposto)
    valor_total = preco_custo + imposto;

    // Exibe a fatura
    printf("\n--- Fatura ---\n");
    printf("Consumo: %.2f m3\n", consumo);
    printf("Preço de custo: € %.2f\n", preco_custo);
    printf("Imposto (21%%): € %.2f\n", imposto);
    printf("Valor total: € %.2f\n", valor_total);

    return 0;
}



 5.2.15 A resistência equivalente (Req) para 2 resistores em paralelo, R1 e R2, pode ser calculada com:

Escreva um programa que leia os valores de R1 e R2, calcule Req e o imprima na tela. Certifique-se de que o
programa também funcione corretamente para R1 e/ou R2 igual a 0!

#include <stdio.h>

int main() {
    float R1, R2, Req;

    
    printf("Insira o valor de R1 : ");
    scanf("%f", &R1);
    printf("Insira o valor de R2 : ");
    scanf("%f", &R2);

    if (R1 == 0 && R2 == 0) {
        Req = 0;  
    } else if (R1 == 0) {
        Req = R2;  
    } else if (R2 == 0) {
        Req = R1; 
    } else {
        
        Req = (R1 * R2) / (R1 + R2);
    }

    printf("A resistência equivalente (Req) é: %.2f ohms\n", Req);

    return 0;
}




 5.2.16 Escreva um programa que calcule o comprimento do terceiro lado de um triângulo retângulo com base nos
comprimentos dos outros 2 lados e o imprima na tela. Para isso, peça ao usuário para inserir o comprimento dos 3
lados na ordem: lado1 lado2 hipotenusa. Um zero deve ser inserido para o lado do qual você deseja calcular o
comprimento.

#include <stdio.h>
#include <math.h> // Para usar a função sqrt()

int main() {
    float lado1, lado2, hipotenusa;

    // Solicita os comprimentos dos lados e da hipotenusa ao usuário
    printf("Insira os comprimentos dos lados e da hipotenusa (use 0 para o lado desconhecido):\n");
    printf("Lado 1: ");
    scanf("%f", &lado1);
    printf("Lado 2: ");
    scanf("%f", &lado2);
    printf("Hipotenusa: ");
    scanf("%f", &hipotenusa);

    // Verifica qual lado foi inserido como 0 e calcula seu valor
    if (lado1 == 0) {
        // Calcula o lado1 quando lado2 e hipotenusa são conhecidos
        lado1 = sqrt(pow(hipotenusa, 2) - pow(lado2, 2));
        printf("O comprimento do lado 1 é: %.2f\n", lado1);
    } else if (lado2 == 0) {
        // Calcula o lado2 quando lado1 e hipotenusa são conhecidos
        lado2 = sqrt(pow(hipotenusa, 2) - pow(lado1, 2));
        printf("O comprimento do lado 2 é: %.2f\n", lado2);
    } else if (hipotenusa == 0) {
        // Calcula a hipotenusa quando lado1 e lado2 são conhecidos
        hipotenusa = sqrt(pow(lado1, 2) + pow(lado2, 2));
        printf("O comprimento da hipotenusa é: %.2f\n", hipotenusa);
    } else {
        printf("Nenhum lado desconhecido foi inserido.\n");
    }

    return 0;
}


 5.2.17 Escreva um programa que leia 3 números inteiros que devem ser interpretados como uma data e imprima o
dia da semana correspondente. O dia da semana pode ser calculado da seguinte forma:

onde

válido para Março até Dezembro

#include <stdio.h>

int calcularDiaDaSemana(int dia, int mes, int ano) {
    // Ajusta janeiro e fevereiro para serem os meses 13 e 14 do ano anterior
    if (mes == 1 || mes == 2) {
        mes += 12;
        ano -= 1;
    }

    // Fórmula de Zeller
    int K = ano % 100;    // Últimos dois dígitos do ano
    int J = ano / 100;    // Primeiros dois dígitos do ano (século)

    int f = dia + (13 * (mes + 1)) / 5 + K + (K / 4) + (J / 4) - 2 * J;

    // O resultado pode ser negativo, então ajustamos o valor para estar no intervalo de 0 a 6
    int diaSemana = f % 7;
    if (diaSemana < 0) {
        diaSemana += 7;
    }

    return diaSemana;
}

const char* obterNomeDiaDaSemana(int diaSemana) {
    // Dias da semana: 0 = Sábado, 1 = Domingo, 2 = Segunda, etc.
    const char* dias[] = {"Sábado", "Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira"};
    return dias[diaSemana];
}

int main() {
    int dia, mes, ano;

    // Lê a data do usuário
    printf("Insira uma data (dd mm aaaa): ");
    scanf("%d %d %d", &dia, &mes, &ano);

    // Calcula o dia da semana
    int diaSemana = calcularDiaDaSemana(dia, mes, ano);

    // Exibe o resultado
    printf("O dia %02d/%02d/%d cai em uma %s.\n", dia, mes, ano, obterNomeDiaDaSemana(diaSemana));

    return 0;
}




 5.2.18 Escreva um programa que peça ao usuário para inserir os coeficientes a, b e c de uma equação quadrática
com a forma geral \(ax^2 + bx + c = 0\) e imprima todas as raízes reais dessa equação. Certifique-se de que o
programa não trave para certos valores dos coeficientes!

#include <stdio.h>
#include <math.h>  // Para a função sqrt()

int main() {
    float a, b, c, delta, raiz1, raiz2;

    printf("Insira os coeficientes a, b e c da equacao (a, b, c): ");
    scanf("%f %f %f", &a, &b, &c);

    if (a == 0) {
        printf("Coeficiente 'a' deve ser diferente de zero para uma equacao quadratica.\n");
        return 1;
    }

    delta = b * b - 4 * a * c;

    if (delta > 0) {
        
        raiz1 = (-b + sqrt(delta)) / (2 * a);
        raiz2 = (-b - sqrt(delta)) / (2 * a);
        printf("As raizes reais da equacao sao: %.2f e %.2f\n", raiz1, raiz2);
    } else if (delta == 0) {
        
        raiz1 = -b / (2 * a);
        printf("A equacao tem uma raiz real dupla: %.2f\n", raiz1);
    } else {
        
        printf("A equacao nao tem raizes reais, pois o discriminante e negativo.\n");
    }

    return 0;
}
----------------------------------------------------------------------------------------------------------------------

LISTA 3
 5.3.1 Escreva um programa com apenas 1 variável que imprima os números -3, -1, 1, 3, 5, ..., 25, separados por
vírgulas na tela. Nada precisa ser lido do teclado.

#include <stdio.h>

int main() {
    int num;
    
    for (num = -3; num <= 25; num += 2) {
        if (num != 25) {
            printf("%d, ", num);
        } else {
            printf("%d\n", num);
        }
    }

    return 0;
}

 5.3.2 Escreva um programa com apenas 1 variável que imprima os números -3, -1, 1, 3, 5, ..., 25, separados por
vírgulas na tela. Nada precisa ser lido do teclado. A tela deve exibir:
int main() {
    int numero;
    
    printf("Digite um número para ver sua tabuada: ");
    scanf("%d", &numero);
    printf("Tabuada de %d:\n", numero);
    for (int i = 1; i <= 10; i++) {
        printf("%d x %d = %d\n", numero, i, numero * i);
    }

    return 0;
}




 5.3.3 Escreva um programa que peça ao usuário para inserir um número inteiro nnn e imprima a soma
1+2+3+4+...+n.
#include <stdio.h>

int main() {
    int n, soma = 0;

    
    printf("Digite um número inteiro: ");
    scanf("%d", &n);
    
    
    for (int i = 1; i <= n; i++) {
        soma += i;
    }

    
    printf("A soma de 1 até %d é: %d\n", n, soma);

    return 0;
}

 5.3.4 Escreva um programa que imprima um quadrado preenchido na tela, imprimindo 22 linhas de 40 retângulos
pretos (o código ASCII para um retângulo preto é 219).

#include <stdio.h>

int main() {
    int linhas = 22;
    int colunas = 40;
    char retangulo = 219; 
    
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            printf("%c", retangulo);
        }
        printf("\n"); 
    }

    return 0;
}

 5.3.5 Escreva um programa que primeira peça ao usuário para inserir um número inteiro. Em seguida, mais
números inteiros são solicitados até que a soma desses números seja igual ou exceda o primeiro número inserido.


#include <stdio.h>

int main() {
    int limite, numero, soma = 0;

   
    printf("Digite um número inteiro: ");
    scanf("%d", &limite);
    
    while (soma < limite) {
        printf("Digite um número inteiro para adicionar à soma: ");
        scanf("%d", &numero);
        soma += numero;
    }

    printf("A soma dos números inseridos é: %d\n", soma);

    return 0;
}

 5.3.6 Escreva um programa que peça ao usuário para inserir um número inteiro no intervalo [-2, 4.5[ (ou seja, -2 ≤
número < 4.5) e imprima-o na tela. Se um número incorreto for inserido, um novo número deve ser solicitado até que
um número válido seja inserido.

#include <stdio.h>

int main() {
    int numero;
    
    while (1) {
        // Solicita ao usuário que insira um número inteiro
        printf("Digite um número inteiro no intervalo [-2, 4.5[: ");
        scanf("%d", &numero);
        
        
        if (numero >= -2 && numero < 4) {
            printf("Número válido inserido: %d\n", numero);
            break; 
        } else {
            printf("Número inválido. Tente novamente.\n");
        }
    }

    return 0;
}



 5.3.7 Escreva um programa que peça ao usuário para inserir um número inteiro no intervalo [-30, 30]. Certifique-se
de que apenas números válidos possam ser inseridos! Esse número é então impresso como um gráfico de barras feito
de símbolos *. Números negativos são desenhados da metade para a esquerda, números positivos são desenhados
da metade para a direita. Pontos são usados para preencher os espaços vazios. O próprio número inserido é impresso
no final. Repita o programa até que 0 seja inserido.


#include <stdio.h>

#define MAX 30  

void imprimirGrafico(int numero) {
    int i;

    if (numero < 0) {
        for (i = 0; i < -numero; i++) {
            printf("*");
        }
        for (i = -numero; i < MAX; i++) {
            printf(".");
        }
    } else {
        for (i = 0; i < MAX - numero; i++) {
            printf(".");
        }
        for (i = MAX - numero; i < MAX; i++) {
            printf("*");
        }
    }

    printf(" %d\n", numero);
}

int main() {
    int numero;

    while (1) {
        
        printf("Digite um número inteiro no intervalo [-30, 30]: ");
        scanf("%d", &numero);

        if (numero >= -30 && numero <= 30) {
            if (numero == 0) {
                break; // Sai do loop se o número for 0
            }
            imprimirGrafico(numero);
        } else {
            printf("Número inválido. Tente novamente.\n");
        }
    }

    return 0;
}



 5.3.8 Escreva um programa que some 10 números inseridos pelo usuário e calcule a média desses 10 números.
Tente usar apenas 3 variáveis em seu programa. Calcule a soma enquanto lê os números.

#include <stdio.h>

int main() {
    int i;          
    int numero;     
    int soma = 0;   

    for (i = 0; i < 10; i++) {
        printf("Digite o %dº número: ", i + 1);
        scanf("%d", &numero);
        soma += numero;  
    }

    float media = (float)soma / 10;
    printf("Soma: %d\n", soma);
    printf("Média: %.2f\n", media);

    return 0;
}

 5.3.9 Escreva um programa que imprima a média de uma quantidade de números inteiros. O número exato de
inteiros não é conhecido antecipadamente. Se o número 999 for lido, o programa para de ler novos números. 999 não
pode ser levado em conta para o cálculo da média.

#include <stdio.h>

int main() {
    int numero;      // Variável para armazenar o número inserido pelo usuário
    int soma = 0;    // Variável para armazenar a soma dos números
    int count = 0;   // Contador para o número de entradas válidas

    printf("Digite números inteiros (999 para parar):\n");

    // Loop para ler números até que 999 seja inserido
    while (1) {
        scanf("%d", &numero);
        
        if (numero == 999) {
            break;  // Sai do loop se o número 999 for inserido
        }
        
        soma += numero;  // Adiciona o número à soma
        count++;         // Incrementa o contador de entradas válidas
    }

    // Calcula e imprime a média se pelo menos um número válido foi inserido
    if (count > 0) {
        float media = (float)soma / count;
        printf("Média: %.2f\n", media);
    } else {
        printf("Nenhum número válido foi inserido.\n");
    }

    return 0;
}


 5.3.10 Escreva um programa que leia um número natural n, calcule n! e imprima o resultado na tela.

#include <stdio.h>

int main() {
    int n;           
    unsigned long long factorial = 1;  

  
    printf("Digite um número natural: ");
    scanf("%d", &n);

    if (n < 0) {
        printf("O número deve ser um número natural (não negativo).\n");
        return 1;  
    }

    for (int i = 1; i <= n; i++) {
        factorial *= i;  
    }

    printf("O fatorial de %d é %llu.\n", n, factorial);

    return 0;
}




 5.3.12 Repita o exercício 5.3.11, mas com nnn sendo um número inteiro (valores positivos e negativos são
possíveis).

#include <stdio.h>

// Função para calcular o fatorial de um número não negativo
unsigned long long fatorial(int n) {
    unsigned long long resultado = 1;
    for (int i = 1; i <= n; i++) {
        resultado *= i;
    }
    return resultado;
}

int main() {
    int n;              // Variável para armazenar o número inserido pelo usuário
    unsigned long long resultado;  // Variável para armazenar o resultado do fatorial

    // Solicita ao usuário para inserir um número inteiro
    printf("Digite um número inteiro: ");
    scanf("%d", &n);

    // Verifica se o número é negativo
    if (n < 0) {
        printf("O fatorial não é definido para números negativos.\n");
    } else {
        // Calcula o fatorial de n
        resultado = fatorial(n);

        // Imprime o resultado
        printf("O fatorial de %d é %llu.\n", n, resultado);
    }

    return 0;
}


 5.3.13 Escreva um programa que imprima o valor mínimo e máximo de 10 números inseridos pelo usuário. Use
apenas 4 variáveis em seu programa.

#include <stdio.h>

int main() {
    int num;          // Variável para armazenar o número atual inserido
    int min;          // Variável para armazenar o valor mínimo
    int max;          // Variável para armazenar o valor máximo
    int i;            // Variável de controle para o loop

    // Solicita ao usuário para inserir 10 números
    printf("Digite 10 números inteiros:\n");
    
    // Inicializa min e max com um valor que seja maior e menor, respectivamente, que qualquer número possível
    // Inicialmente, usamos o valor do primeiro número inserido para definir min e max
    scanf("%d", &num);
    min = max = num;

    // Loop para ler os próximos 9 números e atualizar min e max
    for (i = 1; i < 10; i++) {
        scanf("%d", &num);
        if (num < min) {
            min = num;  // Atualiza o valor mínimo
        }
        if (num > max) {
            max = num;  // Atualiza o valor máximo
        }
    }
    
    // Imprime o valor mínimo e máximo
    printf("Valor mínimo: %d\n", min);
    printf("Valor máximo: %d\n", max);
    
    return 0;
}


 5.3.14 Repita o exercício 5.3.13, mas desta vez também imprima quando o número mínimo e máximo foram
inseridos


#include <stdio.h>

int main() {
    int num;          // Variável para armazenar o número atual inserido
    int min;          // Variável para armazenar o valor mínimo
    int max;          // Variável para armazenar o valor máximo
    int i;            // Variável de controle para o loop
    int minPosition;  // Variável para armazenar a posição do valor mínimo
    int maxPosition;  // Variável para armazenar a posição do valor máximo

    // Solicita ao usuário para inserir 10 números
    printf("Digite 10 números inteiros:\n");

    // Inicializa min e max com o valor do primeiro número inserido
    scanf("%d", &num);
    min = max = num;
    minPosition = maxPosition = 1; // O primeiro número inserido está na posição 1

    // Loop para ler os próximos 9 números e atualizar min e max
    for (i = 2; i <= 10; i++) { // Começa de 2 porque o primeiro número já foi lido
        scanf("%d", &num);
        if (num < min) {
            min = num;          // Atualiza o valor mínimo
            minPosition = i;    // Atualiza a posição do valor mínimo
        }
        if (num > max) {
            max = num;          // Atualiza o valor máximo
            maxPosition = i;    // Atualiza a posição do valor máximo
        }
    }
    
    // Imprime o valor mínimo, o valor máximo e suas posições
    printf("Valor mínimo: %d, Posicao: %d\n", min, minPosition);
    printf("Valor máximo: %d, Posicao: %d\n", max, maxPosition);
    
    return 0;
}


 5.3.15 Escreva um programa que calcule o maior divisor comum de 2 inteiros positivos. Use o algoritmo de
Euclides para determinar o mdc. Neste algoritmo, o maior número é substituído pela diferença entre os dois números.
Repita isso até que ambos os números sejam iguais. Esse número é o mdc. Imprima o mdc e todos os passos
intermediários.


#include <stdio.h>

// Função para calcular o MDC usando o algoritmo de Euclides com diferenças
int mdc(int a, int b) {
    printf("Passos intermediários:\n");
    
    // Imprime os números iniciais
    printf("Início: a = %d, b = %d\n", a, b);
    
    // Continua até que ambos os números sejam iguais
    while (a != b) {
        if (a > b) {
            a = a - b; // Subtrai o menor número do maior
        } else {
            b = b - a; // Subtrai o menor número do maior
        }
        // Imprime o estado atual após a subtração
        printf("a = %d, b = %d\n", a, b);
    }
    
    // Quando a == b, o MDC foi encontrado
    return a;
}

int main() {
    int num1, num2;
    
    // Solicita ao usuário que insira dois inteiros positivos
    printf("Digite o primeiro número inteiro positivo: ");
    scanf("%d", &num1);
    printf("Digite o segundo número inteiro positivo: ");
    scanf("%d", &num2);
    
    // Verifica se os números inseridos são positivos
    if (num1 <= 0 || num2 <= 0) {
        printf("Os números devem ser inteiros positivos.\n");
        return 1; // Encerra o programa com código de erro
    }
    
    // Calcula o MDC e imprime o resultado
    int resultado = mdc(num1, num2);
    printf("O maior divisor comum é: %d\n", resultado);
    
    return 0;
}



 5.3.16 Escreva um programa que desenhe uma torre invertida usando o caractere ASCII 219 ( ). A torre é
composta por uma sequência de quadrados. O quadrado superior tem um lado definido pelo usuário. O próximo
quadrado é 2 blocos menor, o próximo novamente é 2 blocos menor, ... Novas torres são desenhadas até que o
usuário insira 'n'

#include <stdio.h>

void desenharTorreInvertida(int tamanho) {
    // Enquanto o tamanho do quadrado for maior que zero
    while (tamanho > 0) {
        for (int i = 0; i < tamanho; i++) {
            for (int j = 0; j < tamanho; j++) {
                printf("%c", 219); // Caractere ASCII 219
            }
            printf("\n");
        }
        // Imprime uma linha em branco para separar os quadrados
        printf("\n");
        // Reduz o tamanho do quadrado
        tamanho -= 2;
    }
}

int main() {
    char continuar = 's'; // Variável para controlar o loop
    int tamanho;

    while (continuar == 's') {
        // Solicita ao usuário o tamanho do quadrado superior
        printf("Digite o tamanho do quadrado superior da torre: ");
        scanf("%d", &tamanho);

        // Garante que o tamanho seja um número positivo e ímpar
        if (tamanho <= 0 || tamanho % 2 == 0) {
            printf("O tamanho deve ser um número inteiro positivo e ímpar.\n");
            continue;
        }

        // Desenha a torre invertida
        desenharTorreInvertida(tamanho);

        // Pergunta ao usuário se deseja desenhar outra torre
        printf("Deseja desenhar outra torre? (s/n): ");
        scanf(" %c", &continuar); // O espaço antes de %c é para consumir o caractere de nova linha
    }

    return 0;
}


 5.3.17 Escreva um programa que desenhe uma linha em zigue-zague até que o usuário insira 'n' para parar. A
primeira parte da linha é composta por um número de blocos determinado pelo usuário. A próxima parte tem apenas
metade dessa largura, ... Se o usuário quiser desenhar várias linhas em zigue-zague, certifique-se de que todas
estejam bem posicionadas e desenhadas corretamente.


#include <stdio.h>

void desenharZigueZague(int largura) {
    // Desenha a parte inicial da linha
    for (int i = 0; i < largura; i++) {
        printf("*");
    }
    printf("\n");
    
    // Desenha o zigue-zague
    while (largura > 0) {
        // Imprime espaços para deslocar o zigue-zague para a direita
        for (int i = 0; i < (largura / 2); i++) {
            printf(" ");
        }
        
        // Desenha a linha do zigue-zague
        for (int i = 0; i < largura; i++) {
            printf("*");
        }
        printf("\n");
        
        // Reduz a largura pela metade
        largura /= 2;
    }
}

int main() {
    char continuar = 's'; // Variável para controlar o loop
    int largura;
    
    while (continuar == 's') {
        // Solicita ao usuário o número de blocos para a linha em zigue-zague
        printf("Digite o número de blocos para a primeira linha do zigue-zague: ");
        scanf("%d", &largura);
        
        // Garante que a largura seja maior que zero
        if (largura <= 0) {
            printf("A largura deve ser um número inteiro positivo.\n");
            continue;
        }
        
        // Desenha a linha em zigue-zague
        desenharZigueZague(largura);
        
        // Pergunta ao usuário se deseja desenhar mais linhas
        printf("Deseja desenhar outra linha em zigue-zague? (s/n): ");
        scanf(" %c", &continuar); // O espaço antes de %c é para consumir o caractere de nova linha
    }
    
    return 0;
}



 5.3.18 Escreva um programa que determine o máximo entre 10 números inseridos pelo usuário. O programa
também imprime o número de vezes que o valor máximo foi inserido.


#include <stdio.h>

int main() {
    int numeros[10];
    int maximo, count = 0;

    // Solicita ao usuário para inserir 10 números
    printf("Digite 10 números inteiros:\n");
    for (int i = 0; i < 10; i++) {
        printf("Número %d: ", i + 1);
        scanf("%d", &numeros[i]);
    }

    // Inicializa o máximo com o primeiro número
    maximo = numeros[0];
    count = 1; // Já contamos o primeiro número

    // Encontra o máximo e conta quantas vezes ele aparece
    for (int i = 1; i < 10; i++) {
        if (numeros[i] > maximo) {
            maximo = numeros[i];
            count = 1; // Reinicia o contador para o novo máximo
        } else if (numeros[i] == maximo) {
            count++; // Incrementa o contador se o número for igual ao máximo
        }
    }

    // Imprime o máximo e o número de vezes que ele aparece
    printf("O valor máximo é: %d\n", maximo);
    printf("O valor máximo foi inserido %d vez(es).\n", count);

    return 0;
}


 5.3.19 Escreva um programa que peça ao usuário para inserir um número inteiro positivo e imprima todas as linhas
de inteiros positivos consecutivos com uma soma igual ao primeiro número inserido

#include <stdio.h>

void encontrarSequencias(int soma) {
    for (int inicio = 1; inicio <= soma / 2; inicio++) {
        int total = 0;
        int i;
        for (i = inicio; total < soma; i++) {
            total += i;
            if (total == soma) {
                // Sequência encontrada
                printf("Sequência: ");
                for (int j = inicio; j < i; j++) {
                    printf("%d ", j);
                }
                printf("\n");
                break;
            }
        }
    }
}

int main() {
    int numero;

    // Solicita ao usuário um número inteiro positivo
    printf("Digite um número inteiro positivo: ");
    scanf("%d", &numero);

    // Verifica se o número é positivo
    if (numero <= 0) {
        printf("O número deve ser um inteiro positivo.\n");
        return 1;
    }

    // Encontra e imprime as sequências
    encontrarSequencias(numero);

    return 0;
}

-------------------------------------------------------------------------------

LISTA 4


6.1. Escreva um programa que leia um ângulo em graus e imprima o seno correspondente. Você pode usar funções padrão.

#include <stdio.h>
#include <math.h>

int main() {
    double angulo_graus, angulo_radianos, seno;

    // Ler o ângulo em graus
    printf("Digite o ângulo em graus: ");
    scanf("%lf", &angulo_graus);

    // Converter de graus para radianos
    angulo_radianos = angulo_graus * (M_PI / 180.0);

    // Calcular o seno
    seno = sin(angulo_radianos);

    // Imprimir o resultado
    printf("O seno de %.2f graus é: %.5f\n", angulo_graus, seno);

    return 0;
}


6.2. Escreva um programa que imprima uma tabela com 2 colunas. A primeira coluna contém todos os ângulos de 0 a 360 graus com
passos de 30 graus. A segunda coluna contém os valores de seno correspondentes.

#include <stdio.h>
#include <math.h>

#define PI 3.14159

int main() {
    double angulo, seno;

    printf("Ângulo\tSeno\n");
    printf("------\t-----\n");

    for (angulo = 0; angulo <= 360; angulo += 30) {
        // Convertendo o ângulo para radianos, pois a função sin() em C trabalha com radianos
        seno = sin(angulo * PI / 180);
        printf("%.2lf\t%.4lf\n", angulo, seno);
    }

    return 0;
}

6.3. Escreva um programa que calcule a raiz quadrada de um número inserido pelo usuário.


#include <stdio.h>
#include <math.h>

int main() {
    double numero, raiz;

    printf("Digite um número: ");
    scanf("%lf", &numero);

    // Verifica se o número é negativo
    if (numero < 0) {
        printf("Não é possível calcular a raiz quadrada de um número negativo.\n");
    } else {
        raiz = sqrt(numero);
        printf("A raiz quadrada de %.2lf é %.2lf\n", numero, raiz);
    }

    return 0;
}

6.4. Escreva um programa que leia os comprimentos dos lados a e b de um triângulo retângulo e imprima o comprimento da
hipotenusa c e um dos ângulos agudos. Exemplos:

Entrada: 2 1
Saída: 2.24 63°

Entrada: 1 1.732
Saída: 2.00 60°

#include <stdio.h>
#include <math.h>

int main() {
    double a, b, c, angulo;

    printf("Digite os comprimentos dos catetos a e b: ");
    scanf("%lf %lf", &a, &b);

    // Calculando a hipotenusa usando o Teorema de Pitágoras
    c = sqrt(a*a + b*b);

    // Calculando o ângulo em radianos usando arctan(b/a)
    angulo = atan(b/a);

    // Convertendo o ângulo de radianos para graus
    angulo = angulo * 180 / M_PI;

    printf("Hipotenusa: %.2lf\n", c);
    printf("Ângulo agudo: %.0lf graus\n", angulo);

    return 0;
}


6.5. Escreva um programa para um jogo de adivinhação. Primeiro, um número aleatório entre 1 e 100 é escolhido pelo programa.
Depois, o usuário pode começar a adivinhar. Se o palpite for muito alto ou muito baixo, o programa precisa imprimir “muito alto” ou
“muito baixo”. Isso é repetido até que o número seja encontrado. No final, o programa imprime quantas tentativas o usuário precisou
para encontrar o número secreto.



#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int numero_secreto, palpite, tentativas = 0;

    // Inicializa a semente para gerar números aleatórios
    srand(time(NULL));

    // Gera um número aleatório entre 1 e 100
    numero_secreto = rand() % 100 + 1;

    printf("Adivinhe o número entre 1 e 100!\n");

    do {
        printf("Digite seu palpite: ");
        scanf("%d", &palpite);
        tentativas++;

        if (palpite < numero_secreto) {
            printf("Muito baixo!\n");
        } else if (palpite > numero_secreto) {
            printf("Muito alto!\n");
        }
    } while (palpite != numero_secreto);

    printf("Parabéns! Você acertou em %d tentativas.\n", tentativas);

    return 0;
}





6.6. Escreva um programa que imprima uma tabela com 2 colunas. A primeira coluna contém valores de x de -5 a +5 com um passo de
0,5. A segunda coluna contém os valores correspondentes de y de acordo com a equação y = 2x2 + 2x − 3. Certifique-se de que o cálculo
dos valores de y seja feito em uma função separada.


#include <stdio.h>

// Função para calcular o valor de y
double calcular_y(double x) {
    return 2 * x * x + 2 * x - 3;
}

int main() {
    double x, y;

    printf("   x   |    y    \n");
    printf("-------|---------\n");

    for (x = -5; x <= 5; x += 0.5) {
        y = calcular_y(x);
        printf("%6.2lf | %8.2lf\n", x, y);
    }

    return 0;
}


6.7. Escreva uma função com o cabeçalho:

void printline(int number, char c)
Exemplo:
Entrada
printline(40, ‘*’);
Saida
****************************************


#include <stdio.h>

void printline(int number, char c) {
    int i;
    for (i = 0; i < number; i++) {
        printf("%c", c);
    }
    printf("\n"); // Adiciona uma nova linha ao final
}
int main() {
    printline(40, '*'); // Imprime 40 asteriscos
   
    return 0;
}





6.8 Escreva uma função que leia um número inteiro no intervalo [0, 10] e retorne esse número como valor de retorno da função. Se o
número não estiver no intervalo correto, a função deve pedir um novo número até que um valor correto seja inserido. O programa
principal é algo como:

int main(void)
{
int number;
number = readnumber();
printf("O número lido é %d\n", number);
return 0;
}
Certifique-se de escrever a declaração da função readnumber() antes da função principal e a definição da função após a função
principal.

#include <stdio.h>

// Declaração da função readnumber
int readnumber(void);

int main(void) {
    int number;
    
    // Chama a função readnumber para ler um número válido
    number = readnumber();
    
    // Imprime o número lido
    printf("O número lido é %d\n", number);
    
    return 0;
}

// Definição da função readnumber
int readnumber(void) {
    int number;
    
    while (1) {
        // Solicita ao usuário que insira um número
        printf("Digite um número entre 0 e 10: ");
        scanf("%d", &number);
        
        // Verifica se o número está no intervalo [0, 10]
        if (number >= 0 && number <= 10) {
            return number; // Retorna o número se estiver dentro do intervalo
        } else {
            printf("Número fora do intervalo. Tente novamente.\n");
        }
    }
}



6.9. Escreva uma função com o cabeçalho:
int readnumber(int lower_boundary, int upper_boundary)

que lê um número inteiro no intervalo [lower_boundary, upper_boundary] e retorna esse número como valor de retorno da função.
Também neste caso, a função só pode parar de pedir um número inteiro se um valor correto for inserido. Escreva uma função principal
que chame essa função e imprima o número resultante.



#include <stdio.h>

// Função para ler um número inteiro dentro do intervalo [lower_boundary, upper_boundary]
int readnumber(int lower_boundary, int upper_boundary) {
    int number;

    while (1) {
        // Solicita ao usuário que insira um número
        printf("Digite um número entre %d e %d: ", lower_boundary, upper_boundary);
        scanf("%d", &number);

        // Verifica se o número está dentro do intervalo
        if (number >= lower_boundary && number <= upper_boundary) {
            return number; // Retorna o número se estiver dentro do intervalo
        } else {
            printf("Número fora do intervalo. Tente novamente.\n");
        }
    }
}

int main() {
    int lower_boundary, upper_boundary;

    // Ler os limites do intervalo do usuário
    printf("Digite o limite inferior do intervalo: ");
    scanf("%d", &lower_boundary);
    printf("Digite o limite superior do intervalo: ");
    scanf("%d", &upper_boundary);

    // Garantir que o limite inferior não seja maior que o limite superior
    if (lower_boundary > upper_boundary) {
        printf("O limite inferior deve ser menor ou igual ao limite superior.\n");
        return 1; // Encerrar o programa com um código de erro
    }

    // Chamar a função readnumber e obter um número válido dentro do intervalo
    int valid_number = readnumber(lower_boundary, upper_boundary);

    // Imprimir o número resultante
    printf("Número válido dentro do intervalo: %d\n", valid_number);

    return 0;
}



6.10. Escreva uma função com o cabeçalho:

double exponentiation(double base, int exponent)

que retorna base^exponent como valor de retorno da função. Escreva uma função principal que leia uma base e um expoente, chame a
função exponentiation e imprima o resultado. Não use a função padrão pow!


#include <stdio.h>

// Função para calcular a exponenciação
double exponentiation(double base, int exponent) {
    double result = 1.0;

    // Se o expoente é zero, qualquer número elevado a zero é 1
    if (exponent == 0) {
        return 1.0;
    }

    // Se o expoente é negativo, calcular a exponenciação para o expoente positivo e inverter o resultado
    if (exponent < 0) {
        base = 1 / base;
        exponent = -exponent;
    }

    // Multiplica a base por si mesma expoente vezes
    for (int i = 0; i < exponent; i++) {
        result *= base;
    }

    return result;
}

int main() {
    double base;
    int exponent;

    // Ler a base e o expoente do usuário
    printf("Digite a base: ");
    scanf("%lf", &base);
    printf("Digite o expoente: ");
    scanf("%d", &exponent);

    // Calcular a exponenciação
    double resultado = exponentiation(base, exponent);

    // Imprimir o resultado
    printf("%.2lf elevado a %d é %.2lf\n", base, exponent, resultado);

    return 0;
}



6.11. Escreva uma função com o cabeçalho:

int gcd(int number1, int number2)

que retorna o maior divisor comum dos números number1 e number2 como valor de retorno da função. Escreva um programa principal
que leia 3 números inteiros, calcule o MDC (máximo divisor comum) desses 3 números e imprima o resultado. Dica: gcd(a, b, c) = gcd(a,
gcd(b, c))



#include <stdio.h>

// Função para calcular o Máximo Divisor Comum (MDC) de dois números usando o Algoritmo de Euclides
int gcd(int number1, int number2) {
    int temp;

    while (number2 != 0) {
        temp = number2;
        number2 = number1 % number2;
        number1 = temp;
    }

    return number1;
}

int main() {
    int num1, num2, num3;

    // Ler três números inteiros do usuário
    printf("Digite o primeiro número: ");
    scanf("%d", &num1);
    printf("Digite o segundo número: ");
    scanf("%d", &num2);
    printf("Digite o terceiro número: ");
    scanf("%d", &num3);

    // Calcular o MDC dos três números
    int mdc12 = gcd(num1, num2); // MDC dos dois primeiros números
    int mdc123 = gcd(mdc12, num3); // MDC do resultado anterior com o terceiro número

    // Imprimir o resultado
    printf("O Máximo Divisor Comum dos números %d, %d e %d é %d.\n", num1, num2, num3, mdc123);

    return 0;
}



6.12. Escreva um programa que leia uma quantidade de pontuações. As pontuações são todos números inteiros positivos. Um número
negativo é inserido para indicar que todas as pontuações foram inseridas. Para cada pontuação, uma barra com um comprimento igual
à pontuação é desenhada. Para isso, um símbolo pré-definido precisa ser impresso tantas vezes quanto a pontuação. (uso de laço for).

Escreva uma função draw_bar que recebe uma pontuação como entrada e desenha uma barra com o comprimento correspondente.

As pontuações e o símbolo desejado são lidos na função principal.

O diálogo na tela deve ser como:

Digite as pontuações: 2 12 18 3 -5
Que símbolo você gostaria de usar? =

pontuação = 2 ==
pontuação = 12 ============
pontuação = 18 ==================
pontuação = 3 ===


#include <stdio.h>

// Função para desenhar uma barra com o comprimento correspondente à pontuação
void draw_bar(int score, char symbol) {
    for (int i = 0; i < score; i++) {
        printf("%c", symbol);
    }
    printf("\n");
}

int main() {
    int score;
    char symbol;
    
    // Solicita ao usuário as pontuações e lê o símbolo desejado
    printf("Digite as pontuações (digite um número negativo para terminar): ");
    while (scanf("%d", &score) && score >= 0) {
        // Aqui estamos processando cada pontuação enquanto não é negativa
        // O código assume que os números são inseridos um por um e segue até o negativo ser encontrado

        // Solicita o símbolo desejado
        printf("Que símbolo você gostaria de usar? ");
        scanf(" %c", &symbol); // O espaço antes de %c é para consumir o caractere de nova linha deixado no buffer

        // Desenha a barra para a pontuação atual
        printf("pontuação = %d ", score);
        draw_bar(score, symbol);
    }

    return 0;
}


6.13. Escreva um programa com as funções:

•hello: que dá as boas-vindas ao usuário e explica o que é esperado

•main: que pede ao usuário para inserir 5 vezes 2 números

•sum: que pede ao usuário para inserir a soma dos números anteriormente inseridos e dá um feedback ao usuário

•goodbye: que agradece ao usuário pela cooperação Bem-vindo, este programa pedirá que você resolva 5 somas. digite 2 números <
100: 15 16 qual é a soma de 15 e 16? 31 segundo você, a soma de 15 e 16 é 31. Isso está correto digite 2 números < 100: 26 32 qual é a
soma de 26 e 32? 50 segundo você, a soma de 26 e 32 é 50. Isso está incorreto ... Obrigado pela sua cooperação

#include <stdio.h>

// Função para dar as boas-vindas ao usuário e explicar o que é esperado
void hello() {
    printf("Bem-vindo, este programa pedirá que você resolva 5 somas.\n");
    printf("Digite dois números menores que 100. Em seguida, você será solicitado a fornecer a soma desses números.\n");
}

// Função para pedir ao usuário para inserir a soma dos números e dar feedback
void sum(int num1, int num2) {
    int resposta;
    int soma = num1 + num2;
    
    printf("Qual é a soma de %d e %d? ", num1, num2);
    scanf("%d", &resposta);

    if (resposta == soma) {
        printf("Segundo você, a soma de %d e %d é %d. Isso está correto.\n", num1, num2, resposta);
    } else {
        printf("Segundo você, a soma de %d e %d é %d. Isso está incorreto. A resposta correta é %d.\n", num1, num2, resposta, soma);
    }
}

// Função para agradecer ao usuário pela cooperação
void goodbye() {
    printf("Obrigado pela sua cooperação.\n");
}

int main() {
    int num1, num2;
    
    // Chama a função hello para dar boas-vindas
    hello();

    // Loop para pedir 5 vezes que o usuário insira dois números e verifique a soma
    for (int i = 0; i < 5; i++) {
        printf("Digite 2 números < 100: ");
        scanf("%d %d", &num1, &num2);

        // Verifica se os números estão dentro do intervalo esperado
        if (num1 >= 100 || num2 >= 100) {
            printf("Números fora do intervalo permitido. Tente novamente.\n");
            i--; // Decrementa o contador para repetir a iteração
            continue;
        }

        // Chama a função sum para verificar a soma
        sum(num1, num2);
    }

    // Chama a função goodbye para agradecer ao usuário
    goodbye();

    return 0;
}



6.14. Como um ano não tem exatamente 365 dias, temos um ano bissexto a cada 4 anos, exceto se o ano for divisível por 100. Se o ano for divisível por 400, o ano é
considerado bissexto mesmo assim. Escreva uma função com o cabeçalho:
int isLeapYear(int year)
que determina se um ano é bissexto ou não e dá um valor de retorno diferente para ambos os casos. Escreva também uma função com o cabeçalho:
int numberOfDays(int month, int year)

#include <stdio.h>

// Função para verificar se um ano é bissexto
int isLeapYear(int year) {
    if (year % 400 == 0) {
        return 1; // Ano bissexto
    } else if (year % 100 == 0) {
        return 0; // Não é bissexto
    } else if (year % 4 == 0) {
        return 1; // Ano bissexto
    } else {
        return 0; // Não é bissexto
    }
}

// Função para obter o número de dias em um mês
int numberOfDays(int month, int year) {
    switch (month) {
        case 1:  // Janeiro
        case 3:  // Março
        case 5:  // Maio
        case 7:  // Julho
        case 8:  // Agosto
        case 10: // Outubro
        case 12: // Dezembro
            return 31;
        case 4:  // Abril
        case 6:  // Junho
        case 9:  // Setembro
        case 11: // Novembro
            return 30;
        case 2:  // Fevereiro
            if (isLeapYear(year)) {
                return 29; // Fevereiro em ano bissexto
            } else {
                return 28; // Fevereiro em ano não bissexto
            }
        default:
            return 0; // Mês inválido
    }
}

int main() {
    int ano, mes;

    // Ler o ano e o mês
    printf("Digite o ano: ");
    scanf("%d", &ano);
    printf("Digite o mês: ");
    scanf("%d", &mes);

    // Verificar se o ano é bissexto
    if (isLeapYear(ano)) {
        printf("%d é um ano bissexto.\n", ano);
    } else {
        printf("%d não é um ano bissexto.\n", ano);
    }

    // Obter o número de dias no mês
    int dias = numberOfDays(mes, ano);
    if (dias == 0) {
        printf("Mês inválido.\n");
    } else {
        printf"O mês %d de %d tem %d dias.\n", mes, ano, dias);
    }

    return 0;
}



6.15. Escreva uma função com 3 números inteiros que representam um dia, mês e ano. Essa função calcula e retorna um fator de acordo com a seguinte fórmula:
Para os meses de Janeiro e Fevereiro:
fator = 365 * year + day + 31 * (month - 1) + [year - 1 / 4] - [[year - 1 / 100 + 1] * 3 / 4]
Para os meses de Março a Dezembro:
fator = 365 * year + day + 31 * (month - 1) - [0.4 * month + 2.3] + [year / 4] - [[year / 100 + 1] * 3 / 4]

#include <stdio.h>
#include <math.h> // Para a função floor

// Função para calcular o fator
int calcular_fator(int dia, int mes, int ano) {
    int fator;

    if (mes == 1 || mes == 2) {
        // Fórmula para Janeiro e Fevereiro
        fator = 365 * ano + dia + 31 * (mes - 1) + floor((ano - 1) / 4.0) - floor((ano - 1) / 100.0 + 1) * 3 / 4;
    } else {
        // Fórmula para Março a Dezembro
        fator = 365 * ano + dia + 31 * (mes - 1) - floor(0.4 * mes + 2.3) + floor(ano / 4.0) - floor(ano / 100.0 + 1) * 3 / 4;
    }

    return fator;
}

int main() {
    int dia, mes, ano;

    // Ler o dia, mês e ano
    printf("Digite o dia: ");
    scanf("%d", &dia);
    printf("Digite o mês: ");
    scanf("%d", &mes);
    printf("Digite o ano: ");
    scanf("%d", &ano);

    // Calcular o fator
    int fator = calcular_fator(dia, mes, ano);

    // Imprimir o resultado
    printf("O fator calculado é: %d\n", fator);

    return 0;
}


Escreva uma função principal que leia 2 datas, calcule o número de dias entre essas 2 datas calculando a diferença entre os 2 fatores das datas correspondentes.

#include <stdio.h>
#include <math.h> // Para a função floor

// Função para calcular o fator
int calcular_fator(int dia, int mes, int ano) {
    int fator;

    if (mes == 1 || mes == 2) {
        // Fórmula para Janeiro e Fevereiro
        fator = 365 * ano + dia + 31 * (mes - 1) + floor((ano - 1) / 4.0) - floor((ano - 1) / 100.0 + 1) * 3 / 4;
    } else {
        // Fórmula para Março a Dezembro
        fator = 365 * ano + dia + 31 * (mes - 1) - floor(0.4 * mes + 2.3) + floor(ano / 4.0) - floor(ano / 100.0 + 1) * 3 / 4;
    }

    return fator;
}

int main() {
    int dia1, mes1, ano1;
    int dia2, mes2, ano2;

    // Ler a primeira data
    printf("Digite o dia da primeira data: ");
    scanf("%d", &dia1);
    printf("Digite o mês da primeira data: ");
    scanf("%d", &mes1);
    printf("Digite o ano da primeira data: ");
    scanf("%d", &ano1);

    // Ler a segunda data
    printf("Digite o dia da segunda data: ");
    scanf("%d", &dia2);
    printf("Digite o mês da segunda data: ");
    scanf("%d", &mes2);
    printf("Digite o ano da segunda data: ");
    scanf("%d", &ano2);

    // Calcular os fatores para cada data
    int fator1 = calcular_fator(dia1, mes1, ano1);
    int fator2 = calcular_fator(dia2, mes2, ano2);

    // Calcular a diferença em dias
    int dias_entre = abs(fator1 - fator2);

    // Imprimir o resultado
    printf("Número de dias entre as duas datas: %d\n", dias_entre);

    return 0;
}




6.16. Considere o primeiro quadrante de um círculo em um quadrado com lado 1. Se você gerar uma grande quantidade de coordenadas (x, y) com x e y pertencendo ao
intervalo [0, 1], você terá uma coleção de pontos pertencentes ao quadrado. Se você contar todos os pontos que pertencem ao quadrante do círculo com equação x2 + y2 <
1 e dividir essa quantidade pelo número total de pontos gerados, você encontrará aproximadamente o número π/4.
• Escreva um programa que gera 100.000 pontos e usa isso para calcular o número π aproximadamente.
• Execute o programa várias vezes e compare os resultados.
• E se você aumentar o número de pontos?


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define NUM_PONTOS 100000

int main() {
    int pontos_dentro_circulo = 0;
    double x, y;

    // Inicializa o gerador de números aleatórios
    srand(time(NULL));

    // Gera os pontos e conta quantos estão dentro do círculo
    for (int i = 0; i < NUM_PONTOS; i++) {
        x = (double)rand() / RAND_MAX; // Gera um número aleatório entre 0 e 1
        y = (double)rand() / RAND_MAX; // Gera um número aleatório entre 0 e 1

        if (x * x + y * y < 1) {
            pontos_dentro_circulo++;
        }
    }

    // Estima o valor de pi
    double pi_estimado = 4.0 * pontos_dentro_circulo / NUM_PONTOS;

    // Imprime o resultado
    printf("Número estimado de pi: %f\n", pi_estimado);

    return 0;
}



6.17. Escreva um programa que peça ao usuário para escolher entre 3 opções:
1.Desenhar um quadrado vazio
2.Desenhar um quadrado preenchido
3.Parar O programa se repete até que o usuário escolha a opção 3 (Parar). Use as funções empty_square e filled_square.

#include <stdio.h>

// Função para desenhar um quadrado vazio
void empty_square(int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            // Se for a primeira ou última linha ou primeira ou última coluna
            if (i == 0 || i == tamanho - 1 || j == 0 || j == tamanho - 1) {
                printf("*");
            } else {
                printf(" ");
            }
        }
        printf("\n");
    }
}

// Função para desenhar um quadrado preenchido
void filled_square(int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            printf("*");
        }
        printf("\n");
    }
}

int main() {
    int opcao;
    int tamanho;

    do {
        // Menu de opções
        printf("\nEscolha uma opção:\n");
        printf("1. Desenhar um quadrado vazio\n");
        printf("2. Desenhar um quadrado preenchido\n");
        printf("3. Parar\n");
        printf("Opção: ");
        scanf("%d", &opcao);

        // Verifica a opção escolhida
        switch (opcao) {
            case 1:
                // Desenhar quadrado vazio
                printf("Digite o tamanho do quadrado: ");
                scanf("%d", &tamanho);
                empty_square(tamanho);
                break;
            case 2:
                // Desenhar quadrado preenchido
                printf("Digite o tamanho do quadrado: ");
                scanf("%d", &tamanho);
                filled_square(tamanho);
                break;
            case 3:
                // Parar o programa
                printf("Encerrando o programa...\n");
                break;
            default:
                // Opção inválida
                printf("Opção inválida! Tente novamente.\n");
                break;
        }

    } while (opcao != 3);

    return 0;
}




----------------------------------------------------------------------------------------------
LISTA 5 


7.1. Escreva um programa que leia as temperaturas de uma semana inteira em um array temperature[] e imprima a
temperatura média dessa semana.
Digite a temperatura para o dia 0: 5
Digite a temperatura para o dia 1: 5
Digite a temperatura para o dia 2: 5
Digite a temperatura para o dia 3: 5
Digite a temperatura para o dia 4: 6
Digite a temperatura para o dia 5: 6
Digite a temperatura para o dia 6: 6
A temperatura média para esta semana é 5.43


#include <stdio.h>

int main() {
    const int NUM_DIAS = 7;
    double temperatura[NUM_DIAS], soma = 0;

    // Lendo as temperaturas
    for (int i = 0; i < NUM_DIAS; i++) {
        printf("Digite a temperatura para o dia %d: ", i);
        scanf("%lf", &temperatura[i]);
        soma += temperatura[i];
    }

    // Calculando a média
    double media = soma / NUM_DIAS;

    // Imprimindo o resultado
    printf("A temperatura média para esta semana é %.2lf\n", media);

    return 0;
}

7.2. Altere o exercício anterior de forma que todos os dias com uma temperatura superior a 10°C sejam impressos.
Digite a temperatura para o dia 0: 1
Digite a temperatura para o dia 1: 8
Digite a temperatura para o dia 2: 10
Digite a temperatura para o dia 3: 12 Todos os dias com temperatura > 10°C: dia 03
Digite a temperatura para o dia 4: 15 dia 04
Digite a temperatura para o dia 5: 14 dia 05
Digite a temperatura para o dia 6: 9


#include <stdio.h>

int main() {
    const int NUM_DIAS = 7;
    double temperatura[NUM_DIAS];

    printf("Digite as temperaturas para cada dia da semana:\n");
    for (int i = 0; i < NUM_DIAS; i++) {
        printf("Dia %d: ", i);
        scanf("%lf", &temperatura[i]);
    }

    printf("\nTodos os dias com temperatura > 10°C:\n");
    for (int i = 0; i < NUM_DIAS; i++) {
        if (temperatura[i] > 10) {
            printf("Dia %d\n", i);
        }
    }

    return 0;
}

7.3. Repita o exercício 7.1 usando 2 funções. Crie uma função para ler as temperaturas e uma função separada para calcular a
temperatura média. A impressão da média deve ser feita no programa principal.

#include <stdio.h>

void lerTemperaturas(double temperaturas[], int numDias) {
    for (int i = 0; i < numDias; i++) {
        printf("Digite a temperatura para o dia %d: ", i);
        scanf("%lf", &temperaturas[i]);
    }
}

double calcularMedia(double temperaturas[], int numDias) {
    double soma = 0;
    for (int i = 0; i < numDias; i++) {
        soma += temperaturas[i];
    }
    return soma / numDias;
}

int main() {
    const int NUM_DIAS = 7;
    double temperaturas[NUM_DIAS];

    lerTemperaturas(temperaturas, NUM_DIAS);

    double media = calcularMedia(temperaturas, NUM_DIAS);

    printf("A temperatura média para esta semana é %.2lf\n", media);

    return 0;
}

7.4. Repita o exercício 7.2, mas desta vez, use 3 funções separadas para ler as temperaturas (ReadTemp), determinar quais dias estão
mais quentes que 10°C (Calculate) e imprimir os dias encontrados (PrintDays). Extra: peça ao usuário para inserir um limite de
temperatura.


#include <stdio.h>

void ReadTemp(double temperaturas[], int numDias) {
    for (int i = 0; i < numDias; i++) {
        printf("Digite a temperatura para o dia %d: ", i + 1); // Dias começando de 1
        scanf("%lf", &temperaturas[i]);
    }
}

void Calculate(double temperaturas[], int numDias, double limite, int diasQuentes[]) {
    int count = 0;
    for (int i = 0; i < numDias; i++) {
        if (temperaturas[i] > limite) {
            diasQuentes[count++] = i + 1; // Salva o dia com temperatura acima do limite (1 baseado)
        }
    }
    diasQuentes[count] = -1; // Marca o fim da lista com -1
}

void PrintDays(int diasQuentes[], double limite) {
    printf("\nDias com temperatura acima de %.1lf°C:\n", limite);
    for (int i = 0; diasQuentes[i] != -1; i++) {
        printf("Dia %d\n", diasQuentes[i]);
    }
}

int main() {
    const int NUM_DIAS = 7;
    double temperaturas[NUM_DIAS];
    int diasQuentes[NUM_DIAS + 1]; // +1 para acomodar o marcador de fim
    double limite;

    // Solicita o limite de temperatura ao usuário
    printf("Digite o limite de temperatura: ");
    scanf("%lf", &limite);

    // Funções chamadas para ler, calcular e imprimir
    ReadTemp(temperaturas, NUM_DIAS);
    Calculate(temperaturas, NUM_DIAS, limite, diasQuentes);
    PrintDays(diasQuentes, limite);

    return 0;
}



7.5. Escreva um programa com a função principal:

#include <stdio.h>
#define SIZE 12
#define COLUMNS 3
void ReadArray(int [], int);
void PrintMatrix(int [], int, int);
int main(void)
{ int a[SIZE];
ReadArray(a, SIZE);
PrintMatrix(a, SIZE, COLUMNS);
return 0;
}



• A função ReadArray lê 12 (SIZE) números e os armazena no array unidimensional a.

• A função PrintMatrix imprime os 12 números em 4 linhas de 3 (COLUMNS) números cada. Adaptando apenas SIZE e COLUMNS, o
programa deve também ser capaz de imprimir, por exemplo, 20 números em uma matriz 5 x 4.

#include <stdio.h>
#define SIZE 12
#define COLUMNS 3

// Função para ler números inteiros no array
void ReadArray(int array[], int size) {
    printf("Digite %d números inteiros:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
}

// Função para imprimir o array como uma matriz
void PrintMatrix(int array[], int size, int columns) {
    printf("Matriz formatada:\n");
    for (int i = 0; i < size; i++) {
        if (i % columns == 0 && i != 0) {
            printf("\n"); // Quebra de linha após cada número de colunas
        }
        printf("%4d", array[i]); // Imprime o número com largura de 4 para alinhamento
    }
    printf("\n"); // Adiciona uma linha em branco após a matriz
}

int main(void) {
    int a[SIZE];
    ReadArray(a, SIZE);
    PrintMatrix(a, SIZE, COLUMNS);
    return 0;
}


7.6. Altere o exercício 7.5 para que, após cada linha, a soma de todos os elementos daquela linha seja impressa.

#include <stdio.h>
#define SIZE 12
#define COLUMNS 3

// Função para ler números inteiros no array
void ReadArray(int array[], int size) {
    printf("Digite %d números inteiros:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
}

// Função para imprimir o array como uma matriz e a soma de cada linha
void PrintMatrix(int array[], int size, int columns) {
    printf("Matriz formatada:\n");
    int rowSum = 0;
    
    for (int i = 0; i < size; i++) {
        if (i % columns == 0 && i != 0) {
            // Imprime a soma da linha anterior e quebra de linha
            printf(" | Soma da linha: %d\n", rowSum);
            rowSum = 0; // Reseta a soma para a próxima linha
        }
        printf("%4d", array[i]); // Imprime o número com largura de 4 para alinhamento
        rowSum += array[i]; // Adiciona o número à soma da linha
    }
    
    // Imprime a soma da última linha
    printf(" | Soma da linha: %d\n", rowSum);
    printf("\n"); // Adiciona uma linha em branco após a matriz
}

int main(void) {
    int a[SIZE];
    ReadArray(a, SIZE);
    PrintMatrix(a, SIZE, COLUMNS);
    return 0;
}


7.7. Altere o exercício 7.6 para que, sob cada coluna, a soma de todos os elementos daquela coluna seja impressa.

#include <stdio.h>
#define SIZE 12
#define COLUMNS 3

// Função para ler números inteiros no array
void ReadArray(int array[], int size) {
    printf("Digite %d números inteiros:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
}

// Função para imprimir o array como uma matriz e calcular as somas das linhas e colunas
void PrintMatrix(int array[], int size, int columns) {
    int rows = size / columns; // Calcula o número de linhas
    int rowSum = 0;
    int columnSum[columns]; // Array para armazenar a soma de cada coluna
    
    // Inicializa o array de soma das colunas
    for (int i = 0; i < columns; i++) {
        columnSum[i] = 0;
    }
    
    printf("Matriz formatada:\n");
    
    for (int i = 0; i < size; i++) {
        if (i % columns == 0 && i != 0) {
            // Imprime a soma da linha anterior e quebra de linha
            printf(" | Soma da linha: %d\n", rowSum);
            rowSum = 0; // Reseta a soma para a próxima linha
        }
        printf("%4d", array[i]); // Imprime o número com largura de 4 para alinhamento
        rowSum += array[i]; // Adiciona o número à soma da linha
        
        // Adiciona o número à soma da coluna correspondente
        columnSum[i % columns] += array[i];
    }
    
    // Imprime a soma da última linha
    printf(" | Soma da linha: %d\n", rowSum);
    
    // Imprime a soma das colunas
    printf("\nSoma das colunas:\n");
    for (int i = 0; i < columns; i++) {
        printf("Coluna %d: %d\n", i + 1, columnSum[i]);
    }
    
    printf("\n"); // Adiciona uma linha em branco após a matriz
}

int main(void) {
    int a[SIZE];
    ReadArray(a, SIZE);
    PrintMatrix(a, SIZE, COLUMNS);
    return 0;
}



7.8. Escreva um programa com uma função principal e 3 funções adicionais.
•Na função principal, um array de 100 inteiros é declarado e as 3 funções adicionais são chamadas.
•A primeira função lê 1 inteiro no intervalo [0, 100]. Este inteiro representa o número efetivo de elementos que o array conterá. Esse
inteiro precisa ser retornado ao programa principal.
•A segunda função lê o número correto de inteiros e os armazena no array.
•A terceira função imprime os inteiros lidos anteriormente. A função principal é parecida com:

int main(void)
{
int row[MAX];
int size;
size = ReadSize(0, MAX);
ReadArray(row, size);
PrintArray(row, size);
return 0;
}



#include <stdio.h>

#define MAX 100

// Função para ler o tamanho do array
int ReadSize(int lower_bound, int upper_bound) {
    int size;
    do {
        printf("Digite o número de elementos no intervalo [%d, %d]: ", lower_bound, upper_bound);
        scanf("%d", &size);
    } while (size < lower_bound || size > upper_bound);
    return size;
}

// Função para ler os elementos do array
void ReadArray(int array[], int size) {
    printf("Digite %d números inteiros:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
}

// Função para imprimir os elementos do array
void PrintArray(int array[], int size) {
    printf("Os números lidos são:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main(void) {
    int row[MAX];
    int size;

    size = ReadSize(0, MAX); // Lê o tamanho do array
    ReadArray(row, size);    // Lê os elementos do array
    PrintArray(row, size);   // Imprime os elementos do array

    return 0;
}


7.9. O mesmo que o exercício 7.8, mas sem pedir ao usuário para inserir o número efetivo de inteiros. O usuário insere os inteiros e
termina com 999 para indicar o fim do processo de leitura. 999 NÃO pode ser armazenado no array! A função principal é parecida com:

int main(void)
{
int row[MAX];
int size;
size = ReadArray(row);
PrintArray(row, size);
return 0;
}


#include <stdio.h>

#define MAX 100

// Função para ler os elementos do array até que o usuário insira 999
int ReadArray(int array[]) {
    int num;
    int count = 0;
    
    printf("Digite os números inteiros (999 para parar):\n");
    
    while (count < MAX) {
        scanf("%d", &num);
        
        if (num == 999) {
            break; // Termina a leitura quando o usuário insere 999
        }
        
        array[count] = num; // Armazena o número no array
        count++; // Incrementa o contador de elementos
    }
    
    return count; // Retorna o número de elementos lidos
}

// Função para imprimir os elementos do array
void PrintArray(int array[], int size) {
    printf("Os números lidos são:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main(void) {
    int row[MAX];
    int size;

    size = ReadArray(row); // Lê os elementos do array
    PrintArray(row, size); // Imprime os elementos do array

    return 0;
}


7.10. Adicione uma função extra ao exercício 7.9 que calcula o valor médio de todos os inteiros inseridos e retorna esse valor médio
para a função principal. A média deve ser impressa na função principal. O cabeçalho dessa função extra pode ser assim:

double CalcMean(int row[], int size)


#include <stdio.h>

#define MAX 100

// Função para ler os elementos do array até que o usuário insira 999
int ReadArray(int array[]) {
    int num;
    int count = 0;
    
    printf("Digite os números inteiros (999 para parar):\n");
    
    while (count < MAX) {
        scanf("%d", &num);
        
        if (num == 999) {
            break; // Termina a leitura quando o usuário insere 999
        }
        
        array[count] = num; // Armazena o número no array
        count++; // Incrementa o contador de elementos
    }
    
    return count; // Retorna o número de elementos lidos
}

// Função para imprimir os elementos do array
void PrintArray(int array[], int size) {
    printf("Os números lidos são:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

// Função para calcular o valor médio dos inteiros no array
double CalcMean(int row[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += row[i];
    }
    return (size > 0) ? (double)sum / size : 0.0; // Evita divisão por zero
}

int main(void) {
    int row[MAX];
    int size;
    double mean;

    size = ReadArray(row); // Lê os elementos do array
    PrintArray(row, size); // Imprime os elementos do array
    
    mean = CalcMean(row, size); // Calcula a média
    printf("A média dos números lidos é: %.2f\n", mean); // Imprime a média

    return 0;
}



7.11. Repita o exercício 7.10, mas desta vez, escreva uma função que procura o valor máximo de todos os inteiros inseridos e retorna
esse valor máximo para a função principal.


#include <stdio.h>

#define MAX 100

// Função para ler os elementos do array até que o usuário insira 999
int ReadArray(int array[]) {
    int num;
    int count = 0;
    
    printf("Digite os números inteiros (999 para parar):\n");
    
    while (count < MAX) {
        scanf("%d", &num);
        
        if (num == 999) {
            break; // Termina a leitura quando o usuário insere 999
        }
        
        array[count] = num; // Armazena o número no array
        count++; // Incrementa o contador de elementos
    }
    
    return count; // Retorna o número de elementos lidos
}

// Função para imprimir os elementos do array
void PrintArray(int array[], int size) {
    printf("Os números lidos são:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

// Função para calcular o valor médio dos inteiros no array
double CalcMean(int row[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += row[i];
    }
    return (size > 0) ? (double)sum / size : 0.0; // Evita divisão por zero
}

// Função para encontrar o valor máximo dos inteiros no array
int FindMax(int row[], int size) {
    if (size == 0) {
        return -1; // Retorna -1 se o array estiver vazio
    }
    
    int max = row[0]; // Assume que o primeiro elemento é o maior
    
    for (int i = 1; i < size; i++) {
        if (row[i] > max) {
            max = row[i]; // Atualiza o valor máximo
        }
    }
    
    return max;
}

int main(void) {
    int row[MAX];
    int size;
    double mean;
    int max;

    size = ReadArray(row); // Lê os elementos do array
    PrintArray(row, size); // Imprime os elementos do array
    
    mean = CalcMean(row, size); // Calcula a média
    printf("A média dos números lidos é: %.2f\n", mean); // Imprime a média
    
    max = FindMax(row, size); // Encontra o valor máximo
    printf("O valor máximo dos números lidos é: %d\n", max); // Imprime o valor máximo

    return 0;
}


7.12. Escreva um programa com funções que mescla 2 listas ordenadas (ordenadas do menor para o maior) em 1 lista ordenada.

Digite a lista ordenada: 5 9 12 54 78
Digite a lista ordenada: 2 3 34 45 102
A lista mesclada é: 2 3 5 9 12 34 45 54 78 102

#include <stdio.h>

#define MAX_SIZE 100

// Função para ler uma lista ordenada
void ReadSortedList(int list[], int *size) {
    printf("Digite a lista ordenada (Digite -1 para parar):\n");
    int num;
    *size = 0;
    
    while (*size < MAX_SIZE) {
        scanf("%d", &num);
        if (num == -1) {
            break;
        }
        list[*size] = num;
        (*size)++;
    }
}

// Função para mesclar duas listas ordenadas em uma lista ordenada
void MergeLists(int list1[], int size1, int list2[], int size2, int mergedList[], int *mergedSize) {
    int i = 0, j = 0, k = 0;
    
    while (i < size1 && j < size2) {
        if (list1[i] <= list2[j]) {
            mergedList[k++] = list1[i++];
        } else {
            mergedList[k++] = list2[j++];
        }
    }
    
    while (i < size1) {
        mergedList[k++] = list1[i++];
    }
    
    while (j < size2) {
        mergedList[k++] = list2[j++];
    }
    
    *mergedSize = k;
}

// Função para imprimir uma lista
void PrintList(int list[], int size) {
    printf("A lista mesclada é:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");
}

int main(void) {
    int list1[MAX_SIZE], list2[MAX_SIZE], mergedList[MAX_SIZE * 2];
    int size1, size2, mergedSize;
    
    // Leitura das duas listas ordenadas
    printf("Digite a primeira lista ordenada:\n");
    ReadSortedList(list1, &size1);
    
    printf("Digite a segunda lista ordenada:\n");
    ReadSortedList(list2, &size2);
    
    // Mescla as duas listas
    MergeLists(list1, size1, list2, size2, mergedList, &mergedSize);
    
    // Imprime a lista mesclada
    PrintList(mergedList, mergedSize);
    
    return 0;
}


7.13. Adicione uma função extra ao exercício 7.9 ou 7.10 para que, antes da impressão, os maiores e menores inteiros sejam trocados
de lugar. A troca deve acontecer dentro do array, não use um segundo array. O uso de uma variável auxiliar é permitido.

#include <stdio.h>

#define MAX_SIZE 100

// Função para ler uma lista ordenada
void ReadSortedList(int list[], int *size) {
    printf("Digite a lista ordenada (Digite -1 para parar):\n");
    int num;
    *size = 0;
    
    while (*size < MAX_SIZE) {
        scanf("%d", &num);
        if (num == -1) {
            break;
        }
        list[*size] = num;
        (*size)++;
    }
}

// Função para mesclar duas listas ordenadas em uma lista ordenada
void MergeLists(int list1[], int size1, int list2[], int size2, int mergedList[], int *mergedSize) {
    int i = 0, j = 0, k = 0;
    
    while (i < size1 && j < size2) {
        if (list1[i] <= list2[j]) {
            mergedList[k++] = list1[i++];
        } else {
            mergedList[k++] = list2[j++];
        }
    }
    
    while (i < size1) {
        mergedList[k++] = list1[i++];
    }
    
    while (j < size2) {
        mergedList[k++] = list2[j++];
    }
    
    *mergedSize = k;
}

// Função para imprimir uma lista
void PrintList(int list[], int size) {
    printf("A lista mesclada é:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");
}

// Função para trocar o menor e o maior valor no array
void SwapMinMax(int list[], int size) {
    if (size <= 1) return; // Não faz sentido trocar em arrays com 0 ou 1 elemento
    
    int minIndex = 0;
    int maxIndex = 0;
    
    // Encontrar os índices do menor e do maior valor
    for (int i = 1; i < size; i++) {
        if (list[i] < list[minIndex]) {
            minIndex = i;
        }
        if (list[i] > list[maxIndex]) {
            maxIndex = i;
        }
    }
    
    // Trocar os valores
    if (minIndex != maxIndex) {
        int temp = list[minIndex];
        list[minIndex] = list[maxIndex];
        list[maxIndex] = temp;
    }
}

int main(void) {
    int list1[MAX_SIZE], list2[MAX_SIZE], mergedList[MAX_SIZE * 2];
    int size1, size2, mergedSize;
    
    // Leitura das duas listas ordenadas
    printf("Digite a primeira lista ordenada:\n");
    ReadSortedList(list1, &size1);
    
    printf("Digite a segunda lista ordenada:\n");
    ReadSortedList(list2, &size2);
    
    // Mescla as duas listas
    MergeLists(list1, size1, list2, size2, mergedList, &mergedSize);
    
    // Troca o menor e o maior valor na lista mesclada
    SwapMinMax(mergedList, mergedSize);
    
    // Imprime a lista mesclada
    PrintList(mergedList, mergedSize);
    
    return 0;
}


7.14. Escreva um programa com funções:
•A primeira função lê 20 números e os armazena em um array.
•A segunda função garante que nenhum dos números no array ocorra mais de uma vez. Para isso, a segunda, terceira, ... ocorrência de
um número é removida do array e todos os outros elementos do array são deslocados para a esquerda.

Digite uma lista de 20 números:
2 5 3 4 6 5 3 4 6 7 2 4 4 5 3 2 1 6 1 7
Os números armazenados no array limpo são:
2 5 3 4 6 7 1


#include <stdio.h>

#define SIZE 20

// Função para ler 20 números e armazená-los em um array
void ReadNumbers(int array[], int size) {
    printf("Digite uma lista de %d números:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }
}

// Função para remover duplicatas e ajustar o array
int RemoveDuplicates(int array[], int size) {
    int newSize = 0; // Novo tamanho do array após remoção de duplicatas
    
    for (int i = 0; i < size; i++) {
        int isDuplicate = 0;
        
        // Verificar se o número já foi encontrado anteriormente
        for (int j = 0; j < newSize; j++) {
            if (array[i] == array[j]) {
                isDuplicate = 1;
                break;
            }
        }
        
        // Se não for duplicado, adicionar ao array de resultados
        if (!isDuplicate) {
            array[newSize++] = array[i];
        }
    }
    
    return newSize; // Retorna o novo tamanho do array sem duplicatas
}

// Função para imprimir o array
void PrintArray(int array[], int size) {
    printf("Os números armazenados no array limpo são:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main(void) {
    int numbers[SIZE];
    int cleanedSize;
    
    // Ler os números
    ReadNumbers(numbers, SIZE);
    
    // Remover duplicatas e obter o tamanho do array limpo
    cleanedSize = RemoveDuplicates(numbers, SIZE);
    
    // Imprimir o array limpo
    PrintArray(numbers, cleanedSize);
    
    return 0;
}


7.15. Escreva um programa que gera 6 números aleatórios diferentes no intervalo [1, 42]. Use um array para armazenar os números e
garantir que todos os 6 números sejam diferentes.


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 6
#define MIN 1
#define MAX 42

void GenerateUniqueRandomNumbers(int array[], int size) {
    int num;
    int isDuplicate;
    int count = 0;
    
    while (count < size) {
        num = rand() % (MAX - MIN + 1) + MIN;
        isDuplicate = 0;
        
        for (int i = 0; i < count; i++) {
            if (array[i] == num) {
                isDuplicate = 1;
                break;
            }
        }
        
        if (!isDuplicate) {
            array[count++] = num;
        }
    }
}

void PrintArray(int array[], int size) {
    printf("Números gerados:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main(void) {
    int numbers[SIZE];
    
    srand(time(NULL));
    
    GenerateUniqueRandomNumbers(numbers, SIZE);
    PrintArray(numbers, SIZE);
    
    return 0;
}


7.16. Escreva um programa com funções. Uma primeira função lê 2 listas de no máximo 10 inteiros positivos. O processo de leitura para
quando um 0 é inserido ou quando 10 inteiros são inseridos. (não armazene o número 0!) Uma segunda função verifica se ambas as
listas contêm números iguais.

Digite uma lista de no máximo 10 inteiros (pare com 0):
4 4 12 9 5 0
Digite uma lista de no máximo 10 inteiros (pare com 0):
9 9 4 12 4 5 9 12 4 4
As listas:
4 4 12 9 5 0
e
9 9 4 12 4 5 9 12 4 4
contêm números iguais.


#include <stdio.h>

#define MAX_SIZE 10

void ReadList(int list[], int *size) {
    int num;
    *size = 0;
    printf("Digite uma lista de no máximo %d inteiros (pare com 0):\n", MAX_SIZE);
    
    while (*size < MAX_SIZE) {
        scanf("%d", &num);
        if (num == 0) {
            break;
        }
        list[*size] = num;
        (*size)++;
    }
}

int ContainsCommonElements(int list1[], int size1, int list2[], int size2) {
    for (int i = 0; i < size1; i++) {
        for (int j = 0; j < size2; j++) {
            if (list1[i] == list2[j]) {
                return 1; // Retorna 1 se encontrar um número comum
            }
        }
    }
    return 0; // Retorna 0 se não encontrar números comuns
}

int main(void) {
    int list1[MAX_SIZE], list2[MAX_SIZE];
    int size1, size2;
    
    ReadList(list1, &size1);
    ReadList(list2, &size2);
    
    if (ContainsCommonElements(list1, size1, list2, size2)) {
        printf("As listas contêm números iguais.\n");
    } else {
        printf("As listas não contêm números iguais.\n");
    }
    
    return 0;
}



7.17. Escreva um programa que simula o lançamento de 2 dados. Lançar 2 dados sempre resulta em um valor entre 2 e 12.
Quantas vezes cada valor possível ocorrerá se os dados forem lançados 400 vezes?

• Declare um array na função principal para manter as ocorrências de cada valor possível.
• Uma primeira função simula 400 lançamentos com 2 dados e calcula os valores. (dica: rand()%6+1 resulta em um número
aleatório de 1 a 6, simulando o lançamento de 1 dado).
• Uma segunda função imprime as ocorrências.
• Extra: imprima um gráfico de barras horizontal com as ocorrências. Use o símbolo # para desenhar as barras. Use uma função
DrawLine para realizar esta parte do programa.

Espero que essas traduções sejam úteis! Se precisar de mais alguma coisa, estou à disposição.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NUM_LANCAMENTOS 400
#define MIN_VALOR 2
#define MAX_VALOR 12
#define TAMANHO (MAX_VALOR - MIN_VALOR + 1)

// Função para simular o lançamento de dois dados
void SimularLancamentos(int ocorrencias[]) {
    for (int i = 0; i < NUM_LANCAMENTOS; i++) {
        int dado1 = rand() % 6 + 1; // Gera um número de 1 a 6
        int dado2 = rand() % 6 + 1; // Gera um número de 1 a 6
        int resultado = dado1 + dado2; // Soma dos resultados dos dois dados
        ocorrencias[resultado - MIN_VALOR]++; // Incrementa a contagem para o resultado
    }
}

// Função para imprimir as ocorrências
void ImprimirOcorrencias(int ocorrencias[]) {
    printf("Ocorrências dos lançamentos:\n");
    for (int i = 0; i < TAMANHO; i++) {
        printf("%2d: %d\n", i + MIN_VALOR, ocorrencias[i]);
    }
}

// Função para desenhar um gráfico de barras horizontal
void DrawLine(int comprimento) {
    for (int i = 0; i < comprimento; i++) {
        printf("#");
    }
    printf("\n");
}

// Função para imprimir o gráfico de barras horizontal
void ImprimirGrafico(int ocorrencias[]) {
    printf("\nGráfico de barras das ocorrências:\n");
    for (int i = 0; i < TAMANHO; i++) {
        printf("%2d: ", i + MIN_VALOR);
        DrawLine(ocorrencias[i] / 10); // Ajuste a escala do gráfico conforme necessário
    }
}

int main(void) {
    int ocorrencias[TAMANHO] = {0}; // Inicializa o array de ocorrências com zeros

    srand(time(NULL)); // Inicializa a semente do gerador de números aleatórios

    SimularLancamentos(ocorrencias);
    ImprimirOcorrencias(ocorrencias);
    ImprimirGrafico(ocorrencias);

    return 0;
}

------------------------------------------------------------------------------------------



lista 6


8.1. Escreva um programa com funções.
• A primeira função lê um nome.
• A segunda função imprime o nome.

#include <stdio.h>

#define MAX_LENGTH 100

void ReadName(char name[]) {
    printf("Digite um nome: ");
    fgets(name, MAX_LENGTH, stdin);
}

void PrintName(const char name[]) {
    printf("Nome digitado: %s", name);
}

int main(void) {
    char name[MAX_LENGTH];
    
    ReadName(name);
    PrintName(name);
    
    return 0;
}



8.2. Leia 3 palavras separadamente em 3 strings diferentes. Crie uma 4a string que contenha as 3 palavras separadas por um
espaço e imprima o conteúdo da 4a string.
Digite a primeira palavra: Isto
Digite a segunda palavra: é
Digite a terceira palavra: isso
Isto é isso



#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 100

void ReadWord(char word[], const char *prompt) {
    printf("%s", prompt);
    fgets(word, MAX_LENGTH, stdin);
    // Remove newline character if present
    size_t length = strlen(word);
    if (length > 0 && word[length - 1] == '\n') {
        word[length - 1] = '\0';
    }
}

int main(void) {
    char word1[MAX_LENGTH];
    char word2[MAX_LENGTH];
    char word3[MAX_LENGTH];
    char result[3 * MAX_LENGTH + 2]; // Enough space for all words and spaces

    ReadWord(word1, "Digite a primeira palavra: ");
    ReadWord(word2, "Digite a segunda palavra: ");
    ReadWord(word3, "Digite a terceira palavra: ");

    snprintf(result, sizeof(result), "%s %s %s", word1, word2, word3);

    printf("%s\n", result);

    return 0;
}




8.3. Escreva uma função com uma string como parâmetro e um inteiro 1 (verdadeiro) ou 0 (falso) como valor de retorno. A
função deve testar se a string inserida é um palíndromo ou não. Um palíndromo é uma palavra que lê-se da mesma forma de
trás para frente. (ex: noon, radar, rotor, racecar, ...) Escreva também uma função principal para testá-la.


#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LENGTH 100

// Função que verifica se a string é um palíndromo
int isPalindrome(const char str[]) {
    int left = 0;
    int right = strlen(str) - 1;
    
    // Verifica se os caracteres da esquerda e da direita são iguais
    while (left < right) {
        // Ignora caracteres não alfabéticos e converte para minúsculas
        while (!isalpha(str[left]) && left < right) {
            left++;
        }
        while (!isalpha(str[right]) && left < right) {
            right--;
        }

        // Compara os caracteres
        if (tolower(str[left]) != tolower(str[right])) {
            return 0; // Não é um palíndromo
        }

        left++;
        right--;
    }
    
    return 1; // É um palíndromo
}

int main(void) {
    char str[MAX_LENGTH];
    
    printf("Digite uma string: ");
    fgets(str, MAX_LENGTH, stdin);
    
    // Remove o caractere de nova linha se presente
    size_t length = strlen(str);
    if (length > 0 && str[length - 1] == '\n') {
        str[length - 1] = '\0';
    }
    
    // Verifica se a string é um palíndromo
    if (isPalindrome(str)) {
        printf("A string é um palíndromo.\n");
    } else {
        printf("A string não é um palíndromo.\n");
    }
    
    return 0;
}


8.4. Repita o exercício 8.3, mas desta vez para frases que sejam palíndromos. Exemplos: “Foi um carro ou um gato que eu vi?”
ou “Eva, posso esfaquear morcegos em uma caverna?” (note que pontuação, capitalização e espaços são ignorados)


#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LENGTH 1000

// Função que verifica se a frase é um palíndromo
int isPalindrome(const char str[]) {
    char filtered[MAX_LENGTH];
    int left = 0, right = 0;
    
    // Filtra e normaliza a string, removendo caracteres não alfabéticos e convertendo para minúsculas
    for (int i = 0; str[i]; i++) {
        if (isalpha(str[i])) {
            filtered[right++] = tolower(str[i]);
        }
    }
    filtered[right] = '\0'; // Termina a string filtrada

    right--; // Ajusta o índice para o último caractere
    
    // Verifica se os caracteres da esquerda e da direita são iguais
    while (left < right) {
        if (filtered[left] != filtered[right]) {
            return 0; // Não é um palíndromo
        }
        left++;
        right--;
    }
    
    return 1; // É um palíndromo
}

int main(void) {
    char str[MAX_LENGTH];
    
    printf("Digite uma frase: ");
    fgets(str, MAX_LENGTH, stdin);
    
    // Remove o caractere de nova linha se presente
    size_t length = strlen(str);
    if (length > 0 && str[length - 1] == '\n') {
        str[length - 1] = '\0';
    }
    
    // Verifica se a frase é um palíndromo
    if (isPalindrome(str)) {
        printf("A frase é um palíndromo.\n");
    } else {
        printf("A frase não é um palíndromo.\n");
    }
    
    return 0;
}


8.5. Repita o exercício 8.3, mas desta vez para frases que formem um palíndromo baseado em palavras. Exemplos: “Ele diz: é
verdade, verdade é, diz ele”

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LENGTH 1000
#define MAX_WORDS 100

// Função para remover caracteres não alfabéticos e separar palavras
int parseWords(const char str[], char words[][MAX_LENGTH], int maxWords) {
    int wordCount = 0;
    int index = 0;

    // Percorre cada caractere da string
    for (int i = 0; str[i] != '\0'; i++) {
        if (isalpha(str[i])) {
            // Adiciona caracteres alfabéticos às palavras
            words[wordCount][index++] = tolower(str[i]);
        } else if (str[i] == ' ' || str[i] == '\0') {
            // Se encontrou um espaço, termina a palavra
            if (index > 0) {
                words[wordCount][index] = '\0';
                wordCount++;
                if (wordCount >= maxWords) break;
                index = 0;
            }
        }
    }
    if (index > 0 && wordCount < maxWords) {
        // Adiciona a última palavra
        words[wordCount][index] = '\0';
        wordCount++;
    }

    return wordCount;
}

// Função para verificar se a lista de palavras é um palíndromo
int isPalindromeWords(char words[][MAX_LENGTH], int wordCount) {
    int left = 0;
    int right = wordCount - 1;

    while (left < right) {
        if (strcmp(words[left], words[right]) != 0) {
            return 0; // Não é um palíndromo
        }
        left++;
        right--;
    }

    return 1; // É um palíndromo
}

int main(void) {
    char str[MAX_LENGTH];
    char words[MAX_WORDS][MAX_LENGTH];
    int wordCount;

    printf("Digite uma frase: ");
    fgets(str, MAX_LENGTH, stdin);

    // Remove o caractere de nova linha se presente
    size_t length = strlen(str);
    if (length > 0 && str[length - 1] == '\n') {
        str[length - 1] = '\0';
    }

    // Analisa a string para separar palavras
    wordCount = parseWords(str, words, MAX_WORDS);

    // Verifica se as palavras formam um palíndromo
    if (isPalindromeWords(words, wordCount)) {
        printf("A frase é um palíndromo baseado em palavras.\n");
    } else {
        printf("A frase não é um palíndromo baseado em palavras.\n");
    }

    return 0;
}



8.6. Escreva um programa que leia uma string e imprima cada palavra dessa string separadamente em uma nova linha.


#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LENGTH 1000

int main(void) {
    char str[MAX_LENGTH];
    char *word;

    printf("Digite uma string: ");
    fgets(str, MAX_LENGTH, stdin);

    size_t length = strlen(str);
    if (length > 0 && str[length - 1] == '\n') {
        str[length - 1] = '\0';
    }

    word = strtok(str, " ");
    while (word != NULL) {
        printf("%s\n", word);
        word = strtok(NULL, " ");
    }

    return 0;
}



8.7. Escreva um programa que leia 2 nomes e os imprima em ordem alfabética.

#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 100

int main(void) {
    char name1[MAX_LENGTH];
    char name2[MAX_LENGTH];
    char temp[MAX_LENGTH];

    printf("Digite o primeiro nome: ");
    fgets(name1, MAX_LENGTH, stdin);

    printf("Digite o segundo nome: ");
    fgets(name2, MAX_LENGTH, stdin);

    // Remove o caractere de nova linha se presente
    size_t length1 = strlen(name1);
    if (length1 > 0 && name1[length1 - 1] == '\n') {
        name1[length1 - 1] = '\0';
    }

    size_t length2 = strlen(name2);
    if (length2 > 0 && name2[length2 - 1] == '\n') {
        name2[length2 - 1] = '\0';
    }

    // Ordena os nomes em ordem alfabética
    if (strcmp(name1, name2) > 0) {
        // Troca os nomes
        strcpy(temp, name1);
        strcpy(name1, name2);
        strcpy(name2, temp);
    }

    // Imprime os nomes em ordem alfabética
    printf("Nomes em ordem alfabética:\n");
    printf("%s\n", name1);
    printf("%s\n", name2);

    return 0;
}


8.8. Repita o exercício 8.7, mas agora com 3 nomes.



#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 100
#define NUM_NAMES 3

void sortNames(char names[][MAX_LENGTH], int numNames) {
    char temp[MAX_LENGTH];
    for (int i = 0; i < numNames - 1; i++) {
        for (int j = i + 1; j < numNames; j++) {
            if (strcmp(names[i], names[j]) > 0) {
                // Troca os nomes
                strcpy(temp, names[i]);
                strcpy(names[i], names[j]);
                strcpy(names[j], temp);
            }
        }
    }
}

int main(void) {
    char names[NUM_NAMES][MAX_LENGTH];

    // Leitura dos nomes
    for (int i = 0; i < NUM_NAMES; i++) {
        printf("Digite o nome %d: ", i + 1);
        fgets(names[i], MAX_LENGTH, stdin);
        
        // Remove o caractere de nova linha se presente
        size_t length = strlen(names[i]);
        if (length > 0 && names[i][length - 1] == '\n') {
            names[i][length - 1] = '\0';
        }
    }

    // Ordena os nomes em ordem alfabética
    sortNames(names, NUM_NAMES);

    // Impressão dos nomes em ordem alfabética
    printf("Nomes em ordem alfabética:\n");
    for (int i = 0; i < NUM_NAMES; i++) {
        printf("%s\n", names[i]);
    }

    return 0;
}



8.9. Repita o exercício 8.8, mas certifique-se de que também os seguintes nomes sejam classificados corretamente: O’Neil, Mac
Alastair, Macbride, mac Caba, O Neal, Orman. Dica: use sua própria função de comparação de strings que primeiro copie as
strings em maiúsculas e sem pontuação e espaços, e use strcmp nas cópias.


#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LENGTH 100
#define NUM_NAMES 6

void normalizeString(char *str, char *normalized) {
    int j = 0;
    for (int i = 0; str[i] != '\0'; i++) {
        if (isalpha(str[i])) {  // Verifica se o caractere é uma letra
            normalized[j++] = toupper(str[i]);  // Converte para maiúscula
        }
    }
    normalized[j] = '\0';  // Finaliza a string normalizada
}

void sortNames(char names[][MAX_LENGTH], int numNames) {
    char temp[MAX_LENGTH];
    char norm1[MAX_LENGTH], norm2[MAX_LENGTH];

    for (int i = 0; i < numNames - 1; i++) {
        for (int j = i + 1; j < numNames; j++) {
            // Normaliza as strings para comparação
            normalizeString(names[i], norm1);
            normalizeString(names[j], norm2);

            if (strcmp(norm1, norm2) > 0) {
                // Troca os nomes
                strcpy(temp, names[i]);
                strcpy(names[i], names[j]);
                strcpy(names[j], temp);
            }
        }
    }
}

int main(void) {
    char names[NUM_NAMES][MAX_LENGTH];

    // Leitura dos nomes
    for (int i = 0; i < NUM_NAMES; i++) {
        printf("Digite o nome %d: ", i + 1);
        fgets(names[i], MAX_LENGTH, stdin);
        
        // Remove o caractere de nova linha se presente
        size_t length = strlen(names[i]);
        if (length > 0 && names[i][length - 1] == '\n') {
            names[i][length - 1] = '\0';
        }
    }

    // Ordena os nomes em ordem alfabética
    sortNames(names, NUM_NAMES);

    // Impressão dos nomes em ordem alfabética
    printf("Nomes em ordem alfabética:\n");
    for (int i = 0; i < NUM_NAMES; i++) {
        printf("%s\n", names[i]);
    }

    return 0;
}



----------------------------------------------------------------------------------------------

LISTA 7 

9.1. Escreva um programa com funções.

• Na função principal, uma matriz 10 x 10 é definida.
• A primeira função (FillMatrix) preenche a matriz conforme mostrado abaixo.
• A segunda função (PrintMatrix) imprime o conteúdo da matriz.

1 2 3 4 5 6 7 8 9 10
2 4 6 8 10 12 14 16 18 20
3 6 9 12 15 18 21 24 27 30
4 8 12 16 20 24 28 32 36 40
5 10 15 20 25 30 35 40 45 50
6 12 18 24 30 36 42 48 54 60
7 14 21 28 35 42 49 56 63 70
8 16 24 32 40 48 56 64 72 80
9 18 27 36 45 54 63 72 81 90
10 20 30 40 50 60 70 80 90 100



#include <stdio.h>

#define SIZE 10

void FillMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            matrix[i][j] = (i + 1) * (j + 1);
        }
    }
}

void PrintMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%4d", matrix[i][j]);
        }
        printf("\n");
    }
}

int main(void) {
    int matrix[SIZE][SIZE];

    FillMatrix(matrix);
    PrintMatrix(matrix);

    return 0;
}



9.2. Escreva um programa com funções que leia 2 x 10 inteiros e os armazene nas duas primeiras linhas de uma matriz. Na
terceira linha, deve ser armazenada a soma dos números correspondentes das duas primeiras linhas. Finalmente, a matriz
completa é impressa. Use as funções ReadRow, Calculate e PrintMatrix.


Entre 2 x 10 inteiros:

1 2 3 4 5 6 7 8 9 10
1 2 2 1 3 4 1 1 2 1

Tabela:

1 2 3 4 5 6 7 8 9 10
1 2 2 1 3 4 1 1 2 1
2 4 5 5 8 10 8 9 11 11

#include <stdio.h>

#define ROWS 3
#define COLS 10

void ReadRow(int row[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite o número %d: ", i + 1);
        scanf("%d", &row[i]);
    }
}

void Calculate(int matrix[ROWS][COLS]) {
    for (int j = 0; j < COLS; j++) {
        matrix[2][j] = matrix[0][j] + matrix[1][j];
    }
}

void PrintMatrix(int matrix[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%4d", matrix[i][j]);
        }
        printf("\n");
    }
}

int main(void) {
    int matrix[ROWS][COLS];

    printf("Digite 10 números para a primeira linha:\n");
    ReadRow(matrix[0], COLS);

    printf("Digite 10 números para a segunda linha:\n");
    ReadRow(matrix[1], COLS);

    Calculate(matrix);

    printf("Matriz completa:\n");
    PrintMatrix(matrix);

    return 0;
}


9.3. Escreva um programa com funções que lê uma lista de inteiros e imprime todos os inteiros dessa lista seguidos pelo
número de ocorrências. A lista é terminada com o número 999, que não deve ser levado em consideração. A lista contém no
máximo 10 números diferentes.

Entre uma lista de inteiros (terminar com 999):
-10 9 25 -10 100 25 25 3 0 25 100 3 999

Os números diferentes nesta lista são:
-10 2
9 1
25 4
100 2
3 2
0 1




Dica: use uma matriz 10 x 2. A primeira coluna contém os inteiros diferentes e a segunda coluna o número de ocorrências para
o inteiro correspondente. Cada vez que um inteiro é lido, o programa verifica se esse número já está presente. Se já estiver
presente, o número de ocorrências é incrementado; caso contrário, o número é adicionado à primeira linha livre com o número
de ocorrências igual a 1 na segunda coluna.

#include <stdio.h>

#define MAX_UNIQUE 10

void ReadList(int list[], int *size) {
    int num;
    *size = 0;
    printf("Entre uma lista de inteiros (terminar com 999):\n");
    while (1) {
        scanf("%d", &num);
        if (num == 999) break;
        if (*size < MAX_UNIQUE) {
            list[*size] = num;
            (*size)++;
        } else {
            printf("Número máximo de elementos atingido.\n");
            break;
        }
    }
}

void CountOccurrences(int list[], int size, int matrix[][2], int *uniqueCount) {
    *uniqueCount = 0;
    for (int i = 0; i < size; i++) {
        int found = 0;
        for (int j = 0; j < *uniqueCount; j++) {
            if (matrix[j][0] == list[i]) {
                matrix[j][1]++;
                found = 1;
                break;
            }
        }
        if (!found) {
            matrix[*uniqueCount][0] = list[i];
            matrix[*uniqueCount][1] = 1;
            (*uniqueCount)++;
        }
    }
}

void PrintOccurrences(int matrix[][2], int uniqueCount) {
    printf("Os números diferentes nesta lista são:\n");
    for (int i = 0; i < uniqueCount; i++) {
        printf("%d %d\n", matrix[i][0], matrix[i][1]);
    }
}

int main(void) {
    int list[MAX_UNIQUE];
    int matrix[MAX_UNIQUE][2];
    int size, uniqueCount;

    ReadList(list, &size);
    CountOccurrences(list, size, matrix, &uniqueCount);
    PrintOccurrences(matrix, uniqueCount);

    return 0;
}


9.4. Escreva um programa que lê uma matriz quadrada, calcula sua transposta e imprime tanto a matriz original quanto a
matriz transposta. A matriz não pode ser maior que 10 x 10. A dimensão desejada é lida no início do programa. A leitura da
dimensão, leitura dos elementos da matriz, transposição da matriz e impressão da matriz são feitas em 4 funções diferentes.

[a0,0 a0,1 a0,2 a1,0 a1,1 a1,2 a2,0 a2,1 a2,2]T = [a0,0 a1,0 a2,0 a0,1 a1,1 a2,1 a0,2 a1,2 a2,2]

#include <stdio.h>

#define MAX_SIZE 10

void ReadDimension(int *dimension) {
    printf("Digite a dimensão da matriz (máximo %d): ", MAX_SIZE);
    scanf("%d", dimension);
    while (*dimension <= 0 || *dimension > MAX_SIZE) {
        printf("Dimensão inválida. Digite novamente (máximo %d): ", MAX_SIZE);
        scanf("%d", dimension);
    }
}

void ReadMatrix(int matrix[MAX_SIZE][MAX_SIZE], int dimension) {
    printf("Digite os elementos da matriz %dx%d:\n", dimension, dimension);
    for (int i = 0; i < dimension; i++) {
        for (int j = 0; j < dimension; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

void TransposeMatrix(int matrix[MAX_SIZE][MAX_SIZE], int transposed[MAX_SIZE][MAX_SIZE], int dimension) {
    for (int i = 0; i < dimension; i++) {
        for (int j = 0; j < dimension; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }
}

void PrintMatrix(int matrix[MAX_SIZE][MAX_SIZE], int dimension, const char *label) {
    printf("%s:\n", label);
    for (int i = 0; i < dimension; i++) {
        for (int j = 0; j < dimension; j++) {
            printf("%4d", matrix[i][j]);
        }
        printf("\n");
    }
}

int main(void) {
    int dimension;
    int matrix[MAX_SIZE][MAX_SIZE];
    int transposed[MAX_SIZE][MAX_SIZE];

    ReadDimension(&dimension);
    ReadMatrix(matrix, dimension);
    TransposeMatrix(matrix, transposed, dimension);
    PrintMatrix(matrix, dimension, "Matriz original");
    PrintMatrix(transposed, dimension, "Matriz transposta");

    return 0;
}



9.5. Escreva um programa com funções que:
•Declara uma matriz com dimensões 10 x 10 na função principal.
•Usa uma função para ler os elementos da matriz.
•Usa uma função para encontrar o elemento mínimo e máximo na matriz e trocá-los (dentro da matriz, usando uma variável
auxiliar é permitido).
•Usa uma função para imprimir a matriz após a troca.


#include <stdio.h>

#define SIZE 10

// Função para ler os elementos da matriz
void ReadMatrix(int matrix[SIZE][SIZE]) {
    printf("Digite os elementos da matriz %dx%d:\n", SIZE, SIZE);
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Função para encontrar o elemento mínimo e máximo e trocá-los
void SwapMinMax(int matrix[SIZE][SIZE]) {
    int min = matrix[0][0];
    int max = matrix[0][0];
    int minPos[2] = {0, 0};
    int maxPos[2] = {0, 0};

    // Encontrar o valor mínimo e máximo e suas posições
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] < min) {
                min = matrix[i][j];
                minPos[0] = i;
                minPos[1] = j;
            }
            if (matrix[i][j] > max) {
                max = matrix[i][j];
                maxPos[0] = i;
                maxPos[1] = j;
            }
        }
    }

    // Trocar os valores mínimo e máximo
    int temp = matrix[minPos[0]][minPos[1]];
    matrix[minPos[0]][minPos[1]] = matrix[maxPos[0]][maxPos[1]];
    matrix[maxPos[0]][maxPos[1]] = temp;
}

// Função para imprimir a matriz
void PrintMatrix(int matrix[SIZE][SIZE]) {
    printf("Matriz após a troca dos elementos mínimo e máximo:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%4d", matrix[i][j]);
        }
        printf("\n");
    }
}

int main(void) {
    int matrix[SIZE][SIZE];

    ReadMatrix(matrix);
    SwapMinMax(matrix);
    PrintMatrix(matrix);

    return 0;
}



9.6. Escreva um programa com uma função principal e 2 funções adicionais:
•Declare um array de 10 strings na função principal.
•A primeira função lê os 10 nomes e os armazena no array.
•A segunda função imprime os nomes no array na tela.

#include <stdio.h>

#define MAX_NAMES 10
#define MAX_LENGTH 100

// Função para ler os 10 nomes
void ReadNames(char names[MAX_NAMES][MAX_LENGTH]) {
    printf("Digite 10 nomes:\n");
    for (int i = 0; i < MAX_NAMES; i++) {
        printf("Nome %d: ", i + 1);
        fgets(names[i], MAX_LENGTH, stdin);

        // Remove o caractere de nova linha se presente
        size_t length = strlen(names[i]);
        if (length > 0 && names[i][length - 1] == '\n') {
            names[i][length - 1] = '\0';
        }
    }
}

// Função para imprimir os nomes
void PrintNames(char names[MAX_NAMES][MAX_LENGTH]) {
    printf("\nNomes digitados:\n");
    for (int i = 0; i < MAX_NAMES; i++) {
        printf("%s\n", names[i]);
    }
}

int main(void) {
    char names[MAX_NAMES][MAX_LENGTH];

    // Chama as funções para ler e imprimir os nomes
    ReadNames(names);
    PrintNames(names);

    return 0;
}


9.7. Escreva um programa com uma função principal e 2 funções adicionais:
• Declare um array de 10 strings na função principal.
• A primeira função lê os nomes até que a palavra “fim” ou o máximo de 10 nomes seja digitado e armazena-os no array.
• A segunda função imprime os nomes no array na tela.


#include <stdio.h>
#include <string.h>

#define MAX_NAMES 10
#define MAX_LENGTH 100

// Função para ler os nomes até que "fim" ou o máximo de 10 nomes seja digitado
void ReadNames(char names[MAX_NAMES][MAX_LENGTH], int *count) {
    char input[MAX_LENGTH];
    *count = 0;

    printf("Digite até 10 nomes (digite 'fim' para parar):\n");
    while (*count < MAX_NAMES) {
        printf("Nome %d: ", *count + 1);
        fgets(input, MAX_LENGTH, stdin);

        // Remove o caractere de nova linha se presente
        size_t length = strlen(input);
        if (length > 0 && input[length - 1] == '\n') {
            input[length - 1] = '\0';
        }

        // Verifica se o usuário digitou "fim"
        if (strcmp(input, "fim") == 0) {
            break;
        }

        // Armazena o nome no array
        strcpy(names[*count], input);
        (*count)++;
    }
}

// Função para imprimir os nomes no array
void PrintNames(char names[MAX_NAMES][MAX_LENGTH], int count) {
    printf("\nNomes digitados:\n");
    for (int i = 0; i < count; i++) {
        printf("%s\n", names[i]);
    }
}

int main(void) {
    char names[MAX_NAMES][MAX_LENGTH];
    int count;

    // Chama a função para ler os nomes e armazena a quantidade de nomes lidos
    ReadNames(names, &count);

    // Chama a função para imprimir os nomes
    PrintNames(names, count);

    return 0;
}



9.8. Escreva um programa que lê uma letra, a converte para código Morse e imprime o resultado na tela. Você pode usar o
seguinte array que contém os códigos Morse para as letras A, B, C, ... consecutivamente:
const char *morse[] = {".-", "-...", "-.-.", "-..", ".", "..-.",
"--.", "....", "..", ".---", "-.-", ".-..", "--",
"-.", "---", ".--.", "--.-", ".-.", "...", "-",
"..-", "...-", ".--", "-..-", "-.--", "--..", NULL};

Entre uma letra: c Código Morse correspondente: -.-.

#include <stdio.h>
#include <ctype.h>

const char *morse[] = {".-", "-...", "-.-.", "-..", ".", "..-.",
"--.", "....", "..", ".---", "-.-", ".-..", "--",
"-.", "---", ".--.", "--.-", ".-.", "...", "-",
"..-", "...-", ".--", "-..-", "-.--", "--..", NULL};

int main(void) {
    char letter;
    int index;

    printf("Entre uma letra: ");
    scanf(" %c", &letter);  // O espaço antes de %c é para ignorar qualquer caractere de nova linha remanescente

    // Converte a letra para maiúscula
    letter = toupper(letter);

    // Verifica se a letra está no intervalo de A-Z
    if (letter >= 'A' && letter <= 'Z') {
        index = letter - 'A';  // Calcula o índice na tabela Morse

        printf("Código Morse correspondente: %s\n", morse[index]);
    } else {
        printf("Entrada inválida. Por favor, entre uma letra de A a Z.\n");
    }

    return 0;
}


9.9. Escreva um programa que lê uma palavra e a imprime em código Morse na tela. Você pode usar a função do exercício
anterior para escrever o código Morse letra por letra na tela.

Entre uma palavra: bread Código Morse: -... .-. . .- -..

#include <stdio.h>
#include <ctype.h>

const char *morse[] = {".-", "-...", "-.-.", "-..", ".", "..-.",
"--.", "....", "..", ".---", "-.-", ".-..", "--",
"-.", "---", ".--.", "--.-", ".-.", "...", "-",
"..-", "...-", ".--", "-..-", "-.--", "--..", NULL};

// Função para obter o código Morse de uma letra
const char* getMorseCode(char letter) {
    if (letter >= 'A' && letter <= 'Z') {
        int index = letter - 'A';
        return morse[index];
    } else if (letter >= 'a' && letter <= 'z') {
        int index = letter - 'a';
        return morse[index];
    } else {
        return NULL; // Retorna NULL para caracteres não alfabéticos
    }
}

int main(void) {
    char word[100];
    int i = 0;

    printf("Entre uma palavra: ");
    fgets(word, sizeof(word), stdin);

    // Remove o caractere de nova linha se presente
    size_t length = strlen(word);
    if (length > 0 && word[length - 1] == '\n') {
        word[length - 1] = '\0';
    }

    printf("Código Morse: ");
    while (word[i] != '\0') {
        char letter = toupper(word[i]);  // Converte a letra para maiúscula
        const char* morseCode = getMorseCode(letter);
        
        if (morseCode != NULL) {
            printf("%s ", morseCode);  // Imprime o código Morse
        } else {
            printf("? ");  // Imprime um caractere de interrogação para caracteres não alfabéticos
        }
        i++;
    }
    printf("\n");

    return 0;
}




9.10. Escreva um programa para processar resultados de testes. Para garantir a qualidade do produto, uma empresa faz uma
amostra de N peças acabadas (0 < N ≤ 20) e as submete a uma série de M testes (0 < M ≤ 10). Se uma peça falha em um ou
mais testes, os dados são enviados ao computador no formato:

PartNumber TestNumber Result

onde 1 ≤ PartNumber ≤ N e 1 ≤ TestNumber ≤ M e Result = 1 para um erro pequeno = 3 para um erro fatal

Uma peça é rejeitada se ocorrer pelo menos 1 erro fatal ou pelo menos 3 erros pequenos.

O programa primeiro lê a quantidade de peças testadas (N) e o número de testes executados por peça (M). Então, os
resultados dos testes para todas as peças que falharam são lidos até que 0 0 0 seja digitado.



O programa imprime:
• Uma tabela com uma linha para cada peça testada (inclusive as que não falharam em nenhum teste) contendo informações
sobre os resultados dos testes e uma avaliação final.
• Uma segunda tabela com uma linha por teste contendo o número de peças que não falharam, o número de peças que
mostraram um erro pequeno e o número de peças que mostraram um erro fatal.

O programa usa funções:Uma função ReadNumber que é usada duas vezes.
• Uma para ler o número de peças testadas (N) e outra para ler o número de testes (M). Certifique-se de aceitar apenas
números válidos.
• Uma função para ler todos os dados dos testes.
• Uma função para imprimir os resultados por peça.
• Uma função para imprimir os resultados por teste.
• Opcional: uma função para contar o número de ocorrências de um determinado valor em uma determinada coluna.

Dica: Use uma matriz de 20 x 10 onde o canto superior esquerdo de N linhas e M colunas é utilizado. Coloque cada entrada no
lugar certo nessa matriz. A primeira tabela a ser impressa é então apenas uma impressão da seção utilizada da matriz
acompanhada de algum texto. A segunda tabela pode ser construída contando as ocorrências dos números 0, 1 e 3 em cada
coluna da matriz.


O diálogo na tela deve ser:

Quantas peças você testou? 5
Quantos testes você executou? 3
Digite os resultados dos testes (termine com 0 0 0):
4 1 1
5 3 3
3 2 3
2 3 1
3 3 1
4 3 1
4 2 1
0 0 0
Resultados por peça:
número da peça testes avaliação



------------------------------------
1 0 0 0 aceito
2 0 0 1 aceito
3 0 3 1 rejeitado
4 1 1 1 rejeitado
5 0 0 3 rejeitado
Resultados por teste:
teste falhas
nenhuma pequena fatal
---------------------------
1 4 1 0
2 3 1 1
3 1 3 1



#include <stdio.h>

#define MAX_PARTS 20
#define MAX_TESTS 10

void ReadNumber(const char* prompt, int* number, int min, int max) {
    do {
        printf("%s", prompt);
        scanf("%d", number);
    } while (*number < min || *number > max);
}

void ReadTestResults(int results[MAX_PARTS][MAX_TESTS], int numParts, int numTests) {
    int partNumber, testNumber, result;
    
    printf("Digite os resultados dos testes (termine com 0 0 0):\n");
    while (1) {
        scanf("%d %d %d", &partNumber, &testNumber, &result);
        if (partNumber == 0 && testNumber == 0 && result == 0) {
            break;
        }
        if (partNumber >= 1 && partNumber <= numParts && testNumber >= 1 && testNumber <= numTests) {
            results[partNumber - 1][testNumber - 1] = result;
        }
    }
}

void PrintResultsByPart(int results[MAX_PARTS][MAX_TESTS], int numParts, int numTests) {
    printf("Resultados por peça:\n");
    printf("número da peça testes avaliação\n");
    printf("------------------------------------\n");

    for (int i = 0; i < numParts; i++) {
        int smallErrors = 0, fatalErrors = 0;
        for (int j = 0; j < numTests; j++) {
            if (results[i][j] == 1) {
                smallErrors++;
            } else if (results[i][j] == 3) {
                fatalErrors++;
            }
        }
        printf("%2d", i + 1);
        for (int j = 0; j < numTests; j++) {
            printf(" %d", results[i][j]);
        }
        if (fatalErrors > 0) {
            printf(" rejeitado\n");
        } else if (smallErrors >= 3) {
            printf(" rejeitado\n");
        } else {
            printf(" aceito\n");
        }
    }
}

void PrintResultsByTest(int results[MAX_PARTS][MAX_TESTS], int numParts, int numTests) {
    printf("Resultados por teste:\n");
    printf("teste falhas\n");
    printf("nenhuma pequena fatal\n");
    printf("---------------------------\n");

    for (int j = 0; j < numTests; j++) {
        int noErrors = 0, smallErrors = 0, fatalErrors = 0;
        for (int i = 0; i < numParts; i++) {
            if (results[i][j] == 0) {
                noErrors++;
            } else if (results[i][j] == 1) {
                smallErrors++;
            } else if (results[i][j] == 3) {
                fatalErrors++;
            }
        }
        printf("%2d %2d %2d %2d\n", j + 1, noErrors, smallErrors, fatalErrors);
    }
}

int main(void) {
    int numParts, numTests;
    int results[MAX_PARTS][MAX_TESTS] = {0};  // Inicializa a matriz com zeros

    ReadNumber("Quantas peças você testou? ", &numParts, 1, MAX_PARTS);
    ReadNumber("Quantos testes você executou? ", &numTests, 1, MAX_TESTS);
    
    ReadTestResults(results, numParts, numTests);
    
    PrintResultsByPart(results, numParts, numTests);
    PrintResultsByTest(results, numParts, numTests);

    return 0;
}




9.11. Escreva um programa que simule reservas de assentos em um teatro. Considere uma sala com 3 filas de 4 assentos cada.
Defina uma matriz de 3 x 4 que represente a sala. Cada elemento da matriz deve ser grande o suficiente para conter uma string
de no máximo 10 símbolos, resultando em uma matriz 2D de strings, que é uma matriz 3D de caracteres! O programa deve
repetir-se até que o usuário insira 0 0 0 ou até que todos os assentos estejam ocupados.

Em cada execução do programa, um nome, o número da fila e o número do assento devem ser lidos. Se o assento ainda estiver
disponível, o nome é armazenado na linha e coluna correspondentes da matriz. Se o assento já estiver ocupado, o programa
imprime “ocupado”. Após cada reserva de assento, todas as reservas devem ser impressas na tela.

Use funções para escrever o programa:
• declare a sala no programa principal
• escreva uma função para imprimir as reservas atuais
• escreva uma função para inicializar as reservas
• escreva uma função para ler as entradas e verificar a disponibilidade do assento desejado


Bem-vindo. O teatro tem 3 filas de 4 assentos cada. As reservas atuais são:
. . . .
. . . .
. . . .

Digite uma nova reserva de assento: Mary 1 2
As reservas atuais são:
. Mary . .
. . . .
. . . .

Digite uma nova reserva de assento: Carl 3 3
As reservas atuais são:
. Mary . .
. . . .
. . Carl .


Digite uma nova reserva de assento: fim
As reservas finais de assentos são:
. Mary . .
. . . .
. . Carl .


------------------------------------------------------------------------------------------------------

LISTA 8


11.1. Escreva um programa sem usar arrays que:Declare 3 variáveis do tipo double na função principal.Leia todas as 3
variáveis com uma chamada de função para a função ReadValues.Imprima os valores das 3 variáveis na função principal.


#include <stdio.h>

// Função para ler os valores das variáveis
void ReadValues(double *a, double *b, double *c) {
    printf("Digite o valor para a primeira variável: ");
    scanf("%lf", a);

    printf("Digite o valor para a segunda variável: ");
    scanf("%lf", b);

    printf("Digite o valor para a terceira variável: ");
    scanf("%lf", c);
}

int main(void) {
    double var1, var2, var3;

    // Chama a função para ler os valores
    ReadValues(&var1, &var2, &var3);

    // Imprime os valores das variáveis
    printf("Os valores digitados são:\n");
    printf("Primeira variável: %.2f\n", var1);
    printf("Segunda variável: %.2f\n", var2);
    printf("Terceira variável: %.2f\n", var3);

    return 0;
}



11.2Escreva um programa para trocar dois números. O primeiro número está armazenado na variável number1 e o segundo
na variável number2. Após a troca, a variável number1 contém o segundo número e number2 contém o primeiro número.
Use funções: Read, Swap, Print. Não use arrays!

Digite 2 números: 5 10O
valor da primeira variável é 5, o valor da segunda variável é 10.
Após a troca, a variável 1 contém 10 e a variável 2 contém 5.


#include <stdio.h>

// Função para ler dois números
void Read(double *num1, double *num2) {
    printf("Digite 2 números: ");
    scanf("%lf %lf", num1, num2);
}

// Função para trocar os valores de duas variáveis
void Swap(double *num1, double *num2) {
    double temp = *num1;
    *num1 = *num2;
    *num2 = temp;
}

// Função para imprimir os valores das variáveis
void Print(double num1, double num2) {
    printf("Valor da primeira variável é %.2f, o valor da segunda variável é %.2f.\n", num1, num2);
    printf("Após a troca, a variável 1 contém %.2f e a variável 2 contém %.2f.\n", num1, num2);
}

int main(void) {
    double number1, number2;

    // Lê os números
    Read(&number1, &number2);

    // Imprime os números antes da troca
    Print(number1, number2);

    // Troca os números
    Swap(&number1, &number2);

    // Imprime os números após a troca
    Print(number1, number2);

    return 0;
}



11.3
Escreva um programa que converte um número de segundos em horas, minutos e segundos. A leitura do número de
segundos e a impressão do resultado é feita na função principal. Os cálculos são feitos em uma função separada. Não use
arrays!
Digite um tempo em segundos: 10000
O tempo de 10000 segundos equivale a 2 horas, 46 minutos e 40 segundos.

#include <stdio.h>

// Função para converter segundos em horas, minutos e segundos
void ConvertTime(int total_seconds, int *hours, int *minutes, int *seconds) {
    *hours = total_seconds / 3600;            // Calcula as horas
    total_seconds %= 3600;                    // Resto dos segundos após calcular as horas
    *minutes = total_seconds / 60;            // Calcula os minutos
    *seconds = total_seconds % 60;            // Calcula os segundos restantes
}

int main(void) {
    int total_seconds;
    int hours, minutes, seconds;

    // Leitura do número de segundos
    printf("Digite um tempo em segundos: ");
    scanf("%d", &total_seconds);

    // Converte o tempo em horas, minutos e segundos
    ConvertTime(total_seconds, &hours, &minutes, &seconds);

    // Imprime o resultado
    printf("O tempo de %d segundos equivale a %d horas, %d minutos e %d segundos.\n",
           total_seconds, hours, minutes, seconds);

    return 0;
}




11.4
Escreva um programa que lê um valor em dinheiro (≤ € 200) e determina o número mínimo de notas e moedas necessárias
para obter esse valor. Escreva uma função para os cálculos e uma função para imprimir na tela. Não use arrays!

Digite um valor de dinheiro: 195
195 euros podem ser obtidos com:
1 nota de cem
1 nota de cinquenta
2 notas de vinte
1 nota de cinco
0 moedas de um

#include <stdio.h>

// Função para calcular o número de notas e moedas necessárias
void CalculateDenominations(int value, int *num_hundred, int *num_fifty, int *num_twenty, int *num_ten, int *num_five, int *num_one) {
    *num_hundred = value / 100;
    value %= 100;

    *num_fifty = value / 50;
    value %= 50;

    *num_twenty = value / 20;
    value %= 20;

    *num_ten = value / 10;
    value %= 10;

    *num_five = value / 5;
    value %= 5;

    *num_one = value / 1;
}

// Função para imprimir o número de notas e moedas
void PrintDenominations(int num_hundred, int num_fifty, int num_twenty, int num_ten, int num_five, int num_one) {
    printf("Pode ser obtido com:\n");
    if (num_hundred > 0) printf("%d nota(s) de cem\n", num_hundred);
    if (num_fifty > 0) printf("%d nota(s) de cinquenta\n", num_fifty);
    if (num_twenty > 0) printf("%d nota(s) de vinte\n", num_twenty);
    if (num_ten > 0) printf("%d nota(s) de dez\n", num_ten);
    if (num_five > 0) printf("%d nota(s) de cinco\n", num_five);
    if (num_one > 0) printf("%d moeda(s) de um\n", num_one);
}

int main(void) {
    int value;
    int num_hundred, num_fifty, num_twenty, num_ten, num_five, num_one;

    // Leitura do valor em dinheiro
    printf("Digite um valor de dinheiro: ");
    scanf("%d", &value);

    // Calcula o número de notas e moedas necessárias
    CalculateDenominations(value, &num_hundred, &num_fifty, &num_twenty, &num_ten, &num_five, &num_one);

    // Imprime o resultado
    PrintDenominations(num_hundred, num_fifty, num_twenty, num_ten, num_five, num_one);

    return 0;
}



11.5Escreva um programa que lê as temperaturas de uma semana inteira, encontra as temperaturas mínimas e máximas e as
imprime junto com todas as temperaturas inseridas.

Imprima as temperaturas da seguinte forma:

Seg Ter Qua Qui Sex Sab Dom
Dia 5.0 5.5 7.0 6.0 7.5 8.0 8.5
Noite -1.5 -0.5 0.0 -1.0 0.0 1.0 1.5
Imprima também as temperaturas mínimas e máximas do dia e da noite junto com o dia em que a temperatura foi medida:
Mín: Noite: Seg = -1.5
Dia: Seg = 5.0
Máx: Noite: Dom = 1.5
Dia: Dom = 8.5

As temperaturas são armazenadas em uma matriz 2D com a linha 0 para as temperaturas medidas durante o dia e a linha 1
para as temperaturas medidas durante a noite. Os nomes dos dias são armazenados em uma matriz separada (você não pode
armazenar números e texto na mesma matriz).

Use 3 funções: Read, Print e Calculate. Passe os índices das temperaturas mínimas e máximas para o dia e para a noite por
referência.

#include <stdio.h>

#define DAYS 7

// Função para ler as temperaturas
void ReadTemperatures(double temperatures[2][DAYS]) {
    const char *days[DAYS] = {"Seg", "Ter", "Qua", "Qui", "Sex", "Sab", "Dom"};
    
    printf("Digite as temperaturas para os seguintes dias:\n");
    for (int i = 0; i < DAYS; i++) {
        printf("Dia %s - Temperatura do dia: ", days[i]);
        scanf("%lf", &temperatures[0][i]);
        printf("Dia %s - Temperatura da noite: ", days[i]);
        scanf("%lf", &temperatures[1][i]);
    }
}

// Função para imprimir as temperaturas
void PrintTemperatures(double temperatures[2][DAYS]) {
    const char *days[DAYS] = {"Seg", "Ter", "Qua", "Qui", "Sex", "Sab", "Dom"};
    
    // Imprimir os cabeçalhos
    printf("         ");
    for (int i = 0; i < DAYS; i++) {
        printf("%s ", days[i]);
    }
    printf("\n");

    // Imprimir as temperaturas do dia
    printf("Dia      ");
    for (int i = 0; i < DAYS; i++) {
        printf("%.1f ", temperatures[0][i]);
    }
    printf("\n");

    // Imprimir as temperaturas da noite
    printf("Noite    ");
    for (int i = 0; i < DAYS; i++) {
        printf("%.1f ", temperatures[1][i]);
    }
    printf("\n");
}

// Função para calcular as temperaturas mínimas e máximas
void CalculateMinMax(double temperatures[2][DAYS], int *minDayIndex, int *maxDayIndex, int *minNightIndex, int *maxNightIndex) {
    double minDay = temperatures[0][0];
    double maxDay = temperatures[0][0];
    double minNight = temperatures[1][0];
    double maxNight = temperatures[1][0];

    *minDayIndex = 0;
    *maxDayIndex = 0;
    *minNightIndex = 0;
    *maxNightIndex = 0;

    for (int i = 1; i < DAYS; i++) {
        if (temperatures[0][i] < minDay) {
            minDay = temperatures[0][i];
            *minDayIndex = i;
        }
        if (temperatures[0][i] > maxDay) {
            maxDay = temperatures[0][i];
            *maxDayIndex = i;
        }
        if (temperatures[1][i] < minNight) {
            minNight = temperatures[1][i];
            *minNightIndex = i;
        }
        if (temperatures[1][i] > maxNight) {
            maxNight = temperatures[1][i];
            *maxNightIndex = i;
        }
    }

    // Imprimir os valores mínimos e máximos
    const char *days[DAYS] = {"Seg", "Ter", "Qua", "Qui", "Sex", "Sab", "Dom"};
    printf("Mín: Noite: %s = %.1f\n", days[*minNightIndex], temperatures[1][*minNightIndex]);
    printf("Dia: %s = %.1f\n", days[*minDayIndex], temperatures[0][*minDayIndex]);
    printf("Máx: Noite: %s = %.1f\n", days[*maxNightIndex], temperatures[1][*maxNightIndex]);
    printf("Dia: %s = %.1f\n", days[*maxDayIndex], temperatures[0][*maxDayIndex]);
}

int main(void) {
    double temperatures[2][DAYS];
    int minDayIndex, maxDayIndex, minNightIndex, maxNightIndex;

    ReadTemperatures(temperatures);
    PrintTemperatures(temperatures);
    CalculateMinMax(temperatures, &minDayIndex, &maxDayIndex, &minNightIndex, &maxNightIndex);

    return 0;
}




9.4. Escreva um programa que lê uma matriz quadrada, calcula sua transposta e imprime tanto a matriz original quanto a
matriz transposta. A matriz não pode ser maior que 10 x 10. A dimensão desejada é lida no início do programa. A leitura da
dimensão, leitura dos elementos da matriz, transposição da matriz e impressão da matriz são feitas em 4 funções diferentes.

[a0,0 a0,1 a0,2 a1,0 a1,1 a1,2 a2,0 a2,1 a2,2]T = [a0,0 a1,0 a2,0 a0,1 a1,1 a2,1 a0,2 a1,2 a2,2]

#include <stdio.h>

#define MAX_SIZE 10

// Função para ler a dimensão da matriz
void ReadDimension(int *dimension) {
    printf("Digite a dimensão da matriz (máx 10): ");
    scanf("%d", dimension);

    if (*dimension <= 0 || *dimension > MAX_SIZE) {
        printf("Dimensão inválida. Usando a dimensão padrão de 3.\n");
        *dimension = 3;
    }
}

// Função para ler os elementos da matriz
void ReadMatrix(int matrix[MAX_SIZE][MAX_SIZE], int dimension) {
    printf("Digite os elementos da matriz (%d x %d):\n", dimension, dimension);
    for (int i = 0; i < dimension; i++) {
        for (int j = 0; j < dimension; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Função para calcular a matriz transposta
void TransposeMatrix(int matrix[MAX_SIZE][MAX_SIZE], int transposed[MAX_SIZE][MAX_SIZE], int dimension) {
    for (int i = 0; i < dimension; i++) {
        for (int j = 0; j < dimension; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }
}

// Função para imprimir uma matriz
void PrintMatrix(int matrix[MAX_SIZE][MAX_SIZE], int dimension, const char *title) {
    printf("%s:\n", title);
    for (int i = 0; i < dimension; i++) {
        for (int j = 0; j < dimension; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main(void) {
    int dimension;
    int matrix[MAX_SIZE][MAX_SIZE];
    int transposed[MAX_SIZE][MAX_SIZE];

    ReadDimension(&dimension);
    ReadMatrix(matrix, dimension);
    TransposeMatrix(matrix, transposed, dimension);
    PrintMatrix(matrix, dimension, "Matriz Original");
    PrintMatrix(transposed, dimension, "Matriz Transposta");

    return 0;
}


9.5. Escreva um programa com funções que:
•Declara uma matriz com dimensões 10 x 10 na função principal.
•Usa uma função para ler os elementos da matriz.
•Usa uma função para encontrar o elemento mínimo e máximo na matriz e trocá-los (dentro da matriz, usando uma variável
auxiliar é permitido).
•Usa uma função para imprimir a matriz após a troca.

#include <stdio.h>

#define MAX_SIZE 10

// Função para ler os elementos da matriz
void ReadMatrix(int matrix[MAX_SIZE][MAX_SIZE], int size) {
    printf("Digite os elementos da matriz (%d x %d):\n", size, size);
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Função para encontrar e trocar o elemento mínimo e máximo na matriz
void SwapMinMax(int matrix[MAX_SIZE][MAX_SIZE], int size) {
    int min = matrix[0][0], max = matrix[0][0];
    int minRow = 0, minCol = 0, maxRow = 0, maxCol = 0;
    
    // Encontrar o mínimo e máximo e suas posições
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (matrix[i][j] < min) {
                min = matrix[i][j];
                minRow = i;
                minCol = j;
            }
            if (matrix[i][j] > max) {
                max = matrix[i][j];
                maxRow = i;
                maxCol = j;
            }
        }
    }
    
    // Trocar os elementos mínimo e máximo
    int temp = matrix[minRow][minCol];
    matrix[minRow][minCol] = matrix[maxRow][maxCol];
    matrix[maxRow][maxCol] = temp;
}

// Função para imprimir a matriz
void PrintMatrix(int matrix[MAX_SIZE][MAX_SIZE], int size) {
    printf("Matriz:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main(void) {
    int size;
    int matrix[MAX_SIZE][MAX_SIZE];

    // Lê a dimensão da matriz
    printf("Digite a dimensão da matriz (máx 10): ");
    scanf("%d", &size);

    if (size <= 0 || size > MAX_SIZE) {
        printf("Dimensão inválida. Usando a dimensão padrão de 3.\n");
        size = 3;
    }

    ReadMatrix(matrix, size);
    SwapMinMax(matrix, size);
    PrintMatrix(matrix, size);

    return 0;
}



9.6. Escreva um programa com uma função principal e 2 funções adicionais:
•Declare um array de 10 strings na função principal.
•A primeira função lê os 10 nomes e os armazena no array.
•A segunda função imprime os nomes no array na tela.


Escreva a função print_string para finalizar o próximo programa. A função print_string imprime uma string, recebida como
argumento, caractere por caractere usando a função putchar().

#include <stdio.h>
#include <string.h>

#define MAXSTRING 100
void print_string(char *c) {
while (*c) {
putchar(*c++); } }

int main(void) {
char s1[MAXSTRING], s2[MAXSTRING];
strcpy(s1, "Mary, Mary, quite contrary.\n");
strcpy(s2, "How does your garden grow?\n");
print_string(s1);
print_string(s2);
strcat(s1, s2);
print_string(s1);
return 0; }


#include <stdio.h>
#include <string.h>

#define MAXSTRING 100

// Função que imprime uma string caractere por caractere usando putchar()
void print_string(char *c) {
    while (*c) {
        putchar(*c++); 
    }
}

int main(void) {
    char s1[MAXSTRING], s2[MAXSTRING];

    // Copia as strings para s1 e s2
    strcpy(s1, "Mary, Mary, quite contrary.\n");
    strcpy(s2, "How does your garden grow?\n");

    // Imprime as strings s1 e s2
    print_string(s1);
    print_string(s2);

    // Concatena s2 em s1
    strcat(s1, s2);

    // Imprime a string concatenada s1
    print_string(s1);

    return 0;
}




11.7Escreva um programa que lê uma palavra e a converte da seguinte forma:
• Os dois primeiros caracteres são impressos. Ex: “qwerty” => imprime qw
• O primeiro e o segundo caractere são comparados. O maior é impresso. Ex: q < w => imprime w como o terceiro caractere
• Agora, compare o segundo e o terceiro caractere e novamente imprima o maior. Ex: w > e => imprime w como o quarto
caractere
• Repita até que a palavra esteja terminada
• Após a conversão, o programa imprime também a letra alfabeticamente menor e a maior.
A função main contém:
• Perguntar “novamente?” e ler um 0 ou 1 como resposta
• Imprimir a maior e a menor letra
A função Read cuida de:
• Ler uma palavra. Certifique-se de que apenas palavras de 2 ou mais caracteres podem ser inseridas.
A função Print cuida de:
• Determinar a menor e a maior letra e passá-las para o programa principal com ponteiros
• Converter e imprimir a palavra
Digite uma palavra ou uma série de letras:
Qwerty
Qwwwrty
maior = y e menor = enovamente? (1=s, 0=n): 1
Digite uma palavra ou uma série de letras: beverage beevvrrggmaior = v e menor = bnovamente? (1=s, 0=n): 0


O programa imprime:
• Uma tabela com uma linha para cada peça testada (inclusive as que não falharam em nenhum teste) contendo informações
sobre os resultados dos testes e uma avaliação final.
• Uma segunda tabela com uma linha por teste contendo o número de peças que não falharam, o número de peças que
mostraram um erro pequeno e o número de peças que mostraram um erro fatal.

O programa usa funções:Uma função ReadNumber que é usada duas vezes.
• Uma para ler o número de peças testadas (N) e outra para ler o número de testes (M). Certifique-se de aceitar apenas
números válidos.
• Uma função para ler todos os dados dos testes.
• Uma função para imprimir os resultados por peça.
• Uma função para imprimir os resultados por teste.
• Opcional: uma função para contar o número de ocorrências de um determinado valor em uma determinada coluna.

Dica: Use uma matriz de 20 x 10 onde o canto superior esquerdo de N linhas e M colunas é utilizado. Coloque cada entrada no
lugar certo nessa matriz. A primeira tabela a ser impressa é então apenas uma impressão da seção utilizada da matriz
acompanhada de algum texto. A segunda tabela pode ser construída contando as ocorrências dos números 0, 1 e 3 em cada
coluna da matriz.

#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Função para ler uma palavra garantindo que tenha pelo menos 2 caracteres
void Read(char *word, int max_length) {
    do {
        printf("Digite uma palavra ou uma série de letras: ");
        fgets(word, max_length, stdin);
        // Remove o caractere de nova linha, se presente
        size_t len = strlen(word);
        if (len > 0 && word[len - 1] == '\n') {
            word[len - 1] = '\0';
        }
    } while (strlen(word) < 2);
}

// Função para converter e imprimir a palavra e determinar as letras min e max
void Print(const char *word, char *min_letter, char *max_letter) {
    int i;
    char result[100] = {0};  // Array para armazenar o resultado da conversão

    // Inicializa min_letter e max_letter
    *min_letter = word[0];
    *max_letter = word[0];

    // Imprime os dois primeiros caracteres
    putchar(word[0]);
    putchar(word[1]);
    strcat(result, (char[]){word[0], word[1], '\0'});  // Adiciona os dois primeiros caracteres ao resultado

    // Converte o restante da palavra
    for (i = 1; i < strlen(word) - 1; i++) {
        if (word[i] > word[i + 1]) {
            putchar(word[i]);
            strcat(result, (char[]){word[i], '\0'});  // Adiciona o caractere ao resultado
        } else {
            putchar(word[i + 1]);
            strcat(result, (char[]){word[i + 1], '\0'});  // Adiciona o caractere ao resultado
        }

        // Atualiza min_letter e max_letter
        if (word[i + 1] < *min_letter) {
            *min_letter = word[i + 1];
        }
        if (word[i + 1] > *max_letter) {
            *max_letter = word[i + 1];
        }
    }

    putchar('\n');  // Nova linha após a conversão
    printf("Resultado da conversão: %s\n", result);
}

int main(void) {
    char word[100];
    char min_letter, max_letter;
    int again;

    do {
        Read(word, sizeof(word));
        Print(word, &min_letter, &max_letter);

        // Imprime a letra min e max
        printf("Maior = %c e menor = %c\n", max_letter, min_letter);

        // Pergunta se deseja processar outra palavra
        printf("Novamente? (1=s, 0=n): ");
        scanf("%d", &again);
        while (getchar() != '\n');  // Limpa o buffer de entrada
    } while (again == 1);

    return 0;
}



11.8Escreva um programa que imprime as tabelas de multiplicação de um número inteiro inserido pelo usuário até um limite
que também é inserido pelo usuário. Continue repetindo o programa até que 0 0 seja inserido.

Use as seguintes funções:
• Read: lê 2 inteiros (número e limite)
• CalcPrint: imprime a tabela de multiplicação e calcula a soma dos números ímpares e pares
• main: chama as funções Read e CalcPrint e imprime a soma dos números ímpares e pares

Não use arrays!

Digite o número que você deseja usar para a tabela de multiplicação:5
Digite o limite:
32
5
10
15
20
25


A soma dos números pares é 60
A soma dos números ímpares é 45
Digite o número que você deseja usar para a tabela de multiplicação:
0
Digite o limite:
0
Obrigado!


#include <stdio.h>

// Função para ler o número e o limite
void Read(int *num, int *limit) {
    printf("Digite o número que você deseja usar para a tabela de multiplicação: ");
    scanf("%d", num);
    printf("Digite o limite: ");
    scanf("%d", limit);
}

// Função para imprimir a tabela de multiplicação e calcular as somas dos números pares e ímpares
void CalcPrint(int num, int limit, int *sum_even, int *sum_odd) {
    int i;
    *sum_even = 0;
    *sum_odd = 0;

    for (i = 1; i <= limit; i++) {
        int result = num * i;
        printf("%d\n", result);
        
        if (result % 2 == 0) {
            *sum_even += result;
        } else {
            *sum_odd += result;
        }
    }
}

int main(void) {
    int num, limit;
    int sum_even, sum_odd;

    while (1) {
        Read(&num, &limit);

        if (num == 0 && limit == 0) {
            printf("Obrigado!\n");
            break;
        }

        CalcPrint(num, limit, &sum_even, &sum_odd);

        printf("A soma dos números pares é %d\n", sum_even);
        printf("A soma dos números ímpares é %d\n", sum_odd);
    }

    return 0;
}



11.9Escreva um programa que realiza um cálculo matemático em 2 números inseridos pelo usuário.

Os números são lidos na função Read (não use arrays!).

A função principal:
• Chama a função Read
• Pergunta ao usuário para escolher um operador. Faça isso com um menu. Certifique-se de que apenas entradas válidas
sejam aceitas.
• Usa um ponteiro de função que aponta para a função correta (use uma declaração switch para selecionar a função correta)
• Imprime o resultado

Digite 2 números inteiros: 10 5
Escolha um operador:
0 adição
1 subtração
2 multiplicação
3 divisão
4


Escolha um operador:
0 adição
1 subtração
2 multiplicação
3 divisão
0
O resultado desta operação é: 15


#include <stdio.h>

// Funções para operações matemáticas
int add(int a, int b) {
    return a + b;
}

int subtract(int a, int b) {
    return a - b;
}

int multiply(int a, int b) {
    return a * b;
}

int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Erro: Divisão por zero.\n");
        return 0;
    }
}

// Função para ler dois números
void Read(int *a, int *b) {
    printf("Digite 2 números inteiros: ");
    scanf("%d %d", a, b);
}

int main(void) {
    int num1, num2;
    int choice;
    int (*operation)(int, int) = NULL;  // Ponteiro para função

    // Lê os números
    Read(&num1, &num2);

    // Exibe menu e lê a escolha do usuário
    printf("Escolha um operador:\n");
    printf("0 adição\n");
    printf("1 subtração\n");
    printf("2 multiplicação\n");
    printf("3 divisão\n");
    printf("4 sair\n");
    scanf("%d", &choice);

    // Seleciona a função com base na escolha do usuário
    switch (choice) {
        case 0:
            operation = add;
            break;
        case 1:
            operation = subtract;
            break;
        case 2:
            operation = multiply;
            break;
        case 3:
            operation = divide;
            break;
        case 4:
            printf("Saindo...\n");
            return 0;
        default:
            printf("Escolha inválida.\n");
            return 1;
    }

    // Executa a operação selecionada e imprime o resultado
    if (operation != NULL) {
        int result = operation(num1, num2);
        printf("O resultado desta operação é: %d\n", result);
    }

    return 0;
}



11.10
Repita o exercício anterior, mas desta vez:
• Faça uma matriz de ponteiros para funções onde o ponteiro para a função armazenado no índice 0 aponta para adição, no
índice 1 para subtração, etc.
• Escreva uma função separada Choose que retorna a escolha do usuário para o programa principal
• Certifique-se de que o inteiro retornado pela função Choose seja igual ao índice correspondente ao ponteiro da função
correta.

#include <stdio.h>

// Funções para operações matemáticas
int add(int a, int b) {
    return a + b;
}

int subtract(int a, int b) {
    return a - b;
}

int multiply(int a, int b) {
    return a * b;
}

int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Erro: Divisão por zero.\n");
        return 0;
    }
}

// Função para ler dois números
void Read(int *a, int *b) {
    printf("Digite 2 números inteiros: ");
    scanf("%d %d", a, b);
}

// Função para escolher a operação
int Choose() {
    int choice;
    printf("Escolha um operador:\n");
    printf("0 adição\n");
    printf("1 subtração\n");
    printf("2 multiplicação\n");
    printf("3 divisão\n");
    printf("4 sair\n");
    scanf("%d", &choice);
    return choice;
}

int main(void) {
    int num1, num2;
    int choice;
    
    // Matriz de ponteiros para funções
    int (*operations[4])(int, int) = {add, subtract, multiply, divide};

    // Lê os números
    Read(&num1, &num2);

    // Escolhe a operação
    choice = Choose();

    if (choice >= 0 && choice <= 3) {
        // Executa a operação selecionada e imprime o resultado
        int result = operations[choice](num1, num2);
        printf("O resultado desta operação é: %d\n", result);
    } else if (choice == 4) {
        printf("Saindo...\n");
    } else {
        printf("Escolha inválida.\n");
    }

    return 0;
}
GIT