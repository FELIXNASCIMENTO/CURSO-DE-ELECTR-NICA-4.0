
const int led = 13;
void setup() {
  
  pinMode(led, OUTPUT);
  
}

void loop() {


    digitalWrite(led, HIGH);   // Liga o LED
    delay(2500);                       
    digitalWrite(led, LOW);    // Desliga o LED
    delay(1500);                       
 
}
-----------------------------------------------------------



const int ledPin = 8;     // Pino para o LED
const int buttonPin = 2;  // Pino para o botão

void setup() {
  // Configura o pino do LED como saída
  pinMode(ledPin, OUTPUT);
  // Configura o pino do botão como entrada
  pinMode(buttonPin, INPUT);
}

void loop() {
  // Lê o estado do botão
  int buttonState = digitalRead(buttonPin);

  // Verifica se o botão está pressionado (HIGH)
  if (buttonState == HIGH) {
    // Liga o LED
    digitalWrite(ledPin, HIGH); 
  } 
  else {
    // Desliga o LED
    digitalWrite(ledPin, LOW);
  }
}
-------------------------------------------------------------------------


const int pinLED = 9;             // Pino PWM para o LED
const int pinPotentiometer = A0;   // Pino analógico para o potenciômetro

void setup() {
  // Configurando o pino do LED como saída
  pinMode(pinLED, OUTPUT);
  
  // Inicializando a comunicação serial para depuração
  Serial.begin(9600);
}

void loop() {
  // Lendo o valor do potenciômetro (0 a 1023)
  int potentiometerValue = analogRead(pinPotentiometer);
  
  // Mapeando o valor do potenciômetro para o intervalo de PWM (0 a 255)
  int ledBrightness = map(potentiometerValue, 0, 1023, 0, 255);
  
  // Ajustando o brilho do LED com base no valor lido do potenciômetro
  analogWrite(pinLED, ledBrightness);
//verificar os dados recebidos
  Serial.print("Potentiometer Value: ");
  Serial.print(potentiometerValue);
  Serial.print(" - LED Brightness: ");
  Serial.println(ledBrightness);

  delay(500);
}
---------------------------------------------------------------------------------

ponteci0metro e 9 leds

// Definindo os pinos para os LEDs e o potenciômetro
const int pinLEDs[] = {2, 3, 4, 5, 6, 7, 8, 9, 10};  // Pinos para os LEDs
const int pinPot = A0;   // Pino analógico para o potenciômetro

void setup() {
  // Configurando os pinos dos LEDs como saída
  for (int i = 0; i < 9; i++) {
    pinMode(pinLEDs[i], OUTPUT);
  }

  // Inicializando a comunicação serial para depuração
  Serial.begin(9600);
}

void loop() {
  // Lendo o valor do potenciômetro (0 a 1023)
  int potValue = analogRead(pinPot);

  // Dividindo o valor do potenciômetro para determinar quantos LEDs acender (0 a 9 LEDs)
  int numLEDsOn = map(potValue, 0, 1023, 0, 9);  // Mapeia o valor do potenciômetro para 0 a 9 LEDs

  // Ajustando os LEDs com base no valor lido do potenciômetro
  for (int i = 0; i < 9; i++) {
    if (i < numLEDsOn) {
      analogWrite(pinLEDs[i], 255);  // Acende o LED com brilho máximo
    } else {
      analogWrite(pinLEDs[i], 0);    // Desliga o LED
    }
  }

  // Imprimindo o valor do potenciômetro e o número de LEDs acesos
  Serial.print("Pot Value: ");
  Serial.print(potValue);
  Serial.print(" - LEDs On: ");
  Serial.println(numLEDsOn);

  // Atraso para suavizar a leitura
  delay(100);
}
------------------------------------------------------------------------------------------------------------------



const int analogPin=A0;
int sensorVal=0;
int timer=0;
void setup() {
  //direcionado as portas
  pinMode(12,OUTPUT);
  pinMode(11,OUTPUT);

  Serial.begin(9600);

}

void loop() {
  sensorVal=analogRead(analogPin);
  timer = map(sensorVal, 0 ,1023, 10, 500);
  digitalWrite(12,HIGH);
  delay(timer);
  digitalWrite(12,LOW);
  delay(timer);
  digitalWrite(12,HIGH);
  delay(timer);
  digitalWrite(12,LOW);
  delay(timer);
  digitalWrite(11,HIGH);
  delay(timer);
  digitalWrite(11,LOW);
  delay(timer);
  digitalWrite(12,HIGH);
  delay(timer);
  digitalWrite(12,LOW);
  delay(timer);



  
 Serial.print("valor do sensor %d ");
 Serial.print("valor convertido: %d");
Serial.print(sensorVal);
Serial.print(timer);

}

--------------------------------------------------------------------------------------------
const int BOTAO = 2;    
const int ledVerde = 11; 
const int ledAmarelo = 12;
const int ledVermelho = 13;
int ESTADOB = 0;        

// Função para piscar o LED amarelo
void piscaAmarelo() {
  digitalWrite(ledAmarelo, HIGH);
  delay(1000); 
  for (int i = 0; i < 5; i++) {
    digitalWrite(ledAmarelo, HIGH);
    delay(500);           
    digitalWrite(ledAmarelo, LOW);
    delay(500);           
  }
}

// Função para acender o LED verde
void piscaVerde() {
  digitalWrite(ledVerde, HIGH);  // Liga o LED verde por 10 segundos
  delay(5000);
  digitalWrite(ledVerde, LOW);
  delay(500);   // Desliga o LED verde
}

void setup() {
  // Configurando o botão como entrada com resistor pull-up
  pinMode(BOTAO, INPUT_PULLUP);
  pinMode(ledVerde, OUTPUT); 
  pinMode(ledAmarelo, OUTPUT);
  pinMode(ledVermelho, OUTPUT);
}

void loop() {
   piscaVerde();
  ESTADOB = digitalRead(BOTAO);
   
  if (ESTADOB == HIGH) {
    // Pisca o LED amarelo, depois acende o LED vermelho
    digitalWrite(ledAmarelo, HIGH);
    piscaAmarelo();  // Função para piscar o LED amarelo
    digitalWrite(ledAmarelo, LOW);
    digitalWrite(ledVermelho, LOW);
  } 
    digitalWrite(ledVermelho, HIGH); 
    delay(1000);
}
----------------------------------------------------------------------
chat 
const int BOTAO = 2;                // Pino do botão
const int ledAmarelo = 12;          // Pino do LED amarelo
const int ledVermelho = 13;         // Pino do LED vermelho

int estadoBotao = 0;                // Variável para armazenar o estado do botão
int estadoAnteriorBotao = 0;        // Variável para armazenar o último estado do botão
bool semaforoAtivo = false;         // Indica se o semáforo foi ativado

void setup() {
  pinMode(BOTAO, INPUT_PULLUP);     // Configura o botão com resistor pull-up
  pinMode(ledAmarelo, OUTPUT);      // Configura o LED amarelo como saída
  pinMode(ledVermelho, OUTPUT);     // Configura o LED vermelho como saída

  // Inicializa os LEDs como desligados
  digitalWrite(ledAmarelo, LOW);
  digitalWrite(ledVermelho, LOW);
}

void loop() {
  // Lê o estado do botão
  estadoBotao = digitalRead(BOTAO);

  // Verifica se o botão foi pressionado (transição de HIGH para LOW)
  if (estadoBotao == LOW && estadoAnteriorBotao == HIGH) {
    // Ativa o ciclo do semáforo
    semaforoAtivo = true;
  }

  // Se o botão foi pressionado, ativa o semáforo
  if (semaforoAtivo) {
    // Pisca o LED amarelo 5 vezes
    for (int i = 0; i < 5; i++) {
      digitalWrite(ledAmarelo, HIGH);
      delay(500);  // LED amarelo ligado por 500ms
      digitalWrite(ledAmarelo, LOW);
      delay(500);  // LED amarelo desligado por 500ms
    }

    // Liga o LED vermelho por 10 segundos
    digitalWrite(ledVermelho, HIGH);
    delay(10000);  // Mantém o LED vermelho aceso por 10 segundos
    digitalWrite(ledVermelho, LOW);

    // Reinicializa o semáforo
    semaforoAtivo = false;
  }

  // Armazena o estado anterior do botão
  estadoAnteriorBotao = estadoBotao;
}

----------------------------------------------------------------------------------------
aula 24/09


#include <Arduino.h>

// Definindo os pinos dos LEDs
#define LED_VERDE 8
#define LED_AMARELO 9
#define LED_VERMELHO 10

// Definindo os pinos do display de 7 segmentos (a, b, c, d, e, f, g)
int segmentos[] = {4, 5, 6, 7, 1, 0, 3};  // O último elemento é o ponto decimal, se necessário

// Tabela de segmentos para exibir números (0 a 9)
byte numeros[] = {
  0b00111111, // 0
  0b00000110, // 1
  0b01011011, // 2
  0b01001111, // 3
  0b01100110, // 4
  0b01101101, // 5
  0b01111101, // 6
  0b00000111, // 7
  0b01111111, // 8
  0b01101111  // 9
};

void setup() {
  // Configurando os pinos dos LEDs como saída
  pinMode(LED_VERDE, OUTPUT);
  pinMode(LED_AMARELO, OUTPUT);
  pinMode(LED_VERMELHO, OUTPUT);

  // Configurando os pinos do display de 7 segmentos como saída
  for (int i = 0; i < 7; i++) {
    pinMode(segmentos[i], OUTPUT);
  }

  // Inicializando os LEDs como apagados
  digitalWrite(LED_VERDE, LOW);
  digitalWrite(LED_AMARELO, LOW);
  digitalWrite(LED_VERMELHO, LOW);
}

void loop() {
  // Acionar o LED verde por 9 segundos
  digitalWrite(LED_VERDE, HIGH);
  mostrarTempo(9);  // Mostrar contagem regressiva de 9 a 0
  digitalWrite(LED_VERDE, LOW);

  // Piscar o LED amarelo 5 vezes e contar até 5 no display
  piscarAmareloComContagem();

  // Acionar o LED vermelho por 9 segundos
  digitalWrite(LED_VERMELHO, HIGH);
  mostrarTempo(9);  // Mostrar contagem regressiva de 9 a 0
  digitalWrite(LED_VERMELHO, LOW);
}

void mostrarTempo(int tempo) {
  for (int i = tempo; i >= 0; i--) {
    // Mostrar número no display
    mostrarNumero(i);
    delay(1000);  // Esperar 1 segundo
  }
}

void mostrarNumero(int numero) {
  byte segmentosAtivos = numeros[numero];
  for (int i = 0; i < 7; i++) {  // Atualiza os 7 segmentos (sem o ponto decimal)
    digitalWrite(segmentos[i], (segmentosAtivos >> i) & 0x01);
  }
}

// Função para piscar o LED amarelo 5 vezes e exibir contagem no display de 1 a 5
void piscarAmareloComContagem() {
  for (int i = 1; i <= 5; i++) {
    // Exibir número da contagem (de 1 a 5)
    mostrarNumero(i);

    // Piscar o LED amarelo
    digitalWrite(LED_AMARELO, HIGH);
    delay(500);  // Esperar 500ms
    digitalWrite(LED_AMARELO, LOW);
    delay(500);  // Esperar 500ms
  }
}

------------------------------------------------------
#include <LiquidCrystal.h> // Adiciona a biblioteca "LiquidCrystal" ao projeto

// Pinagem do LCD (RS, E, D4, D5, D6, D7)
LiquidCrystal lcd(8, 9, 10, 11, 12, 13);

// Definindo os pinos dos LEDs do semáforo para as duas direções
#define LED_VERDE_1 2
#define LED_AMARELO_1 3
#define LED_VERMELHO_1 4
#define LED_VERDE_2 5
#define LED_AMARELO_2 6
#define LED_VERMELHO_2 7

void setup()
{
  // Iniciando o LCD de 16x2
  lcd.begin(16, 2);

  // Configurando os pinos dos LEDs como saída
  pinMode(LED_VERDE_1, OUTPUT);
  pinMode(LED_AMARELO_1, OUTPUT);
  pinMode(LED_VERMELHO_1, OUTPUT);
  pinMode(LED_VERDE_2, OUTPUT);
  pinMode(LED_AMARELO_2, OUTPUT);
  pinMode(LED_VERMELHO_2, OUTPUT);

  // Inicializando todos os LEDs como apagados
  digitalWrite(LED_VERDE_1, LOW);
  digitalWrite(LED_AMARELO_1, LOW);
  digitalWrite(LED_VERMELHO_1, LOW);
  digitalWrite(LED_VERDE_2, LOW);
  digitalWrite(LED_AMARELO_2, LOW);
  digitalWrite(LED_VERMELHO_2, LOW);
}

void loop()
{
  // Ativar semáforo para direção 1 (LED verde 1, vermelho 2)
  digitalWrite(LED_VERDE_1, HIGH);
  digitalWrite(LED_VERMELHO_2, HIGH);
  
  // Mostrar setas ">>>>>>>>>>>" no LCD para a direção 1
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(">>>>>>>>>>>>>>>");
  lcd.setCursor(0, 1);
  lcd.print("DIRECAO 1 ATIVA");

  delay(5000); // Manter direção 1 ativada por 5 segundos

  // Mudar para amarelo direção 1
  digitalWrite(LED_VERDE_1, LOW);
  digitalWrite(LED_AMARELO_1, HIGH);
  delay(2000); // Esperar 2 segundos com o amarelo

  // Desligar direção 1 e ligar direção 2
  digitalWrite(LED_AMARELO_1, LOW);
  digitalWrite(LED_VERMELHO_1, HIGH);
  digitalWrite(LED_VERDE_2, HIGH);
  digitalWrite(LED_VERMELHO_2, LOW);
  
  // Mostrar setas "<<<<<<<<<<<<<" no LCD para a direção 2
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("<<<<<<<<<<<<<<<");
  lcd.setCursor(0, 1);
  lcd.print("DIRECAO 2 ATIVA");

  delay(5000); // Manter direção 2 ativada por 5 segundos

  // Mudar para amarelo direção 2
  digitalWrite(LED_VERDE_2, LOW);
  digitalWrite(LED_AMARELO_2, HIGH);
  delay(2000); // Esperar 2 segundos com o amarelo

  // Desligar direção 2 e repetir o ciclo
  digitalWrite(LED_AMARELO_2, LOW);
  digitalWrite(LED_VERMELHO_2, HIGH);
  digitalWrite(LED_VERMELHO_1, LOW);
}
---------------------------------------------------------------------------------------------
#include <Servo.h> // Biblioteca para controlar o servo motor

// Cria o objeto servo
Servo servoMotor;

// Pinos do joystick
int pinoJoystickX = A0; // Pino analógico conectado ao eixo X do joystick
int pinoJoystickY = A1; // Pino analógico conectado ao eixo Y do joystick

// Pino do servo motor
int pinoServo = 9;  // Pino digital onde o servo está conectado

void setup() {
  // Inicializa o servo motor no pino especificado
  servoMotor.attach(pinoServo);
}

void loop() {
  // Lê o valor do eixo X e Y do joystick (varia de 0 a 1023)
  int valorJoystickX = analogRead(pinoJoystickX);
  int valorJoystickY = analogRead(pinoJoystickY);

  // Mapeia o valor do joystick X para o ângulo do servo (0 a 180 graus)
  int anguloServoX = map(valorJoystickX, 0, 1023, 0, 180);

  // Mapeia o valor do joystick Y para o ângulo do servo (0 a 180 graus, para controle reverso)
  int anguloServoY = map(valorJoystickY, 0, 1023, 180, 0);

  // Verifica qual eixo está sendo movido com mais intensidade e ajusta o servo
  if (valorJoystickX > 512) {
    // Se o eixo X estiver sendo movido mais, controla o servo para ir à frente
    servoMotor.write(anguloServoX);
  } else if (valorJoystickY > 512) {
    // Se o eixo Y estiver sendo movido mais, controla o servo para retornar
    servoMotor.write(anguloServoY);
  }

  // Pequena pausa para evitar leituras muito rápidas
  delay(15);
}

-------------------------------------------------------------------------------------------------------------------
#include <DHT.h>           // Inclui a biblioteca DHT
#include <LiquidCrystal.h>  // Inclui a biblioteca do LCD

#define DHTPIN 2           // Pino digital conectado ao pino DATA do DHT11
#define DHTTYPE DHT11      // Define o tipo de sensor como DHT11

DHT dht(DHTPIN, DHTTYPE);  // Cria um objeto DHT

// Configura os pinos do LCD (RS, E, D4, D5, D6, D7)
LiquidCrystal lcd(13, 12, 11, 10, 9, 8);

void setup() {
  // Inicializa o LCD com 16 colunas e 2 linhas
  lcd.begin(16, 2);
  lcd.print("Iniciando...");  // Exibe mensagem inicial

  // Inicializa o sensor DHT
  dht.begin();
}

void loop() {
  // Aguarde um pouco entre as leituras (o DHT11 tem uma limitação de 1 leitura a cada 2 segundos)
  delay(2000);

  // Lê a umidade
  float umidade = dht.readHumidity();
  // Lê a temperatura em Celsius
  float temperatura = dht.readTemperature();

  // Verifica se a leitura falhou
  if (isnan(umidade) || isnan(temperatura)) {
    lcd.clear();
    lcd.print("Erro leitura DHT");
    return;
  }

  // Limpa o LCD antes de atualizar as informações
  lcd.clear();

  // Exibe a umidade na primeira linha
  lcd.setCursor(0, 0);
  lcd.print("Umid: ");
  lcd.print(umidade);
  lcd.print("%");

  // Exibe a temperatura na segunda linha
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(temperatura);
  lcd.print("C");
}
----------------------------------------------------------------------------
#define trigPin 2     // Pino Trig do sensor HC-SR04
#define echoPin 1     // Pino Echo do sensor HC-SR04

// Definição dos LEDs
#define ledVerde 4
#define ledAmarelo 5
#define ledVermelho 6

// Definição do buzzer
#define buzzer 3

void setup() {
  // Inicializa os pinos dos LEDs como saída
  pinMode(ledVerde, OUTPUT);
  pinMode(ledAmarelo, OUTPUT);
  pinMode(ledVermelho, OUTPUT);

  // Inicializa os pinos do sensor ultrassônico
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Inicializa o pino do buzzer como saída
  pinMode(buzzer, OUTPUT);
}

void loop() {
  // Variável para armazenar a distância medida
  long duracao;
  int distancia;

  // Envia um pulso de 10µs para o pino Trig
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Calcula a duração do pulso de retorno no pino Echo
  duracao = pulseIn(echoPin, HIGH);

  // Converte a duração para distância em centímetros
  distancia = duracao * 0.034 / 2;

  // Controle dos LEDs e do buzzer com base na distância
  if (distancia > 30) {
    // Distância maior que 100 cm -> Acende LED Verde e para o som do buzzer
    digitalWrite(ledVerde, HIGH);
    digitalWrite(ledAmarelo, LOW);
    digitalWrite(ledVermelho, LOW);
    noTone(buzzer);  // Desliga o buzzer
  } else if (distancia <= 15 && distancia > 10) {
    // Distância entre 50 cm e 100 cm -> Acende LED Amarelo e buzzer com frequência baixa
    digitalWrite(ledVerde, LOW);
    digitalWrite(ledAmarelo, HIGH);
    digitalWrite(ledVermelho, LOW);
    tone(buzzer, 100);  // Frequência de 1000 Hz no buzzer
  } else if (distancia <= 15) {
    // Distância menor ou igual a 50 cm -> Acende LED Vermelho e buzzer com frequência alta
    digitalWrite(ledVerde, LOW);
    digitalWrite(ledAmarelo, LOW);
    digitalWrite(ledVermelho, HIGH);
    tone(buzzer, 200);  // Frequência de 2000 Hz no buzzer
  }

  // Aguarde um pequeno tempo antes de fazer a próxima medição
  delay(50);
}
----------------------------------------------------------------------------------------------
int sensorLuz = A0;  // Pino analógico conectado ao LDR
int ledPin = 3;      // Pino PWM conectado ao LED
int valorSensor = 0; // Variável para armazenar o valor lido do sensor de luz
int brilho = 0;      // Variável para armazenar o valor do brilho do LED

void setup() {
  pinMode(ledPin, OUTPUT);   // Define o pino do LED como saída
}

void loop() {
  valorSensor = analogRead(sensorLuz); // Lê o valor do sensor de luz (0 a 1023)
  
  // Verifica se o sensor está retornando valores
  if (valorSensor < 0 || valorSensor > 1023) {
    // Se valores inesperados são lidos, desligar o LED
    analogWrite(ledPin, 0);
  } else {
    // Converte o valor do sensor (0 a 1023) para o valor de PWM (0 a 255)
    brilho = map(valorSensor, 0, 1023, 0, 255);
    
    // Ajusta o brilho do LED com base na leitura do sensor
    analogWrite(ledPin, brilho);
  }
  
 
}


-----------------------------------------------------------
#include <LiquidCrystal.h>

// Definição dos pinos para o LCD
LiquidCrystal lcd(8, 7, 3, 2, 1, 0); // Ajuste conforme necessário

// Definição dos pinos para o sensor HC-SR04
const int trigPin = 4;  // Alterado para pino 4
const int echoPin = 5;  // Alterado para pino 5

// Variáveis para armazenar a distância
long duracao;
int distancia;

void setup() {
  // Configuração dos pinos do sensor
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  // Iniciar o LCD
  lcd.begin(16, 2);  // LCD de 16 colunas e 2 linhas
}

void loop() {
  // Limpar o LCD
  lcd.clear();
  
  // Gera um pulso no pino TRIG
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Calcula a duração do eco
  duracao = pulseIn(echoPin, HIGH);
  
  // Calcula a distância em cm
  distancia = duracao * 0.034 / 2;

  // Exibe as setas na primeira linha do LCD
  lcd.setCursor(0, 0);
  lcd.print(">>>>   **   <<<<");

  // Verifica a distância e exibe a mensagem correspondente
  if (distancia < 15) {
    lcd.setCursor(0, 1); 
     lcd.print(">>>>   **   <<<<");
    lcd.setCursor(0, 1); // Segunda linha
    lcd.print(".....PERTO.....");
  } else if (distancia >= 15 && distancia <= 30) {
    lcd.setCursor(0, 1); 
     lcd.print(">>>>>>   **   <<<<<<");
    lcd.setCursor(0, 1); // Segunda linha
    lcd.print(".... PROXIMO ....");
  } else {
    lcd.setCursor(0, 1); 
     lcd.print(">>>>>>>   **   <<<<<<<");
    lcd.setCursor(0, 1); // Segunda linha
    lcd.print(" .... LONGE! .... ");
  }

  delay(600);  // Pequeno atraso para leitura estável
}

